openapi: 3.0.1
info:
  title: SecureTransport Administrator API v2.0
  contact:
    email: support@axway.com
  license:
    name: Copyright Axway 2020 - 2024. All rights reserved.
  version: 2.0.0
servers:
  - url: /api/v2.0
tags:
  - name: accountSetup
  - name: accounts
  - name: addressBook
  - name: administrativeRoles
  - name: administrators
  - name: applications
  - name: businessUnits
  - name: certificates
  - name: clusterServices
  - name: configurations
  - name: daemons
  - name: events
  - name: icapServers
  - name: ldapDomains
  - name: loginRestrictionPolicies
  - name: logs
  - name: mailTemplates
  - name: myself
  - name: routes
  - name: routeStepsMetadata
  - name: routeStepsCharsets
  - name: servers
  - name: sessions
  - name: sites
  - name: siteTemplates
  - name: statisticsSummary #statisticsSummary
  - name: subscriptions
  - name: transactionManager
  - name: transferProfiles
  - name: transfers
  - name: userClasses
  - name: version
  - name: zones
paths:
  /accounts:
    get:
      tags:
        - accounts
      summary: Get accounts collection on the ST server.
      description: "Get method returns\
          \ fully equipped accounts or partial ones based on 'fields' query\
          \ parameter. One of these links is 'certificates'. \n\n`Permissions`: \"USER_ACCOUNT_FORM\"\
          , \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n\nThree certificate types\
          \ are supported for an account object - login, partner and private. `Login`\
          \ certificates are used when an account needs to login to ST Server using\
          \ a certificate or SSH Key. `Partner` certificates are used for encrypting\
          \ PGP and AS2 data to an account and verifying the signature of data from\
          \ an account. `Private` certificates are used by ST Server to login to remote\
          \ Transfer Sites for account as well as for decryption and signing of PGP\
          \ and AS2 data.\
          \ \n\n`Implementation note:` Searching for account by properties you must specify additional property **type**.\
          \ Otherwise search is available only for common properties of accounts (name, id, uid, gid, skin, lastModified, authByEmail,
          \ disabled, transfersWebServiceAllowed, pesitId, accountCreationDate, transferType, accountSubmitForApprove, businessUnit, rejectReason,
          \ accountEncryptMode, subscriptionFolderDiscovery, fileArchivingPolicy, mappedUser, homeFolderAccessLevel, notes, loginRestrictionPolicy,
          \ accountVerificationStatus, additionalAttributes, adhocSettings, contact).\n\n
          \ When trying to filter by fields exclusive to a certain account type, the type property must be specified."
      operationId: getAccounts
      parameters:
        - name: limit
          in: query
          description: |
            The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: |
            The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: |
            The fields of account to return.

            **Note:** The type field will always be present.
          schema:
            type: string
          explode: false
        - name: status
          in: query
          description: |
            Account statuses to filter by.
          schema:
            type: array
            items:
              type: string
              enum:
                - ACTIVE
                - DISABLED
                - LOCKED
                - PENDING
                - REJECTED
        - name: businessUnit
          in: query
          description: The business unit name to filter by.
          schema:
            type: string
        - name: id
          in: query
          description: Search by account id.
          schema:
            type: string
        - name: name
          in: query
          description: Search by account name. Wildcard character (*) can be used.
          schema:
            type: string
        - name: type
          in: query
          description: |
            Search by account type.
          schema:
            type: string
            enum:
              - user
              - service
              - template
        - name: uid
          in: query
          description: Search by uid.
          schema:
            type: string
        - name: gid
          in: query
          description: Search by gid.
          schema:
            type: string
        - name: homeFolder
          in: query
          description: |
            Search by account home folder. Wildcard character (*) can be used.

            **Note:** Property 'type' must also be specified.
          schema:
            type: string
        - name: lastModified.from
          in: query
          description: |
            Search by last modified time from specific date.

            **Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.
          schema:
            type: string
        - name: lastModified.to
          in: query
          description: |
            Search by last modified time to specific date.

            **Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.
          schema:
              type: string
        - name: homeFolderAccessLevel
          in: query
          description: Search by home folder access level.
          schema:
            type: string
            enum:
              - PRIVATE
              - BUSINESS_UNIT
              - PUBLIC
        - name: mappedUser
          in: query
          description: Search by mapped user.
          schema:
            type: string
        - name: additionalAttributes.key
          in: query
          description: Search by userVars key.
          schema:
            type: string
        - name: additionalAttributes.value
          in: query
          description: Search by userVars value.
          schema:
            type: string
        - name: disabled
          in: query
          description: Search by disabled accounts.
          schema:
            type: boolean
        - name: notes
          in: query
          description: Search by notes.
          schema:
            type: string
        - name: unlicensed
          in: query
          description: Search by unlicensed property.
          schema:
            type: boolean
        - name: authByEmail
          in: query
          description: Search by authByEmail property.
          schema:
            type: boolean
        - name: loginRestrictionPolicy
          in: query
          description: Search by login restriction policy.
          schema:
            type: string
        - name: isUnlicensedUserAllowedToReply
          in: query
          description: Whether unlicensed user is allowed to reply.
          schema:
            type: boolean
        - name: accountCreationDate
          in: query
          description: Search by account creation date.
          schema:
            type: integer
            format: int64
        - name: transfersWebServiceAllowed
          in: query
          description: Search by transfersWebServiceAllowed property.
          schema:
            type: boolean
        - name: pesitId
          in: query
          description: Search by PeSIT ID.
          schema:
            type: string
        - name: accountEncryptMode
          in: query
          description: Search by account encrypt mode.
          schema:
            type: string
            enum:
              - UNSPECIFIED
              - ENABLED
        - name: subscriptionFolderDiscovery
          in: query
          description: Search by subscription folder discovery.
          schema:
            type: string
            enum:
              - ITERATIVE
              - RECURSIVE
        - name: fileArchivingPolicy
          in: query
          description: Search by account file archiving policy.
          schema:
            type: string
            enum:
              - DEFAULT
              - ENABLED
              - DISABLED
        - name: transferType
          in: query
          description: Search by transfer type.
          schema:
            type: string
            enum:
              - N
              - I
              - E
        - name: routingMode
          in: query
          description: Search by account PeSIT routing mode.
          schema:
            type: string
            enum:
              - accept
              - reject
              - ignore
        - name: accountSubmitForApprove
          in: query
          description: Whether account is submitted for approve.
          schema:
            type: boolean
        - name: rejectReason
          in: query
          description: Search by account's reason to be rejected.
          schema:
            type: string
        - name: accountVerificationStatus
          in: query
          description: Search by account verification status.
          schema:
            type: string
        - name: managedByCG
          in: query
          description: Search for accounts managed by Central Governance.
          schema:
            type: boolean
        - name: enrolledWithExternalPass
          in: query
          description: Search by enrolledWithExternalPass property.
          schema:
            type: boolean
        - name: templateClass
          in: query
          description: Search by template class.
          schema:
            type: string
        - name: contact.email
          in: query
          description: Search by contact email.
          schema:
            type: string
        - name: contact.phone
          in: query
          description: Search by contact phone.
          schema:
            type: string
        - name: user.name
          in: query
          description: |
            Search by user's name.
            **Note:** Property 'type' must also be specified.
            **Note:** User type 'template' is not applicable.
          schema:
            type: string
        - name: user.authExternal
          in: query
          description: Search by authExternal property.
          schema:
            type: boolean
        - name: user.locked
          in: query
          description: Whether user is locked.
          schema:
            type: boolean
        - name: user.failedAuthAttempts
          in: query
          description: Search by failedAuthAttempts property.
          schema:
            type: integer
            format: int32
        - name: user.failedSshKeyAuthAttempts
          in: query
          description: Search by failedSshKeyAuthAttempts property.
          schema:
            type: integer
            format: int32
        - name: user.failedAuthMaximum
          in: query
          description: Search by failedAuthMaximum property.
          schema:
            type: integer
            format: int32
        - name: user.failedSshKeyAuthMaximum
          in: query
          description: Search by failedSshKeyAuthMaximum property.
          schema:
            type: integer
            format: int32
        - name: user.lastFailedAuth.from
          in: query
          description: |
            Search by lastFailedAuth property from specific date.

            **Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.
          schema:
            type: string
        - name: user.lastFailedAuth.to
          in: query
          description: |
            Search by lastFailedAuth property to specific date.

            **Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.
          schema:
            type: string
        - name: user.lastLogin.from
          in: query
          description: |
            Search by last login for a user from specific date.

            **Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.
          schema:
            type: string
        - name: user.lastLogin.to
          in: query
          description: |
            Search by last login for a user to specific date.

            **Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.
          schema:
            type: string
        - name: user.lastFailedSshKeyAuth.from
          in: query
          description: |
            Search by lastFailedSshKeyAuth property from specific date.

            **Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.
          schema:
            type: string
        - name: user.lastFailedSshKeyAuth.to
          in: query
          description: |
            Search by lastFailedSshKeyAuth property to specific date.

            **Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.
          schema:
            type: string
        - name: user.successfulAuthMaximum
          in: query
          description: Search by successfulAuthMaximum property.
          schema:
            type: integer
            format: int32
        - name: user.successfulLogins
          in: query
          description: Search by successfulLogins property.
          schema:
            type: integer
            format: int32
        - name: user.secretQuestion.secretQuestion
          in: query
          description: Search by user's secret question.
          schema:
            type: string
            format: int32
        - name: user.secretQuestion.secretAnswerGuessFailures
          in: query
          description: Search by secretAnswerGuessFailures property.
          schema:
            type: integer
            format: int32
        - name: user.secretQuestion.forceSecretQuestionChange
          in: query
          description: Search by forceSecretQuestionChange property.
          schema:
            type: boolean
        - name: user.passwordCredentials.forcePasswordChange
          in: query
          description: Search by forcePasswordChange property.
          schema:
            type: boolean
        - name: user.passwordCredentials.lastPasswordChange.from
          in: query
          description: |
            Search by lastPasswordChange.from property from specific date.

            **Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.
          schema:
            type: string
        - name: user.passwordCredentials.lastPasswordChange.to
          in: query
          description: |
            Search by forcePasswordChange.to property to specific date.

            **Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.
          schema:
            type: string
        - name: user.passwordCredentials.passwordExpiryInterval
          in: query
          description: Search by passwordExpiryInterval property.
          schema:
            type: integer
            format: int32
        - name: adhocSettings.deliveryMethod
          in: query
          description: Search by deliveryMethod property.
          schema:
            type: string
            enum:
              - DISABLED
              - DEFAULT
              - ANONYMOUS
              - ACCOUNT_WITHOUT_ENROLLMENT
              - ACCOUNT_WITH_ENROLLMENT
              - CUSTOM
        - name: adhocSettings.implicitEnrollmentType
          in: query
          description: Search by implicitEnrollmentType property.
          schema:
            type: string
            enum:
              - ANONYMOUS_LINK
              - EXISTING_ACCOUNT
              - ENROLL_UNLICENSED
              - ENROLL_LICENSED
        - name: addressBookSettings.policy
          in: query
          description: Search by addressBook policy.
          schema:
            type: string
            enum:
              - default
              - custom
              - disabled
        - name: addressBookSettings.nonAddressBookCollaborationAllowed
          in: query
          description: Search by nonAddressBookCollaborationAllowed property.
          schema:
            type: boolean
        - name: accountMaintenanceSettings.criteria.daysAfterCreation
          in: query
          description: Search by daysAfterCreation property for accountMaintenanceSettings.
          schema:
            type: integer
            format: int32
        - name: accountMaintenanceSettings.criteria.daysOfInactivity
          in: query
          description: Search by daysOfInactivity property for accountMaintenanceSettings.
          schema:
            type: integer
            format: int32
        - name: accountMaintenanceSettings.action.action
          in: query
          description: Search by action property for accountMaintenanceSettings.
          schema:
            type: string
            enum:
              - DELETE
              - DISABLE
              - PURGE
        - name: accountMaintenanceSettings.action.daysDeleteDisabled
          in: query
          description: Search by daysDeleteDisabled property for accountMaintenanceSettings.
          schema:
            type: integer
            format: int32
        - name: accountMaintenanceSettings.emailNotificationBeforeAction.emailTemplate
          in: query
          description: Search by emailTemplate property for accountMaintenanceSettings.emailNotificationBeforeAction.
          schema:
            type: string
        - name: accountMaintenanceSettings.emailNotificationBeforeAction.notifyDays
          in: query
          description: Search by notifyDays property for accountMaintenanceSettings.emailNotificationBeforeAction.
          schema:
            type: string
        - name: accountMaintenanceSettings.emailNotificationBeforeAction.notifyAccount
          in: query
          description: Search by notifyAccount property for accountMaintenanceSettings.emailNotificationBeforeAction.
          schema:
            type: boolean
        - name: accountMaintenanceSettings.emailNotificationForUserPassword.emailTemplate
          in: query
          description: Search by emailTemplate property for accountMaintenanceSettings.emailNotificationForUserPassword.
          schema:
            type: string
        - name: accountMaintenanceSettings.emailNotificationForUserPassword.notifyDays
          in: query
          description: Search by notifyDays property for accountMaintenanceSettings.emailNotificationForUserPassword.
          schema:
            type: string
        - name: accountMaintenanceSettings.emailNotificationForUserPassword.notifyAccount
          in: query
          description: Search by notifyAccount property for accountMaintenanceSettings.emailNotificationForUserPassword.
          schema:
            type: boolean
        - name: accountMaintenanceSettings.emailNotificationForUserCertificate.emailTemplate
          in: query
          description: Search by emailTemplate property for accountMaintenanceSettings.emailNotificationForUserCertificate.
          schema:
            type: string
        - name: accountMaintenanceSettings.emailNotificationForUserCertificate.notifyDays
          in: query
          description: Search by notifyDays property for accountMaintenanceSettings.emailNotificationForUserCertificate.
          schema:
            type: string
        - name: accountMaintenanceSettings.emailNotificationForUserCertificate.notifyAccount
          in: query
          description: Search by notifyAccount property for accountMaintenanceSettings.emailNotificationForUserCertificate.
          schema:
            type: boolean
        - name: accountMaintenanceSettings.policy
          in: query
          description: Search by policy property for accountMaintenanceSettings.
          schema:
            type: string
            enum:
              - default
              - custom
              - disabled
        - name: accountMaintenanceSettings.accountDisabledDate
          in: query
          description: Search by accountDisabledDate property for accountMaintenanceSettings.
          schema:
            type: integer
            format: int64
        - name: accountMaintenanceSettings.accountNotified
          in: query
          description: Search by accountNotified property for accountMaintenanceSettings.
          schema:
            type: boolean
        - name: accountMaintenanceSettings.accountPasswordNotified
          in: query
          description: Search by accountPasswordNotified property for accountMaintenanceSettings.
          schema:
            type: boolean
        - name: accountMaintenanceSettings.accountCertificateNotified
          in: query
          description: Search by accountCertificateNotified property for accountMaintenanceSettings.
          schema:
            type: boolean
        - name: bandwidthLimits.policy
          in: query
          description: Search by policy property for bandwidthLimits.
          schema:
            type: string
            enum:
              - default
              - custom
              - disabled
        - name: bandwidthLimits.inboundLimit
          in: query
          description: Search by inboundLimit property for bandwidthLimits.
          schema:
            type: integer
            format: int32
        - name: bandwidthLimits.outboundLimit
          in: query
          description: Search by outboundLimit property for bandwidthLimits.
          schema:
            type: integer
            format: int32
        - name: fileMaintenanceSettings.policy
          in: query
          description: Search by policy property for fileMaintenanceSettings.
          schema:
            type: string
            enum:
              - default
              - custom
              - disabled
        - name: fileMaintenanceSettings.deleteFilesDays
          in: query
          description: Search by deleteFilesDays property for fileMaintenanceSettings.
          schema:
            type: integer
            format: int32
        - name: fileMaintenanceSettings.pattern
          in: query
          description: Search by pattern property for fileMaintenanceSettings.
          schema:
            type: string
        - name: fileMaintenanceSettings.expirationPeriod
          in: query
          description: Search by expirationPeriod property for fileMaintenanceSettings.
          schema:
            type: boolean
        - name: fileMaintenanceSettings.removeFolders
          in: query
          description: Search by removeFolders property for fileMaintenanceSettings.
          schema:
            type: boolean
        - name: fileMaintenanceSettings.warningNotifications
          in: query
          description: Search by warningNotifications property for fileMaintenanceSettings.
          schema:
            type: boolean
        - name: fileMaintenanceSettings.warnNotifyAccount
          in: query
          description: Search by warnNotifyAccount property for fileMaintenanceSettings.
          schema:
            type: boolean
        - name: fileMaintenanceSettings.warningNotificationsTemplate
          in: query
          description: Search by warningNotificationsTemplate property for fileMaintenanceSettings.
          schema:
            type: string
        - name: fileMaintenanceSettings.notifyDays
          in: query
          description: Search by notifyDays property for fileMaintenanceSettings.
          schema:
            type: string
        - name: fileMaintenanceSettings.sendSentinelAlert
          in: query
          description: Search by sendSentinelAlert property for fileMaintenanceSettings.
          schema:
            type: boolean
        - name: fileMaintenanceSettings.deletionNotifications
          in: query
          description: Search by deletionNotifications property for fileMaintenanceSettings.
          schema:
            type: boolean
        - name: fileMaintenanceSettings.deletionNotifyAccount
          in: query
          description: Search by deletionNotifyAccount property for fileMaintenanceSettings.
          schema:
            type: boolean
        - name: fileMaintenanceSettings.deletionNotificationsTemplate
          in: query
          description: Search by deletionNotificationsTemplate property for fileMaintenanceSettings.
          schema:
            type: string
        - name: fileMaintenanceSettings.reportNotified
          in: query
          description: Search by reportNotified property for fileMaintenanceSettings.
          schema:
            type: string
        - name: fileMaintenanceSettings.warnNotified
          in: query
          description: Search by warnNotified property for fileMaintenanceSettings.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'account.yaml#/AccountResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    post:
      tags:
        - accounts
      summary: Create an account.
      description: "`Permissions`:\
          \ \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n\n\
          Depending on the account `type` property there are three types of accounts:\
          \ user, service and template.\n\nAccounts support additional attributes\
          \ which can be added via the ST RESTful API. The additional attributes are specified in\
          \ `additionalAttributes` property using the following format: `{attribute_name}: {attribute_value}`. \n\
          \nAccounts support repository encryption mode named `accountEncryptMode`.\
          \ There are two possible options for the encryptMode: 'ENABLED' and 'UNSPECIFIED'.\
          \ When ENABLED is set then repository encryption for the account is enabled.\
          \ When UNSPECIFIED is set then repository encryption for the account is not\
          \ enabled and can be specified with EncryptClass. \n\nAccounts support\
          \ a custom property named 'transfersWebServiceAllowed' which is an attribute\
          \ name to indicate whether access to the transfers resource from the end user\
          \ RESTful API is allowed.\n\nAccounts support a custom property named\
          \ 'transferType' which is an attribute name to indicate the transfer type\
          \ of the account's transfer site. It can be unspecified (`N`), internal (`I`),\
          \ partner(`E`). By default is unspecified.\n\nAccounts support PeSIT\
          \ Store and Forward mode via property named 'routingMode'. There are three possible options for\
          \ the routingMode: `accept` (the value for Routing Mode that accept transfers),\
          \ `reject` (the value for Routing Mode that reject transfers) and `ignore`\
          \ (the value for Routing Mode that ignores transfers). By default is 'reject'.\n\
          \nAccounts support a custom property named 'subscriptionFolderDiscovery'\
          \ that defines how the subscription folder is discovered. There are two possible options\
          \ for the subscriptionFolderDiscovery - `ITERATIVE` and `RECURSIVE`. When 'ITERATIVE' is set,\
          \ then subscription folder discovery is performed by iterating over all of the account's\
          \ subscriptions while trying to match the target folder. Should be used when the number of\
          \ subscriptions is small and the target folder depth is large. When 'RECURSIVE' is set, then\
          \ subscription folder discovery is performed by recursively checking the target folder - the\
          \ target folder is checked first, then moving up to parent folders. Should be used when the\
          \ number of subscriptions is large and the target folder depth is small. The default value is: 'ITERATIVE'.\n\
          \nAccounts support a custom property named 'fileArchivingPolicy'\
          \ that can be set only if the global File Archiving is anabled. There are\
          \ three possible options for the fileArchivingPolicy - `enabled`, `disabled`\
          \ and `default`. When 'enabled' is set, file archiving will be enabled for\
          \ this account. When 'disabled' is set, file archiving will be disabled for\
          \ this account. When 'default' is set, then the following apply: if the account\
          \ is assigned to business unit, it will inherit its policy, otherwise, the\
          \ global archiving policy applies.\n\nAccounts support a custom property\
          \ name 'bandwidthInboundLimit' which defines maximum kb/s applied for HTTP/FTP/SSH inbound\
          \ transfers per account. The limit will be applied regardless of cluster/streaming\
          \ deployment configurations or number of sessions open up by each account.\n\
          \nAccounts support a custom property name 'bandwidthOutboundLimit'\
          \ which defines maximum kb/s applied for HTTP/FTP/SSH outbound transfers per account. The\
          \ limit will be applied regardless of cluster/streaming deployment configurations\
          \ or number of sessions open up by each account.\n\nAccounts which\
          \ are part of the Maker/Checker process flow support the following custom\
          \ properties named 'accountVerificationStatus', 'accountSubmitForApprove' and 'rejectReason'.\n\
          - The 'accountVerificationStatus' property indicates whether the account is verified,\
          \ rejected or pending approval. It has three possible values - 'PENDING',\
          \ 'APPROVED' and  'REJECTED'. Its value can be changed by Checker or Master\
          \ administrator.\n- The 'accountSubmitForApprove' property indicates whether the\
          \ account is submitted by Maker administrator to be verified by Checker administrator.\
          \ It can be either 'true' or 'false'. Its value can be changed by Maker or\
          \ Master administrator. Checker administrators can update the verification\
          \ status of submitted for approval accounts.\n- The 'rejectReason' property\
          \ can be used to store reasons for rejection and additional notes by Checker\
          \ and Master administratos.\n\nIf an account's type is a template, additional\
          \ templateClass(String) variable is required - the user class of the template\
          \ account.\n\nWhen an account has user current password policies will be applied if the password\
          \ has been specified. If passwordDigest is specified password policies will not be applied."
      operationId: createAccount
      parameters:
        - name: ownershipChangeMode
          in: query
          description: Controls how the subfolders of the home folder are affected upon UID/GID or homeFolder change.

            * `none` - The UID/GID of the home folder and its subfolders is not affected.

            * `nonRecursive` - Changes only the home folder.

            * `recursive` - Also changes the UID/GID of all subfolders and files.
          schema:
            type: string
            default: none
            enum:
              - recursive
              - nonRecursive
              - none
      requestBody:
        description: Account object that need to be added to the ST server.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: 'account.yaml#/UserAccount'
                - $ref: 'account.yaml#/TemplateAccount'
                - $ref: 'account.yaml#/ServiceAccount'
              discriminator:
                propertyName: type
                mapping:
                  user: 'account.yaml#/UserAccount'
                  template: 'account.yaml#/TemplateAccount'
                  service: 'account.yaml#/ServiceAccount'
            examples:
              UserAccount:
                $ref: 'postExamples.yaml#/UserAccountExample'
              TemplateAccount:
                $ref: 'postExamples.yaml#/TemplateAccountExample'
              ServiceAccount:
                $ref: 'postExamples.yaml#/ServiceAccountExample'
        required: true
      responses:
        201:
          $ref: 'responses.yaml#/Created'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        409:
          $ref: 'responses.yaml#/Conflict'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /accounts/{name}:
      head:
        tags:
          - accounts
        summary: Check if an account exists.
        description: "`Permissions`: \"USER_ACCOUNT_FORM\"\
                               , \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n"
        operationId: accountExists
        parameters:
          - name: name
            in: path
            description: The account name to search for.
            required: true
            schema:
              type: string
        responses:
          200:
            $ref: 'responses.yaml#/OK'
          400:
            $ref: 'responses.yaml#/BadRequest'
          401:
            $ref: 'responses.yaml#/Unauthorized'
          403:
            $ref: 'responses.yaml#/Forbidden'
          404:
            $ref: 'responses.yaml#/NotFound'
          406:
            $ref: 'responses.yaml#/NotAcceptable'
          415:
            $ref: 'responses.yaml#/UnsupportedMediaType'
          500:
            $ref: 'responses.yaml#/InternalServerError'
      get:
        tags:
          - accounts
        summary: Get an account.
        description: |
          `Permissions`: "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM".

          `Implementation note`: When trying to filter by fields exclusive to a certain account type, the type property must be specified.
        operationId: getAccount
        parameters:
          - name: name
            in: path
            description: The account name to search for.
            required: true
            schema:
              type: string
          - name: fields
            in: query
            description: The accounts' fields to return.
            schema:
              type: string
            explode: false
          - name: type
            in: query
            description: |
              Search by account type.
            schema:
              type: string
              enum:
                - user
                - service
                - template
        responses:
          200:
            description: Successful operation.
            content:
              application/json:
                schema:
                  anyOf:
                    - $ref: 'account.yaml#/UserAccount'
                    - $ref: 'account.yaml#/TemplateAccount'
                    - $ref: 'account.yaml#/ServiceAccount'
                  discriminator:
                    propertyName: type
                    mapping:
                      user: 'account.yaml#/UserAccount'
                      template: 'account.yaml#/TemplateAccount'
                      service: 'account.yaml#/ServiceAccount'
                examples:
                  UserAccount:
                    $ref: 'examples.yaml#/UserAccountExample'
                  TemplateAccount:
                    $ref: 'examples.yaml#/TemplateAccountExample'
                  ServiceAccount:
                    $ref: 'examples.yaml#/ServiceAccountExample'
          400:
            $ref: 'responses.yaml#/BadRequest'
          401:
            $ref: 'responses.yaml#/Unauthorized'
          403:
            $ref: 'responses.yaml#/Forbidden'
          404:
            $ref: 'responses.yaml#/NotFound'
          406:
            $ref: 'responses.yaml#/NotAcceptable'
          415:
            $ref: 'responses.yaml#/UnsupportedMediaType'
          500:
            $ref: 'responses.yaml#/InternalServerError'
      put:
        tags:
          - accounts
        summary: Replace an existing account.
        description: "`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n\n\
          \ When an account has user current password policies will be applied if the password\
          \ has been specified. If passwordDigest is specified password policies will not be applied."
        operationId: updateAccount
        parameters:
          - name: name
            in: path
            description: The name of the account that will be replaced with
              a new one.
            required: true
            schema:
              type: string
          - name: ownershipChangeMode
            in: query
            description: Controls how the subfolders of the home folder are affected upon UID/GID or homeFolder change.

              * `none` - The UID/GID of the home folder and its subfolders is not affected.

              * `nonRecursive` - Changes only the home folder.

              * `recursive` - Also changes the UID/GID of all subfolders and files.
            schema:
              type: string
              default: recursive
              enum:
                - recursive
                - nonRecursive
                - none
        requestBody:
          description: An account object that have to replace an existing
            one with the same name.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: 'account.yaml#/UserAccount'
                  - $ref: 'account.yaml#/TemplateAccount'
                  - $ref: 'account.yaml#/ServiceAccount'
                discriminator:
                  propertyName: type
                  mapping:
                    user: 'account.yaml#/UserAccount'
                    template: 'account.yaml#/TemplateAccount'
                    service: 'account.yaml#/ServiceAccount'
              examples:
                UserAccount:
                  $ref: 'postExamples.yaml#/UserAccountExample'
                TemplateAccount:
                  $ref: 'postExamples.yaml#/TemplateAccountExample'
                ServiceAccount:
                  $ref: 'postExamples.yaml#/ServiceAccountExample'
          required: true
        responses:
          204:
            $ref: 'responses.yaml#/NoContent'
          400:
            $ref: 'responses.yaml#/BadRequest'
          401:
            $ref: 'responses.yaml#/Unauthorized'
          403:
            $ref: 'responses.yaml#/Forbidden'
          404:
            $ref: 'responses.yaml#/NotFound'
          406:
            $ref: 'responses.yaml#/NotAcceptable'
          409:
            $ref: 'responses.yaml#/Conflict'
          415:
            $ref: 'responses.yaml#/UnsupportedMediaType'
          500:
            $ref: 'responses.yaml#/InternalServerError'
      patch:
        tags:
          - accounts
        summary: Partially update an account properties.
        description: "`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n\n\
          \ When an account has user current password policies will be applied if the password\
          \ has been specified. If passwordDigest is specified password policies will not be applied."
        operationId: partiallyUpdateAccount
        parameters:
          - name: name
            in: path
            description: "The name of the account which properties need to be updated."
            required: true
            schema:
              type: string
          - name: ownershipChangeMode
            in: query
            description: Controls how the subfolders of the home folder are affected upon UID/GID or homeFolder change.

              * `none` - The UID/GID of the home folder and its subfolders is not affected.

              * `nonRecursive` - Changes only the home folder.

              * `recursive` - Also changes the UID/GID of all subfolders and files.
            schema:
              type: string
              default: recursive
              enum:
                - recursive
                - nonRecursive
                - none
        requestBody:
          description: Account properties that need to be updated for the specified
            account.
          content:
            application/json:
              schema:
                $ref: 'patch.yaml#/PatchRequest'
          required: true
        responses:
          204:
            $ref: 'responses.yaml#/NoContent'
          400:
            $ref: 'responses.yaml#/BadRequest'
          401:
            $ref: 'responses.yaml#/Unauthorized'
          403:
            $ref: 'responses.yaml#/Forbidden'
          404:
            $ref: 'responses.yaml#/NotFound'
          406:
            $ref: 'responses.yaml#/NotAcceptable'
          409:
            $ref: 'responses.yaml#/Conflict'
          415:
            $ref: 'responses.yaml#/UnsupportedMediaType'
          500:
            $ref: 'responses.yaml#/InternalServerError'
      delete:
        tags:
          - accounts
        summary: Delete and/or purge an account.
        description: "`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\"\
          , \"TEMPLATES_FORM\". \n"
        operationId: deleteAccount
        parameters:
          - name: name
            in: path
            description: The name of the accout that will be deleted and/or will has it's
              home folder purged.
            required: true
            schema:
              type: string
          - name: purge
            in: query
            description: This parameter marks whether or not to purge the user's home
              folder.
            schema:
              type: boolean
        responses:
          204:
            $ref: 'responses.yaml#/NoContent'
          400:
            $ref: 'responses.yaml#/BadRequest'
          401:
            $ref: 'responses.yaml#/Unauthorized'
          403:
            $ref: 'responses.yaml#/Forbidden'
          404:
            $ref: 'responses.yaml#/NotFound'
          406:
            $ref: 'responses.yaml#/NotAcceptable'
          415:
            $ref: 'responses.yaml#/UnsupportedMediaType'
          500:
            $ref: 'responses.yaml#/InternalServerError'
  /icapServers:
    get:
      tags:
        - icapServers
      summary: Get ICAP servers.
      operationId: getIcapServers
      parameters:
        - name: limit
          in: query
          description: |
            Defines maximum count of returned entries. Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with offset query parameter to get entries at portions.
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: |
            Defines the first entry number of an ordered result to get; last entry number to return is (offset + limit - 1). Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with limit query parameter to get entries at portions.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: |
            The ICAP's fields to return.
          schema:
            type: string
        - name: serverEnabled
          in: query
          description: The ICAP server enabled to filter by.
            value.
          schema:
            type: boolean
        - name: basicSettings.name
          in: query
          description: The ICAP server name to filter by.
          schema:
            type: string
        - name: basicSettings.type
          in: query
          description: The ICAP server type to filter by.
          schema:
            type: string
            enum:
              - BOTH
              - INCOMING
              - OUTGOING
        - name: basicSettings.url
          in: query
          description: The ICAP server url to filter by.
          schema:
            type: string
        - name: basicSettings.verifyCertificate
          in: query
          description: Search ICAP servers by verifyCertificate property.
          schema:
            type: boolean
        - name: basicSettings.clientCertificate
          in: query
          description: ID of local certificate to be used for authentication.
          schema:
            type: string
        - name: basicSettings.connectionSecure
          in: query
          description: Search ICAP servers by connectionSecure property.
          schema:
            type: boolean
        - name: basicSettings.fipsEnabled
          in: query
          description: Search ICAP servers by fipsEnabled property.
          schema:
            type: boolean
        - name: basicSettings.maxSize
          in: query
          description: Search ICAP servers by maxSize property.
          schema:
            type: integer
            format: int32
        - name: basicSettings.previewSize
          in: query
          description: Search ICAP servers by previewSize property.
          schema:
            type: integer
            format: int32
        - name: basicSettings.denyOnConnectionError
          in: query
          description: Search ICAP servers by denyOnConnectionError property.
          schema:
            type: boolean
        - name: basicSettings.notifyOnIcapError
          in: query
          description: Search ICAP servers by notifyOnIcapError property.
          schema:
            type: boolean
        - name: basicSettings.mailAddressesOnIcapError
          in: query
          description: Search ICAP servers by mailAddressesOnIcapError property.
          schema:
            type: string
        - name: basicSettings.notifyOnIcapDenied
          in: query
          description: Search ICAP servers by notifyOnIcapDenied property.
          schema:
            type: boolean
        - name: basicSettings.mailAddressesOnIcapDenied
          in: query
          description: Search ICAP servers by mailAddressesOnIcapDenied property.
          schema:
            type: string
        - name: scanFilteringSettings.policyExpression
          in: query
          description: Search ICAP servers by policyExpression property.
          schema:
            type: string
        - name: scanFilteringSettings.onlyIfPartnerRecipient
          in: query
          description: Search ICAP servers by onlyIfPartnerRecipient property.
          schema:
            type: boolean
        - name: scanFilteringSettings.withoutBU
          in: query
          description: Search ICAP servers by withoutBU property.
          schema:
            type: boolean
        - name: scanFilteringSettings.ignoredFileType
          in: query
          description: Search ICAP servers by ignoredFileType property.
          schema:
            type: string
        - name: headerSettings.headersMapping
          in: query
          description: Search ICAP servers by headersMapping property.
          schema:
            type: string
        - name: advancedConnectionSettings.connectionTimeout
          in: query
          description: Search ICAP servers by connectionTimeout property.
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: advancedConnectionSettings.readTimeout
          in: query
          description: Search ICAP servers by readTimeout property.
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: advancedConnectionSettings.enabledCipher
          in: query
          description: Search ICAP servers by enabledCipher property.
          schema:
            type: string
        - name: advancedConnectionSettings.enabledProtocol
          in: query
          description: Search ICAP servers by enabledProtocol property.
          schema:
            type: string
        - name: advancedIcapSettings.enableWinNtFormat
          in: query
          description: Search ICAP servers by enableWinNtFormat property.
          schema:
            type: boolean
        - name: advancedIcapSettings.stopTransfersModifyOrNotHandled
          in: query
          description: Search ICAP servers by stopTransfersModifyOrNotHandled property.
          schema:
            type: boolean
        - name: advancedIcapSettings.treatModifyAsBlock
          in: query
          description: Search ICAP servers by treatModifyAsBlock property.
          schema:
            type: boolean
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'icapServer.yaml#/IcapServerResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    post:
      tags:
        - icapServers
      summary: Create an ICAP server.
      operationId: createIcapServer
      requestBody:
        description: ICAP server.
        content:
          application/json:
            schema:
              $ref: 'icapServer.yaml#/IcapServer'
        required: true
      responses:
        201:
          $ref: 'responses.yaml#/Created'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /icapServers/{name}:
    head:
      tags:
        - icapServers
      summary: Check if an ICAP server exists.
      operationId: icapServerExists
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    get:
      tags:
        - icapServers
      summary: Get an ICAP server.
      operationId: getIcapServer
      parameters:
        - name: name
          in: path
          description: The name of the ICAP server to be retrieved.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: The ICAP's fields to return.
          schema:
            type: string
          explode: false
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'icapServer.yaml#/IcapServer'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - icapServers
      summary: Replace an existing ICAP server.
      operationId: updateIcapServer
      parameters:
        - name: name
          in: path
          description: The name of the ICAP server to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: ICAP server to update.
        content:
          application/json:
            schema:
              $ref: 'icapServer.yaml#/IcapServer'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - icapServers
      summary: Partially update an existing ICAP server.
      operationId: partiallyUpdateIcapServer
      parameters:
        - name: name
          in: path
          description: The name of the ICAP server that needs to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: ICAP server that needs to be updated.
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    delete:
      tags:
        - icapServers
      summary: Delete an existing ICAP server.
      operationId: deleteIcapServer
      parameters:
        - name: name
          in: path
          description: The name of the ICAP server to be deleted.
          required: true
          schema:
            type: string
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /ldapDomains:
    get:
      tags:
        - ldapDomains
      summary: Get collection of LDAP domains on the ST server.
      operationId: getLdapDomains
      parameters:
        - name: limit
          in: query
          description: |
            Defines maximum count of returned entries. Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with offset query parameter to get entries at portions.
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: |
            Defines the first entry number of an ordered result to get; last entry number to return is (offset + limit - 1). Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with limit query parameter to get entries at portions.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: The LdapDomain's fields to return.
          schema:
            type: string
        - name: id
          in: query
          description: Specify the id of the ldap domain.
          schema:
            type: string
        - name: name
          in: query
          description: Specify the name of the ldap domain.
          schema:
            type: string
        - name: isDefault
          in: query
          description: Specify if ldap doamin is default domain.
          schema:
            type: boolean
        - name: precedence
          in: query
          description: Specify precedence property of ldap domain.
          schema:
            type: integer
            format: int32
        - name: protocolVersion
          in: query
          description: Specify protocol version of ldap domain.
          schema:
            type: integer
            format: int32
        - name: sslEnabled
          in: query
          description: Whether ssl is enabled.
          schema:
            type: boolean
        - name: tlsEnabled
          in: query
          description: Whether tls is enabled.
          schema:
            type: boolean
        - name: clientCertificate
          in: query
          description: ID of a local certificate to be used for authentication.
          schema:
            type: string
        - name: referralsAllowed
          in: query
          description: Whether referrals are allowed.
          schema:
            type: boolean
        - name: anonymousBindsAllowed
          in: query
          description: Whether anonymous binds are allowed.
          schema:
            type: boolean
        - name: bindDn
          in: query
          description: Specify bindDn of ldap domain.
          schema:
            type: string
        - name: commonCase
          in: query
          description: Specify commonCase of ldap domain.
          schema:
            type: string
            enum:
              - NONE
              - UPPER
              - LOWER
        - name: certVerify
          in: query
          description: Whether certVerify is enabled.
          schema:
            type: boolean
        - name: description
          in: query
          description: Specify the description of ldap domain.
          schema:
            type: string
        - name: addressBookSettings.addressBookBaseDN
          in: query
          description: Specify baseDN of address book.
          schema:
            type: string
        - name: addressBookSettings.addressBookQuery
          in: query
          description: Specify the query of address book.
          schema:
            type: string
        - name: addressBookSettings.shouldUseOnlyAdditionalQuery
          in: query
          description: Whether to use additional query for address book.
          schema:
            type: boolean
        - name: userSettings.defaultUid
          in: query
          description: Specify default uid for ldap user settings.
          schema:
            type: integer
            format: int32
        - name: userSettings.defaultGid
          in: query
          description: Specify default gid for ldap user settings.
          schema:
            type: integer
            format: int32
        - name: userSettings.defaultUserType
          in: query
          description: Specify default user type for ldap user settings.
          schema:
            type: string
            enum:
              - virtual
              - real
        - name: userSettings.defaultUserShell
          in: query
          description: Specify default user shell for ldap user settings.
          schema:
            type: string
        - name: userSettings.defaultAuthByEmail
          in: query
          description: Specify default auth by email for ldap user settings.
          schema:
            type: boolean
        - name: userSettings.sysUser
          in: query
          description: Specify system user attribute for ldap user settings.
          schema:
            type: string
        - name: ldapSearches.baseDn
          in: query
          description: Specify base dn for ldap search.
          schema:
            type: string
        - name: ldapSearches.aliasQuery
          in: query
          description: Specify alias query for ldap search.
          schema:
            type: string
        - name: ldapSearches.useGenericSearchFilter
          in: query
          description: Whether to use generic search filter.
          schema:
            type: boolean
        - name: ldapSearches.genericSearchAttribute
          in: query
          description: Specify generic search attribute for ldap search.
          schema:
            type: string
        - name: ldapSearches.genericSearchFilter
          in: query
          description: Specify generic search filter for ldap search.
          schema:
            type: string
        - name: ldapSearches.searchAttribute
          in: query
          description: Specify search attribute for ldap search.
          schema:
            type: string
            enum:
              - UID
              - CN
              - SAMACCOUNTNAME
        - name: ldapServers.id
          in: query
          description: Specify the id of ldap server.
          schema:
            type: string
        - name: ldapServers.host
          in: query
          description: Specify the host of ldap server.
          schema:
            type: string
        - name: ldapServers.port
          in: query
          description: Specify the port of ldap server.
          schema:
            type: integer
            format: int32
        - name: ldapServers.order
          in: query
          description: Specify the order of ldap server.
          schema:
            type: integer
            format: int32
        - name: attributes.attribute
          in: query
          description: Specify the attribute name of ldap attribute.
          schema:
            type: string
        - name: attributes.description
          in: query
          description: Specify the description of ldap attribute.
          schema:
            type: string
        - name: attributes.enabled
          in: query
          description: Whether ldap attribute is enabled.
          schema:
            type: boolean
        - name: attributes.mappedAttribute
          in: query
          description: Specify mapped attribute.
          schema:
            type: string
        - name: addressBookAttributes.attribute
          in: query
          description: Specify attribute name of ldap's address book.
          schema:
            type: string
        - name: addressBookAttributes.description
          in: query
          description: Specify attribute description of ldap's address book.
          schema:
            type: string
        - name: addressBookAttributes.enabled
          in: query
          description: Whether attribute is enabled.
          schema:
            type: boolean
        - name: addressBookAttributes.mappedAttribute
          in: query
          description: Specify mappedAttribute of ldap's address book.
          schema:
            type: string
        - name: dnFilters.id
          in: query
          description: Specify the id of DN filter.
          schema:
            type: string
        - name: dnFilters.enabled
          in: query
          description: Whether DN filter is enabled.
          schema:
            type: boolean
        - name: dnFilters.filter
          in: query
          description: Specify filter name.
          schema:
            type: string
        - name: dnFilters.userClass
          in: query
          description: Specify userClass property of DN filter.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'ldapDomain.yaml#/LdapDomainResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    post:
      tags:
        - ldapDomains
      summary: Create a LDAP domain on the ST server.
      operationId: createLdapDomain
      requestBody:
        description: Ldap domain that needs to be created.
        content:
          application/json:
            schema:
              $ref: 'ldapDomain.yaml#/LdapDomain'
        required: true
      responses:
        201:
          $ref: 'responses.yaml#/Created'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        409:
          $ref: 'responses.yaml#/Conflict'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /ldapDomains/{name}:
    head:
      tags:
        - ldapDomains
      summary: Check if a LDAP domain exists.
      operationId: ldapExists
      parameters:
        - name: name
          in: path
          description: Name of the ldap domain.
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    get:
      tags:
        - ldapDomains
      summary: Get a LDAP domain.
      operationId: getLdapDomain
      parameters:
        - name: name
          in: path
          description: The name of the ldap domain to be retrieved.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: The LdapDomain's fields to return.
          schema:
            type: string
          explode: false
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'ldapDomain.yaml#/LdapDomain'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - ldapDomains
      summary: Replace an existing LDAP domain.
      operationId: updateLdapDomain
      parameters:
        - name: name
          in: path
          description: The name of the LDAP domain to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: LDAP doamin to update.
        content:
          application/json:
            schema:
              $ref: 'ldapDomain.yaml#/LdapDomain'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - ldapDomains
      summary: Partially update an existing LDAP domain.
      operationId: partiallyUpdateLdapDomain
      parameters:
        - name: name
          in: path
          description: The name of the LDAP domain that needs to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: LDAP domain that needs to be updated.
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    delete:
      tags:
        - ldapDomains
      summary: Delete an existing LDAP domain.
      operationId: deleteLdapDomain
      parameters:
        - name: name
          in: path
          description: The name of the LDAP domain to be deleted.
          required: true
          schema:
            type: string
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /ldapDomains/{name}/operations:
    post:
      tags:
        - ldapDomains
      summary: Perform operation for specific LDAP domain.
      parameters:
        - name: name
          in: path
          description: The name of the ldap domain.
          required: true
          schema:
            type: string
        - name: operation
          in: query
          description: Operation type.
          required: true
          schema:
            type: string
            enum:
              - testConnection
      requestBody:
        description: The id of ldap server.
        content:
          application/json:
            schema:
              required:
                - id
              type: object
              properties:
                id:
                  type: string
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /applications:
    get:
      tags:
        - applications
      summary: Get collection of applications on the ST server.
      description: "`Permissions`:\
        \ \"APPLICATION_FORM\". \n\n
        `Implementation note:` Searching for application by properties you must specify additional property **type**. \n\n
        Otherwise search is available only for common properties of application
        (*id*, *name*, *notes*).\n\n
        \ When trying to filter by fields exclusive to a certain application type, the type property must be specified.\n\n
        \ Searching properties or filtering by fields exclusive to a certain schedule type, the schedules.type parameter must be specified."
      operationId: getApplications
      parameters:
        - name: limit
          in: query
          description: |
            The number of entries to list (the number must be a positive number). If limit is set to 0 then the default limit value of 100 entries applies. The maximum allowed number of entries is 200.
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: The offset from the first result. By default is 0.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: |
            Set of comma separated strings of applications properties to return.

            **Note:** The type field will always be present.
          schema:
            type: string
        - name: name
          in: query
          description: The application name to filter by. Wildcard character (*) can be used.
          schema:
            type: string
        - name: type
          in: query
          description: The application type to filter by.
          schema:
            type: string
            enum:
              - AccountFilePurge
              - AccountTTL
              - AdvancedRouting
              - ArchiveMaint
              - AuditLogMaint
              - Basic
              - HumanSystem
              - LogEntryMaint
              - LoginThresholdMaintenance
              - MBFT
              - PackageRetentionMaint
              - SentinelLinkDataMaint
              - SharedFolder
              - SiteMailbox
              - StandardRouter
              - SynchronyTransfer
              - TransferLogMaint
              - UnlicensedAccountMaint
        - name: schedules.type
          in: query
          description: The schedules type to filter by.
          schema:
            type: string
            enum:
              - ONCE
              - HOURLY
              - DAILY
              - WEEKLY
              - MONTHLY
              - YEARLY
              - EXPRESSION
        - name: businessUnit
          in: query
          description: The business unit to filter by.
          schema:
            type: string
        - name: notes
          in: query
          description: Search by notes.
          schema:
            type: string
        - name: managedByCG
          in: query
          description: Search for applications managed by Central Governance.
          schema:
            type: boolean
        - name: additionalAttributes.key
          in: query
          description: Search by userVars key.
          schema:
            type: string
        - name: additionalAttributes.value
          in: query
          description: Search by userVars value.
          schema:
            type: string
        - name: deleteFilesDays
          in: query
          description: Search by deleteFilesDays. Applicable only for AccountFilePurge application.
          schema:
            type: string
        - name: pattern
          in: query
          description: Search by pattern. Applicable only for AccountFilePurge application.
          schema:
            type: string
        - name: expirationPeriod
          in: query
          description: Search by expirationPeriod. Applicable only for AccountFilePurge application.
          schema:
            type: boolean
        - name: removeFolders
          in: query
          description: Search by removeFolders. Applicable only for AccountFilePurge application.
          schema:
            type: boolean
        - name: warningNotifications
          in: query
          description: Search by warningNotifications. Applicable only for AccountFilePurge application.
          schema:
            type: boolean
        - name: notifyDays
          in: query
          description: Search by notifyDays. Applicable only for AccountFilePurge application.
          schema:
            type: string
        - name: sendSentinelAlert
          in: query
          description: Search by sendSentinelAlert. Applicable only for AccountFilePurge application.
          schema:
            type: boolean
        - name: warnNotifyAccount
          in: query
          description: Search by warnNotifyAccount. Applicable only for AccountFilePurge application.
          schema:
            type: boolean
        - name: warningNotificationsTemplate
          in: query
          description: Search by warningNotificationsTemplate. Applicable only for AccountFilePurge application.
          schema:
            type: string
            enum:
              - FileMaintenanceNotification.xhtml
              - AccountMaintenanceNotification.xhtml
              - LoginThresholdReport.xhtml
              - AdhocDefault.xhtml
              - LoginThresholdNotification.xhtml
              - RoutingFailedNotification.xhtml
              - RoutingSucceededNotification.xhtml
              - RoutingTriggeredNotification.xhtml
        - name: warnNotifyEmails
          in: query
          description: Search by warnNotifyEmails. Applicable only for AccountFilePurge application.
          schema:
            type: string
        - name: deletionNotifications
          in: query
          description: Search by deletionNotifications. Applicable only for AccountFilePurge application.
          schema:
            type: boolean
        - name: deletionNotificationsTemplate
          in: query
          description: Search by deletionNotificationsTemplate. Applicable only for AccountFilePurge application.
          schema:
            type: string
            enum:
              - FileMaintenanceNotification.xhtml
              - AccountMaintenanceNotification.xhtml
              - LoginThresholdReport.xhtml
              - AdhocDefault.xhtml
              - LoginThresholdNotification.xhtml
              - RoutingFailedNotification.xhtml
              - RoutingSucceededNotification.xhtml
              - RoutingTriggeredNotification.xhtml
        - name: deletionNotifyAccount
          in: query
          description: Search by deletionNotifyAccount. Applicable only for AccountFilePurge application.
          schema:
            type: boolean
        - name: deletionNotifyEmails
          in: query
          description: Search by deletionNotifyEmails. Applicable only for AccountFilePurge application.
          schema:
            type: string
        - name: accountCreationDaysCriteria
          in: query
          description: Search by accountCreationDaysCriteria. Applicable only for AccountMaintenance (AccountTTL) application.
          schema:
            type: integer
            minimum: 0
        - name: accountInactivityDaysCriteria
          in: query
          description: Search by accountInactivityDaysCriteria. Applicable only for AccountMaintenance (AccountTTL) application.
          schema:
            type: integer
            minimum: 0
        - name: accountAction
          in: query
          description: Search by accountAction. Applicable only for AccountMaintenance (AccountTTL) application.
          schema:
            type: string
            enum:
              - DELETE
              - DISABLE
              - PURGE
        - name: deleteDisabledAccountAfterXDaysCriteria
          in: query
          description: Search by deleteDisabledAccountAfterXDaysCriteria. Applicable only for AccountMaintenance (AccountTTL) application.
          schema:
            type: integer
            minimum: 0
        - name: notificationDays
          in: query
          description: Search by notificationDays. Applicable only for AccountMaintenance (AccountTTL) application.
          schema:
            type: string
        - name: reportNotificationEmailTemplate
          in: query
          description: Search by reportNotificationEmailTemplate. Applicable only for AccountMaintenance (AccountTTL) application.
          schema:
            type: string
            enum:
              - AccountMaintenanceNotification.xhtml
              - FileMaintenanceNotification.xhtml
              - LoginThresholdReport.xhtml
              - AdhocDefault.xhtml
              - LoginThresholdNotification.xhtml
              - RoutingFailedNotification.xhtml
              - RoutingSucceededNotification.xhtml
              - RoutingTriggeredNotification.xhtml
        - name: enableAccountNotifications
          in: query
          description: Search by enableAccountNotifications. Applicable only for AccountMaintenance (AccountTTL) application.
          schema:
            type: boolean
        - name: actionNotificationEmails
          in: query
          description: Search by actionNotificationEmails. Applicable only for AccountMaintenance (AccountTTL) application.
          schema:
            type: string
        - name: passwordNotificationDays
          in: query
          description: Search by passwordNotificationDays. Applicable only for AccountMaintenance (AccountTTL) application.
          schema:
            type: string
        - name: passwordNotificationEmailTemplate
          in: query
          description: Search by passwordNotificationEmailTemplate. Applicable only for AccountMaintenance (AccountTTL) application.
          schema:
            type: string
            enum:
              - AccountMaintenanceNotification.xhtml
              - FileMaintenanceNotification.xhtml
              - LoginThresholdReport.xhtml
              - AdhocDefault.xhtml
              - LoginThresholdNotification.xhtml
              - RoutingFailedNotification.xhtml
              - RoutingSucceededNotification.xhtml
              - RoutingTriggeredNotification.xhtml
        - name: enablePasswordExpirationNotifications
          in: query
          description: Search by enablePasswordExpirationNotifications. Applicable only for AccountMaintenance (AccountTTL) application.
          schema:
            type: boolean
        - name: passwordExpirationNotificationEmails
          in: query
          description: Search by passwordExpirationNotificationEmails. Applicable only for AccountMaintenance (AccountTTL) application.
          schema:
            type: string
        - name: certificateNotificationDays
          in: query
          description: Search by certificateNotificationDays. Applicable only for AccountMaintenance (AccountTTL) application.
          schema:
            type: string
        - name: certificateNotificationEmailTemplate
          in: query
          description: Search by certificateNotificationEmailTemplate. Applicable only for AccountMaintenance (AccountTTL) application.
          schema:
            type: string
            enum:
              - AccountMaintenanceNotification.xhtml
              - FileMaintenanceNotification.xhtml
              - LoginThresholdReport.xhtml
              - AdhocDefault.xhtml
              - LoginThresholdNotification.xhtml
              - RoutingFailedNotification.xhtml
              - RoutingSucceededNotification.xhtml
              - RoutingTriggeredNotification.xhtml
        - name: enableCertificateExpiratioNotifications
          in: query
          description: Search by enableCertificateExpirationNotifications. Applicable only for AccountMaintenance (AccountTTL) application.
          schema:
            type: boolean
        - name: notificationCertificateEmails
          in: query
          description: Search by notificationCertificateEmails. Applicable only for AccountMaintenance (AccountTTL) application.
          schema:
            type: string
        - name: firstMaintenanceRun
          in: query
          description: Search by firstMaintenanceRun. Applicable only for AccountMaintenance (AccountTTL) application.
          schema:
            type: integer
            format: int64
            minimum: 0
        - name: dayMode
          in: query
          description: Search by dayMode (0 for months or 1 for days). Applicable only for AuditLogMaint and LogEntryMaint applications.
          schema:
            type: integer
        - name: timeKeepingDataInDb
          in: query
          description: Search by timeKeepingDataInDb. Applicable only for AuditLogMaint and LogEntryMaint applications.
          schema:
            type: integer
        - name: exportEnabled
          in: query
          description: Search by exportEnabled. Applicable only for AuditLogMaint, LogEntryMaint and TransferLogMaint applications.
          schema:
            type: boolean
        - name: exportDir
          in: query
          description: Search by exportDir. Applicable only for AuditLogMaint, LogEntryMaint and TransferLogMaint applications.
          schema:
            type: string
        - name: monthsKeepingDataInDb
          in: query
          description: Search by monthsKeepingDataInDb. Applicable only for AuditLogMaint application.
          schema:
            type: integer
        - name: daysKeepingDataInDb
          in: query
          description: Search by daysKeepingDataInDb. Applicable only for TransferLogMaint application.
          schema:
            type: integer
        - name: daysKeepingInProgressInDb
          in: query
          description: Search by daysKeepingInProgressInDb. Applicable only for TransferLogMaint application.
          schema:
            type: integer
        - name: daysKeepingDataInFiles
          in: query
          description: Search by daysKeepingDataInFiles. Applicable only for LogEntryMaint and TransferLogMaint applications.
          schema:
            type: integer
        - name: recordsPerFile
          in: query
          description: Search by recordsPerFile. Applicable only for LogEntryMaint and TransferLogMaint applications.
          schema:
            type: integer
        - name: parallelismDegree
          in: query
          description: Search by parallelismDegree. Applicable only for LogEntryMaint and TransgerLogMaint applications.
          schema:
            type: integer
        - name: isUnlock
          in: query
          description: Search by isUnlock. Applicable only for LoginThresholdMaintenance application.
          schema:
            type: boolean
        - name: isReport
          in: query
          description: Search by isReport. Applicable only for LoginThresholdMaintenance application.
          schema:
            type: boolean
        - name: emails
          in: query
          description: Search by emails. Applicable only for LoginThresholdMaintenance application.
          schema:
            type: string
        - name: reportEmailTemplate
          in: query
          description: Search by reportEmailTemplate. Applicable only for LoginThresholdMaintenance application.
          schema:
            type: string
            enum:
              - LoginThresholdReport.xhtml
              - AdhocDefault.xhtml
              - LoginThresholdNotification.xhtml
              - RoutingFailedNotification.xhtml
              - RoutingSucceededNotification.xhtml
              - RoutingTriggeredNotification.xhtml
              - AccountMaintenanceNotification.xhtml
              - FileMaintenanceNotification.xhtml
        - name: maxRunningMinutes
          in: query
          description: Search by maxRunningMinutes. Applicable only for PackageRetentionMaint application.
          schema:
            type: integer
        - name: outboxFolder
          in: query
          description: Search by outboxFolder. Applicable only for SiteMailbox and StandardRouter applications.
          schema:
            type: string
        - name: inboxFolder
          in: query
          description: Search by inboxFolder. Applicable only for SiteMailbox and StandardRouter applications.
          schema:
            type: string
        - name: dropFolder
          in: query
          description: Search by dropFolder. Applicable only for SiteMailbox and StandardRouter applications.
          schema:
            type: string
        - name: outboxEnabled
          in: query
          description: Search by outboxEnabled. Applicable only for StandardRouter application.
          schema:
            type: boolean
        - name: inboxEnabled
          in: query
          description: Search by inboxEnabled. Applicable only for StandardRouter application.
          schema:
            type: boolean
        - name: secureConnectionRequired
          in: query
          description: Search by secureConnectionRequired. Applicable only for StandardRouter application.
          schema:
            type: boolean
        - name: renameFilesEnabled
          in: query
          description: Search by renameFilesEnabled. Applicable only for StandardRouter application.
          schema:
            type: boolean
        - name: outboxFileFormat
          in: query
          description: Search by outboxFileFormat. Applicable only for StandardRouter application.
          schema:
            type: string
        - name: inboxIdPattern
          in: query
          description: Search by inboxIdPattern. Applicable only for StandardRouter application.
          schema:
            type: string
        - name: inactivePeriod
          in: query
          description: Search by inactivePeriod. Applicable only for UnlicensedAccountMaint application.
          schema:
            type: integer
        - name: sharedFolder
          in: query
          description: Search by sharedFolder. Applicable only for SharedFolder application.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'application.yaml#/ApplicationResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    post:
      tags:
        - applications
      summary: |
        Create an application on the ST server.
      description: |
        Depending on the application `type` property there are 18 types of accounts: 'HumanSystem', 'StandardRouter', 'SiteMailbox', 'SharedFolder', 'TransferLogMaint', 'Basic', 'AdvancedRouting', 'LogEntryMaint', 'ArchiveMaint', 'SentinelLinkDataMaint', 'SynchronyTransfer', 'MBFT', 'PackageRetentionMaint', 'UnlicensedAccountMaint', 'AuditLogMaint', 'LoginThresholdMaintenance', 'AccountTTL' and 'AccountFilePurge'.

        `Permissions`: "APPLICATION_FORM".

        Note: application types that does not support subscribing to are: 'TransferLogMaint', 'LogEntryMaint', 'ArchiveMaint', 'SentinelLinkDataMaint', 'UnlicensedAccountMaint', 'PackageRetentionMaint', 'AccountTTL', 'AccountFilePurge'
      operationId: createApplication
      requestBody:
        description: Application that needs to be created.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: 'application.yaml#/AccountFilePurgeApplication'
                - $ref: 'application.yaml#/AccountMaintenanceApplication'
                - $ref: 'application.yaml#/AdvancedRoutingApplication'
                - $ref: 'application.yaml#/ArchiveMaintApplication'
                - $ref: 'application.yaml#/AuditLogMaintApplication'
                - $ref: 'application.yaml#/BasicApplication'
                - $ref: 'application.yaml#/HumanSystemApplication'
                - $ref: 'application.yaml#/LogEntryMaintApplication'
                - $ref: 'application.yaml#/LoginThresholdMaintenanceApplication'
                - $ref: 'application.yaml#/MBFTApplication'
                - $ref: 'application.yaml#/PackageRetentionMaintApplication'
                - $ref: 'application.yaml#/SentinelLinkDataMaintApplication'
                - $ref: 'application.yaml#/SharedFolderApplication'
                - $ref: 'application.yaml#/SiteMailboxApplication'
                - $ref: 'application.yaml#/StandardRouterApplication'
                - $ref: 'application.yaml#/SynchronyTransferApplication'
                - $ref: 'application.yaml#/TransferLogMaintApplication'
                - $ref: 'application.yaml#/UnlicensedAccountMaintApplication'
              discriminator:
                propertyName: type
                mapping:
                  AccountFilePurge: 'application.yaml#/AccountFilePurgeApplication'
                  AccountTTL: 'application.yaml#/AccountMaintenanceApplication'
                  AdvancedRouting: 'application.yaml#/AdvancedRoutingApplication'
                  ArchiveMaint: 'application.yaml#/ArchiveMaintApplication'
                  AuditLogMaint: 'application.yaml#/AuditLogMaintApplication'
                  Basic: 'application.yaml#/BasicApplication'
                  HumanSystem: 'application.yaml#/HumanSystemApplication'
                  LogEntryMaint: 'application.yaml#/LogEntryMaintApplication'
                  LoginThresholdMaintenance: 'application.yaml#/LoginThresholdMaintenanceApplication'
                  MBFT: 'application.yaml#/MBFTApplication'
                  PackageRetentionMaint: 'application.yaml#/PackageRetentionMaintApplication'
                  SentinelLinkDataMaint: 'application.yaml#/SentinelLinkDataMaintApplication'
                  SharedFolder: 'application.yaml#/SharedFolderApplication'
                  SiteMailbox: 'application.yaml#/SiteMailboxApplication'
                  StandardRouter: 'application.yaml#/StandardRouterApplication'
                  SynchronyTransfer: 'application.yaml#/SynchronyTransferApplication'
                  TransferLogMaint: 'application.yaml#/TransferLogMaintApplication'
                  UnlicensedAccountMaint: 'application.yaml#/UnlicensedAccountMaintApplication'
            examples:
              FileMaintenanceApplication:
                $ref: 'postExamples.yaml#/FileMaintenanceApplication'
              AccountMaintenanceApplication:
                $ref: 'postExamples.yaml#/AccountMaintenanceApplication'
              AdvancedRoutingApplication:
                $ref: 'postExamples.yaml#/AdvancedRoutingApplication'
              ArchiveMaintApplication:
                $ref: 'postExamples.yaml#/ArchiveMaintApplication'
              AuditLogMaintApplication:
                $ref: 'postExamples.yaml#/AuditLogMaintApplication'
              BasicApplication:
                $ref: 'postExamples.yaml#/BasicApplication'
              HumanSystemApplication:
                $ref: 'postExamples.yaml#/HumanSystemApplication'
              LogEntryMaintApplication:
                $ref: 'postExamples.yaml#/LogEntryMaintApplication'
              LoginTresholdMaintenanceApplication:
                $ref: 'postExamples.yaml#/LoginTresholdMaintenanceApplication'
              MBFTApplication:
                $ref: 'postExamples.yaml#/MBFTApplication'
              PackageRetentionMaintApplication:
                $ref: 'postExamples.yaml#/PackageRetentionMaintApplication'
              SentinelLinkDataMaintApplication:
                $ref: 'postExamples.yaml#/SentinelLinkDataMaintApplication'
              SharedFolderApplication:
                $ref: 'postExamples.yaml#/SharedFolderApplication'
              SiteMailboxApplication:
                $ref: 'postExamples.yaml#/SiteMailboxApplication'
              StandardRouterApplication:
                $ref: 'postExamples.yaml#/StandardRouterApplication'
              SynchronyTransferApplication:
                $ref: 'postExamples.yaml#/SynchronyTransferApplication'
              TransferLogMaintApplication:
                $ref: 'postExamples.yaml#/TransferLogMaintApplication'
              UnlicensedAccountMaint:
                $ref: 'postExamples.yaml#/UnlicensedAccountMaint'
        required: true
      responses:
        201:
          $ref: 'responses.yaml#/Created'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /applications/{name}:
    head:
      tags:
        - applications
      summary: Check if an application exists.
      description: |
        `Permissions`: "APPLICATION_FORM".
      operationId: applicationExists
      parameters:
        - name: name
          in: path
          description: Name of the application.
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    get:
      tags:
        - applications
      summary: Get an application.
      description: |
        `Permissions`: "APPLICATION_FORM"

        `Implementation note`: When trying to filter by fields exclusive to a certain application type, the type property must be specified.
      operationId: getApplication
      parameters:
        - name: name
          in: path
          description: The name of the application.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: |
            Application's fields to return.
            **Note:** The type field will always be present.
          schema:
            type: string
          explode: false
        - name: type
          in: query
          description: The application type to filter by.
          schema:
            type: string
            enum:
              - AccountFilePurge
              - AccountTTL
              - AdvancedRouting
              - ArchiveMaint
              - AuditLogMaint
              - Basic
              - HumanSystem
              - LogEntryMaint
              - LoginThresholdMaintenance
              - MBFT
              - PackageRetentionMaint
              - SentinelLinkDataMaint
              - SharedFolder
              - SiteMailbox
              - StandardRouter
              - SynchronyTransfer
              - TransferLogMaint
              - UnlicensedAccountMaint
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: 'application.yaml#/AccountFilePurgeApplication'
                  - $ref: 'application.yaml#/AccountMaintenanceApplication'
                  - $ref: 'application.yaml#/AdvancedRoutingApplication'
                  - $ref: 'application.yaml#/ArchiveMaintApplication'
                  - $ref: 'application.yaml#/AuditLogMaintApplication'
                  - $ref: 'application.yaml#/BasicApplication'
                  - $ref: 'application.yaml#/HumanSystemApplication'
                  - $ref: 'application.yaml#/LogEntryMaintApplication'
                  - $ref: 'application.yaml#/LoginThresholdMaintenanceApplication'
                  - $ref: 'application.yaml#/MBFTApplication'
                  - $ref: 'application.yaml#/PackageRetentionMaintApplication'
                  - $ref: 'application.yaml#/SentinelLinkDataMaintApplication'
                  - $ref: 'application.yaml#/SharedFolderApplication'
                  - $ref: 'application.yaml#/SiteMailboxApplication'
                  - $ref: 'application.yaml#/StandardRouterApplication'
                  - $ref: 'application.yaml#/SynchronyTransferApplication'
                  - $ref: 'application.yaml#/TransferLogMaintApplication'
                  - $ref: 'application.yaml#/UnlicensedAccountMaintApplication'
                discriminator:
                  propertyName: type
                  mapping:
                    AccountFilePurge: 'application.yaml#/AccountFilePurgeApplication'
                    AccountTTL: 'application.yaml#/AccountMaintenanceApplication'
                    AdvancedRouting: 'application.yaml#/AdvancedRoutingApplication'
                    ArchiveMaint: 'application.yaml#/ArchiveMaintApplication'
                    AuditLogMaint: 'application.yaml#/AuditLogMaintApplication'
                    Basic: 'application.yaml#/BasicApplication'
                    HumanSystem: 'application.yaml#/HumanSystemApplication'
                    LogEntryMaint: 'application.yaml#/LogEntryMaintApplication'
                    LoginThresholdMaintenance: 'application.yaml#/LoginThresholdMaintenanceApplication'
                    MBFT: 'application.yaml#/MBFTApplication'
                    PackageRetentionMaint: 'application.yaml#/PackageRetentionMaintApplication'
                    SentinelLinkDataMaint: 'application.yaml#/SentinelLinkDataMaintApplication'
                    SharedFolder: 'application.yaml#/SharedFolderApplication'
                    SiteMailbox: 'application.yaml#/SiteMailboxApplication'
                    StandardRouter: 'application.yaml#/StandardRouterApplication'
                    SynchronyTransfer: 'application.yaml#/SynchronyTransferApplication'
                    TransferLogMaint: 'application.yaml#/TransferLogMaintApplication'
                    UnlicensedAccountMaint: 'application.yaml#/UnlicensedAccountMaintApplication'
              examples:
                FileMaintenaceApplication:
                  $ref: 'examples.yaml#/FileMaintenanceApplication'
                AccountMaintenanceApplication:
                  $ref: 'examples.yaml#/AccountMaintenanceApplication'
                AdvancedRoutingApplication:
                  $ref: 'examples.yaml#/AdvancedRoutingApplication'
                ArchiveMaintApplication:
                  $ref: 'examples.yaml#/ArchiveMaintApplication'
                AuditLogMaintApplication:
                  $ref: 'examples.yaml#/AuditLogMaintApplication'
                BasicApplication:
                  $ref: 'examples.yaml#/BasicApplication'
                HumanSystemApplication:
                  $ref: 'examples.yaml#/HumanSystemApplication'
                LogEntryMaintApplication:
                  $ref: 'examples.yaml#/LogEntryMaintApplication'
                LoginTresholdMaintenanceApplication:
                  $ref: 'examples.yaml#/LoginTresholdMaintenanceApplication'
                MBFTApplication:
                  $ref: 'examples.yaml#/MBFTApplication'
                PackageRetentionMaintApplication:
                  $ref: 'examples.yaml#/PackageRetentionMaintApplication'
                SentinelLinkDataMaintApplication:
                  $ref: 'examples.yaml#/SentinelLinkDataMaintApplication'
                SharedFolderApplication:
                  $ref: 'examples.yaml#/SharedFolderApplication'
                SiteMailboxApplication:
                  $ref: 'examples.yaml#/SiteMailboxApplication'
                StandardRouterApplication:
                  $ref: 'examples.yaml#/StandardRouterApplication'
                SynchronyTransferApplication:
                  $ref: 'examples.yaml#/SynchronyTransferApplication'
                TransferLogMaintApplication:
                  $ref: 'examples.yaml#/TransferLogMaintApplication'
                UnlicensedAccountMaintApplication:
                  $ref: 'examples.yaml#/UnlicensedAccountMaint'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - applications
      summary: Replace an existing application.
      description: |
        `Permissions`: "APPLICATION_FORM".
      operationId: updateApplication
      parameters:
        - name: name
          in: path
          description: The name of the application.
          required: true
          schema:
            type: string
      requestBody:
        description: An application that is replaced.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: 'application.yaml#/AccountFilePurgeApplication'
                - $ref: 'application.yaml#/AccountMaintenanceApplication'
                - $ref: 'application.yaml#/AdvancedRoutingApplication'
                - $ref: 'application.yaml#/ArchiveMaintApplication'
                - $ref: 'application.yaml#/AuditLogMaintApplication'
                - $ref: 'application.yaml#/BasicApplication'
                - $ref: 'application.yaml#/HumanSystemApplication'
                - $ref: 'application.yaml#/LogEntryMaintApplication'
                - $ref: 'application.yaml#/LoginThresholdMaintenanceApplication'
                - $ref: 'application.yaml#/MBFTApplication'
                - $ref: 'application.yaml#/PackageRetentionMaintApplication'
                - $ref: 'application.yaml#/SentinelLinkDataMaintApplication'
                - $ref: 'application.yaml#/SharedFolderApplication'
                - $ref: 'application.yaml#/SiteMailboxApplication'
                - $ref: 'application.yaml#/StandardRouterApplication'
                - $ref: 'application.yaml#/SynchronyTransferApplication'
                - $ref: 'application.yaml#/TransferLogMaintApplication'
                - $ref: 'application.yaml#/UnlicensedAccountMaintApplication'
              discriminator:
                propertyName: type
                mapping:
                  AccountFilePurge: 'application.yaml#/AccountFilePurgeApplication'
                  AccountTTL: 'application.yaml#/AccountMaintenanceApplication'
                  AdvancedRouting: 'application.yaml#/AdvancedRoutingApplication'
                  ArchiveMaint: 'application.yaml#/ArchiveMaintApplication'
                  AuditLogMaint: 'application.yaml#/AuditLogMaintApplication'
                  Basic: 'application.yaml#/BasicApplication'
                  HumanSystem: 'application.yaml#/HumanSystemApplication'
                  LogEntryMaint: 'application.yaml#/LogEntryMaintApplication'
                  LoginThresholdMaintenance: 'application.yaml#/LoginThresholdMaintenanceApplication'
                  MBFT: 'application.yaml#/MBFTApplication'
                  PackageRetentionMaint: 'application.yaml#/PackageRetentionMaintApplication'
                  SentinelLinkDataMaint: 'application.yaml#/SentinelLinkDataMaintApplication'
                  SharedFolder: 'application.yaml#/SharedFolderApplication'
                  SiteMailbox: 'application.yaml#/SiteMailboxApplication'
                  StandardRouter: 'application.yaml#/StandardRouterApplication'
                  SynchronyTransfer: 'application.yaml#/SynchronyTransferApplication'
                  TransferLogMaint: 'application.yaml#/TransferLogMaintApplication'
                  UnlicensedAccountMaint: 'application.yaml#/UnlicensedAccountMaintApplication'
            examples:
              FileMaintenaceApplication:
                $ref: 'examples.yaml#/FileMaintenanceApplication'
              AccountMaintenanceApplication:
                $ref: 'examples.yaml#/AccountMaintenanceApplication'
              AdvancedRoutingApplication:
                $ref: 'examples.yaml#/AdvancedRoutingApplication'
              ArchiveMaintApplication:
                $ref: 'examples.yaml#/ArchiveMaintApplication'
              AuditLogMaintApplication:
                $ref: 'examples.yaml#/AuditLogMaintApplication'
              BasicApplication:
                $ref: 'examples.yaml#/BasicApplication'
              HumanSystemApplication:
                $ref: 'examples.yaml#/HumanSystemApplication'
              LogEntryMaintApplication:
                $ref: 'examples.yaml#/LogEntryMaintApplication'
              LoginTresholdMaintenanceApplication:
                $ref: 'examples.yaml#/LoginTresholdMaintenanceApplication'
              MBFTApplication:
                $ref: 'examples.yaml#/MBFTApplication'
              PackageRetentionMaintApplication:
                $ref: 'examples.yaml#/PackageRetentionMaintApplication'
              SentinelLinkDataMaintApplication:
                $ref: 'examples.yaml#/SentinelLinkDataMaintApplication'
              SharedFolderApplication:
                $ref: 'examples.yaml#/SharedFolderApplication'
              SiteMailboxApplication:
                $ref: 'examples.yaml#/SiteMailboxApplication'
              StandardRouterApplication:
                $ref: 'examples.yaml#/StandardRouterApplication'
              SynchronyTransferApplication:
                $ref: 'examples.yaml#/SynchronyTransferApplication'
              TransferLogMaintApplication:
                $ref: 'examples.yaml#/TransferLogMaintApplication'
              UnlicensedAccountMaintApplication:
                $ref: 'examples.yaml#/UnlicensedAccountMaint'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - applications
      summary: Partially update an application.
      description: |
         `Permissions`: "APPLICATION_FORM".
      operationId: patchApplication
      parameters:
        - name: name
          in: path
          description: The name of the application that needs to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: Properties that need to be updated for the specified application.
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    delete:
      tags:
        - applications
      summary: Delete an application.
      description: |
        `Permissions`: "APPLICATION_FORM"
      operationId: deleteApplication
      parameters:
        - name: name
          in: path
          description: The name of the application.
          required: true
          schema:
            type: string
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /businessUnits:
    get:
      tags:
        - businessUnits
      summary: Get the collection of business units on the ST server.
      description: |
          `Permissions`: "BUSINESS_UNIT_FORM".
      operationId: getBusinessUnits
      parameters:
        - name: limit
          in: query
          description: |
            The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).

            `Permissions`: "BUSINESS_UNIT_FORM".
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: The start row to list. The offset parameter can has only nonnegative
            integer value. If this parameter is not set, then it is considered 0.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: The business unit's fields to return.
          schema:
            type: string
        - name: name
          in: query
          description: Search by business unit name. Wildcard character (*) can be used.
          schema:
            type: string
            minLength: 1
        - name: baseFolder
          in: query
          description: Search by business unit base folder.
          schema:
            type: string
            minLength: 1
        - name: parent
          in: query
          description: Search by business unit parent.
          schema:
            type: string
        - name: baseFolderModifyingAllowed
          in: query
          description: Whether business unit base folder is allowed for modifying.
          schema:
            type: boolean
        - name: homeFolderModifyingAllowed
          in: query
          description: Flag indicating if the belonging accounts' base folders are
            modifiable.
          schema:
            type: boolean
        - name: dmz
          in: query
          description: Search by dmz zone name.
          schema:
            type: string
        - name: managedByCG
          in: query
          description: Search for business units managed by Central Governance.
          schema:
            type: boolean
        - name: enabledIcapServers
          in: query
          description: Search by enabled icap servers for business unit.
          schema:
            type: array
            items:
              type: string
        - name: additionalAttributes.key
          in: query
          description: Search by userVars key.
          schema:
            type: string
        - name: additionalAttributes.value
          in: query
          description: Search by userVars value.
          schema:
            type: string
        - name: sharedFoldersCollaborationAllowed
          in: query
          description: Search by sharedFoldersCollaborationAllowed property.
          schema:
            type: boolean
        - name: bandwidthLimits.policy
          in: query
          description: Search by policy property for bandwidthLimits.
          schema:
            type: string
            enum:
              - default
              - custom
              - disabled
        - name: bandwidthLimits.inboundLimit
          in: query
          description: Search by inboundLimit property for bandwidthLimits.
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: bandwidthLimits.outboundLimit
          in: query
          description: Search by outboundLimit property for bandwidthLimits.
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: bandwidthLimits.modifyLimitsAllowed
          in: query
          description: Search by modifyLimitsAllowed property for bandwidthLimits.
          schema:
            type: boolean
        - name: accountMaintenanceSettings.criteria.daysAfterCreation
          in: query
          description: Search by daysAfterCreation property for accountMaintenanceSettings.
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: accountMaintenanceSettings.criteria.daysOfInactivity
          in: query
          description: Search by daysOfInactivity property for accountMaintenanceSettings.
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: accountMaintenanceSettings.criteria.specificDate
          in: query
          description: Search by specificDate property for accountMaintenanceSettings.
          schema:
            type: string
            pattern: (0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\d\d
        - name: accountMaintenanceSettings.action.action
          in: query
          description: Search by action property for accountMaintenanceSettings.
          schema:
            type: string
            enum:
              - DELETE
              - DISABLE
              - PURGE
        - name: accountMaintenanceSettings.action.daysDeleteDisabled
          in: query
          description: Search by daysDeleteDisabled property for accountMaintenanceSettings.
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: accountMaintenanceSettings.emailNotificationBeforeAction.emailTemplate
          in: query
          description: Search by emailTemplate property for accountMaintenanceSettings.
          schema:
            type: string
        - name: accountMaintenanceSettings.emailNotificationBeforeAction.notifyAccount
          in: query
          description: Search by notifyAccount property for accountMaintenanceSettings.
          schema:
            type: boolean
        - name: accountMaintenanceSettings.emailNotificationBeforeAction.notifyEmails
          in: query
          description: Search by notifyEmails property for accountMaintenanceSettings.
          schema:
            type: string
        - name: accountMaintenanceSettings.emailNotificationBeforeAction.notifyDays
          in: query
          description: Search by notifyDays property for accountMaintenanceSettings.emailNotificationBeforeAction.
          schema:
            type: string
        - name: accountMaintenanceSettings.emailNotificationForUserPassword.notifyDays
          in: query
          description: Search by notifyDays property for accountMaintenanceSettings.emailNotificationForUserPassword.
          schema:
            type: string
        - name: accountMaintenanceSettings.emailNotificationForUserPassword.emailTemplate
          in: query
          description: Search by emailTemplate property for accountMaintenanceSettings.
          schema:
            type: string
        - name: accountMaintenanceSettings.emailNotificationForUserPassword.notifyAccount
          in: query
          description: Search by notifyAccount property for accountMaintenanceSettings.
          schema:
            type: boolean
        - name: accountMaintenanceSettings.emailNotificationForUserPassword.notifyEmails
          in: query
          description: Search by notifyEmails property for accountMaintenanceSettings.
          schema:
            type: string
        - name: accountMaintenanceSettings.emailNotificationForUserCertificate.notifyDays
          in: query
          description: Search by notifyDays property for accountMaintenanceSettings.emailNotificationForUserCertificate.
          schema:
            type: string
        - name: accountMaintenanceSettings.emailNotificationForUserCertificate.emailTemplate
          in: query
          description: Search by emailTemplate property for accountMaintenanceSettings.
          schema:
            type: string
        - name: accountMaintenanceSettings.emailNotificationForUserCertificate.notifyAccount
          in: query
          description: Search by emailTemplate property for accountMaintenanceSettings.
          schema:
            type: boolean
        - name: accountMaintenanceSettings.emailNotificationForUserCertificate.notifyEmails
          in: query
          description: Search by notifyEmails property for accountMaintenanceSettings.
          schema:
            type: string
        - name: accountMaintenanceSettings.policy
          in: query
          description: Search by policy property for accountMaintenanceSettings.
          schema:
            type: string
            enum:
              - default
              - custom
              - disabled
        - name: accountMaintenanceSettings.policyModifyingAllowed
          in: query
          description: Search by policyModifyingAllowed property for accountMaintenanceSettings.
          schema:
            type: boolean
        - name: htmlTemplateSettings.allowedForModifying
          in: query
          description: Search by allowedForModifying property for htmlTemplateSettings.
          schema:
            type: boolean
        - name: transfersApiSettings.webServiceRightsModifyingAllowed
          in: query
          description: Search by webServiceRightsModifyingAllowed property for transfersApiSettings.
          schema:
            type: boolean
        - name: transfersApiSettings.transfersWebServiceAllowed
          in: query
          description: Search by transfersWebServiceAllowed property for transfersApiSettings.
          schema:
            type: boolean
        - name: adHocSettings.authByEmail
          in: query
          description: Search by authByEmail property for adHocSettings.
          schema:
            type: boolean
        - name: adHocSettings.authByEmailModifyingAllowed
          in: query
          description: Search by authByEmailModifyingAllowed property for adHocSettings.
          schema:
            type: boolean
        - name: adHocSettings.deliveryMethodModifyingAllowed
          in: query
          description: Search by deliveryMethodModifyingAllowed property for adHocSettings.
          schema:
            type: boolean
        - name: adHocSettings.deliveryMethod
          in: query
          description: Search by deliveryMethod property for adHocSettings.
          schema:
            type: string
            enum:
              - DEFAULT
              - CUSTOM
              - ANONYMOUS
              - ACCOUNT_WITHOUT_ENROLLMENT
              - ACCOUNT_WITH_ENROLLMENT
        - name: adHocSettings.enrollmentTemplate
          in: query
          description: Search by enrollmentTemplate property for adHocSettings.
          schema:
            type: string
        - name: adHocSettings.implicitEnrollmentType
          in: query
          description: Search by implicitEnrollmentType property for adHocSettings.
          schema:
            type: string
            enum:
              - ANONYMOUS_LINK
              - CHALLENGED_LINK
              - EXISTING_ACCOUNT
              - ENROLL_UNLICENSED
              - ENROLL_LICENSED
              - ENROLL_MOBILE
        - name: adHocSettings.notificationTemplate
          in: query
          description: Search by notificationTemplate property for adHocSettings.
          schema:
            type: string
        - name: fileArchivingSettings.policy
          in: query
          description: Search by policy property for fileArchivingSettings.
          schema:
            type: string
            enum:
              - default
              - enabled
              - disabled
        - name: fileArchivingSettings.policyModifyingAllowed
          in: query
          description: Search by policyModifyingAllowed property for fileArchivingSettings.
          schema:
            type: boolean
        - name: fileArchivingSettings.folderPolicy
          in: query
          description: Search by folderPolicy property for fileArchivingSettings.
          schema:
            type: string
            enum:
              - default
              - custom
        - name: fileArchivingSettings.customFolder
          in: query
          description: Search by customFolder property for fileArchivingSettings.
          schema:
            type: string
        - name: fileArchivingSettings.encryptionCertificatePolicy
          in: query
          description: Search by encryptionCertificatePolicy property for fileArchivingSettings.
          schema:
            type: string
            enum:
              - default
              - custom
              - disabled
        - name: fileArchivingSettings.customEncryptionCertificate
          in: query
          description: Search by customEncryptionCertificate property for fileArchivingSettings.
          schema:
            type: string
        - name: fileArchivingSettings.customFileSizePolicy
          in: query
          description: Search by customFileSizePolicy property for fileArchivingSettings.
          schema:
            type: string
            enum:
              - default
              - custom
        - name: fileArchivingSettings.customFileSize
          in: query
          description: Search by customFileSize property for fileArchivingSettings.
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: loginRestrictionSettings.policyModifyingAllowed
          in: query
          description: Search by policyModifyingAllowed property for loginRestrictionSettings.
          schema:
            type: boolean
        - name: loginRestrictionSettings.policy
          in: query
          description: Search by policy property for loginRestrictionSettings.
          schema:
            type: string
        - name: addressBookSettings.policy
          in: query
          description: Search by policy property for addressBookSettings.
          schema:
            type: string
            enum:
              - default
              - custom
              - disabled
        - name: addressBookSettings.modifyCollaborationAllowed
          in: query
          description: Search by modifyCollaborationAllowed property for addressBookSettings.
          schema:
            type: boolean
        - name: addressBookSettings.modifySourcesAllowed
          in: query
          description: Search by modifySourcesAllowed property for addressBookSettings.
          schema:
            type: boolean
        - name: addressBookSettings.nonAddressBookCollaborationAllowed
          in: query
          description: Search by nonAddressBookCollaborationAllowed property for addressBookSettings.
          schema:
            type: boolean
        - name: fileMaintenanceSettings.allowPolicyModifying
          in: query
          description: Search by allowPolicyModifying property for fileMaintenanceSettings.
          schema:
            type: boolean
        - name: fileMaintenanceSettings.policy
          in: query
          description: Search by policy property for fileMaintenanceSettings.
          schema:
            type: string
            enum:
              - default
              - custom
              - disabled
        - name: fileMaintenanceSettings.deleteFilesDays
          in: query
          description: Search by deleteFilesDays property for fileMaintenanceSettings.
          schema:
            type: integer
            format: int32
        - name: fileMaintenanceSettings.pattern
          in: query
          description: Search by pattern property for fileMaintenanceSettings.
          schema:
            type: string
        - name: fileMaintenanceSettings.expirationPeriod
          in: query
          description: Search by expirationPeriod property for fileMaintenanceSettings.
          schema:
            type: boolean
        - name: fileMaintenanceSettings.removeFolders
          in: query
          description: Search by removeFolders property for fileMaintenanceSettings.
          schema:
            type: boolean
        - name: fileMaintenanceSettings.warningNotifications
          in: query
          description: Search by warningNotifications property for fileMaintenanceSettings.
          schema:
            type: boolean
        - name: fileMaintenanceSettings.warnNotifyAccount
          in: query
          description: Search by warnNotifyAccount property for fileMaintenanceSettings.
          schema:
            type: boolean
        - name: fileMaintenanceSettings.warnNotifyEmails
          in: query
          description: Search by warnNotifyEmails property for fileMaintenanceSettings.
          schema:
            type: string
        - name: fileMaintenanceSettings.warningNotificationsTemplate
          in: query
          description: Search by warningNotificationsTemplate property for fileMaintenanceSettings.
          schema:
            type: string
        - name: fileMaintenanceSettings.notifyDays
          in: query
          description: Search by notifyDays property for fileMaintenanceSettings.
          schema:
            type: string
        - name: fileMaintenanceSettings.sendSentinelAlert
          in: query
          description: Search by sendSentinelAlert property for fileMaintenanceSettings.
          schema:
            type: boolean
        - name: fileMaintenanceSettings.deletionNotifications
          in: query
          description: Search by deletionNotifications property for fileMaintenanceSettings.
          schema:
            type: boolean
        - name: fileMaintenanceSettings.deletionNotifyAccount
          in: query
          description: Search by deletionNotifyAccount property for fileMaintenanceSettings.
          schema:
            type: boolean
        - name: fileMaintenanceSettings.deletionNotifyEmails
          in: query
          description: Search by deletionNotifyEmails property for fileMaintenanceSettings.
          schema:
            type: string
        - name: fileMaintenanceSettings.deletionNotificationsTemplate
          in: query
          description: Search by deletionNotificationsTemplate property for fileMaintenanceSettings.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'businessUnit.yaml#/BusinessUnitResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    post:
      tags:
        - businessUnits
      summary: Create a business unit on the ST server.
      description: |
          `Permissions`: "BUSINESS_UNIT_FORM".
      operationId: createBusinessUnit
      requestBody:
        description: Business unit that needs to be created.
        content:
          application/json:
            schema:
              $ref: 'businessUnit.yaml#/BusinessUnit'
        required: false
      responses:
        201:
          $ref: 'responses.yaml#/Created'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /businessUnits/{name}:
    head:
      tags:
        - businessUnits
      summary: Check if a business unit exists.
      description: |
          `Permissions`: "BUSINESS_UNIT_FORM".
      operationId: businessUnitExists
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    get:
      tags:
        - businessUnits
      summary: Get a business unit.
      description: |
          `Permissions`: "BUSINESS_UNIT_FORM".
      operationId: getBusinessUnit
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: The business unit's fields to return.
          schema:
            type: string
          explode: false
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'businessUnit.yaml#/BusinessUnit'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - businessUnits
      summary: Replace an existing business unit.
      description: |
          `Permissions`: "BUSINESS_UNIT_FORM".
      operationId: updateBusinessUnit
      parameters:
        - name: name
          in: path
          description: The name of the business unit that need to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: The business unit that needs to be updated.
        content:
          application/json:
            schema:
              $ref: 'businessUnit.yaml#/BusinessUnit'
        required: false
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - businessUnits
      summary: Partially update an existing business unit.
      description: |
          `Permissions`: "BUSINESS_UNIT_FORM".
      operationId: partiallyUpdateBusinessUnit
      parameters:
        - name: name
          in: path
          description: The name of the business unit that needs to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: Business unit properties that need to be updated for the specified
          business unit.
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    delete:
      tags:
        - businessUnits
      summary: Delete a business unit from the ST server.
      description: |
          `Permissions`: "BUSINESS_UNIT_FORM".
      operationId: deleteBusinessUnit
      parameters:
        - name: name
          in: path
          description: The name of the business unit that need to be deleted.
          required: true
          schema:
            type: string
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /certificates:
    get:
      tags:
        - certificates
      summary: Get all certificates.
      description: |
        `Permissions`: "MASTER_CERT_MGR_FORM_1", "MASTER_CERT_MGR_FORM_2", "MASTER_CERT_MGR_FORM_3", "MASTER_CERT_MGR_FORM", "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM", "TEMPLATES_FORM".
        
         Certificate properties 'keySize', 'validityPeriod', 'caPassword', 'password' and 'keyAlgorithm' are used only for certificate generation, they can not be get (listed) via the REST API (they have value null).
        
         When the HSM is enabled for FTP, HTTP, or SSH, the public key fingerprint cannot be loaded from the store, so the value is reported as null.
      operationId: getCertificates
      parameters:
        - name: limit
          in: query
          description: |
            The limit of the listed certificate. The limit parameter can has only positive integer value. If the limit parameter is not set then as limit is set the max Integer value.
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: The index of the first certificate reference to get.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: The fields of certificate to return.
          schema:
            type: string
        - name: id
          in: query
          description: The id to filter by.
          schema:
            type: string
        - name: type
          in: query
          description: The certificate type to search for.
          schema:
            type: string
            enum:
              - x509
              - pgp
              - ssh
        - name: usage
          in: query
          description: The certificate usage to search for.
          schema:
            type: string
            enum:
              - private
              - local
              - partner
              - login
              - trusted
        - name: fingerprintAlgorithm
          in: query
          description: The algorithm to be used for fingerprint generation (MD5, SHA-1 or SHA256).
          schema:
            type: string
        - name: base64EncodedFingerprint
          in: query
          description: Whether the fingerprint should be Base64 encoded.
          schema:
            type: boolean
        - name: disableChaining
          in: query
          description: Whether the chaining of certificates should be disabled, e.g.
            for performance improvement.
          schema:
            type: boolean
        - name: name
          in: query
          description: The certificate name to filter by. Wildcard character (*) can be used.
          schema:
            type: string
        - name: subject
          in: query
          description: The certificates with a certain subject. Wildcard character (*) can be used.
          schema:
            type: string
        - name: expirationTime.from
          in: query
          description: Specify certificate expiration time from in Unix Timestamp format.
          schema:
            type: string
        - name: expirationTime.to
          in: query
          description: Specify certificate expiration time to in Unix Timestamp format.
          schema:
            type: string
        - name: account
          in: query
          description: The account name to filter by.
          schema:
            type: string
        - name: accessLevel
          in: query
          description: Specify certificate's access level.
          schema:
            type: string
            enum:
              - PRIVATE
              - PUBLIC
              - BUSINESS_UNIT
        - name: additionalAttributes.key
          in: query
          description: Search by userVars key.
          schema:
            type: string
        - name: additionalAttributes.value
          in: query
          description: Search by userVars value.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'certificate.yaml#/CertificateResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    post:
      tags:
        - certificates
      summary: Create or import a certificate on the ST server.
      description: |
        `Permissions`: "MASTER_CERT_MGR_FORM_1", "MASTER_CERT_MGR_FORM_2", "MASTER_CERT_MGR_FORM_3", "MASTER_CERT_MGR_FORM", "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM", "TEMPLATES_FORM".
        
        On user account level there are three types of certificates depending on the certificate usage - `login`, `private` and `partner`.
        
        **Note:** Only 'ca' trusted certificate could be regenerated.
        
        **Note:** Regenerated 'ca' trustedcertificate can not be of type 'pgp'.
        
        **Note:** Login certificates can not be of type 'pgp'.
        
        **Note:** SSH login certificates can be overwritten with or without providing ID of an existing SSH certificate in the request (based only on their fingerprint). If an ID is provided then that specific SSH certificate is overwritten no matter its fingerprint.
        
        **Known issue:** `multipart/mixed` mode cannot be used with Swagger Client (refer to https://github.com/swagger-api/swagger-js/issues/2473). **Please, note that importing a certificate using SwaggerUI would fail.** More information and working examples can be found at https://support.axway.com/kb/181603/language/en.
        
        **Known issue:** The MIME boundary is hardcoded to 'BOUNDARY' because of swagger limitations (refer to https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#parameterIn for more information).
        
        **Known issue:** The import of x509 certificates of local and private usage can not be done via text representation of the certificate. This can be done with importing the PKCS #12 format file.
        
        **Known issue:** Certificate import requires additional file with the certificate content because of swagger limitations (refer to https://github.com/swagger-api/swagger-ui/issues/5090).
      requestBody:
        description: The certificate to be created or imported.
        content:
          application/json:
            schema:
              $ref: 'certificate.yaml#/PostCertificate'
          multipart/mixed; boundary=BOUNDARY:
            schema:
              $ref: 'certificate.yaml#/MultiPart'
        required: true
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        201:
          description: Successfully created certificate.
          content:
            application/json:
              schema:
                $ref: 'certificate.yaml#/Certificate'
            multipart/mixed:
              schema:
                $ref: 'certificate.yaml#/MultiPart'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /certificates/{id}:
    get:
      tags:
        - certificates
      summary: Get or export the certificate details for a certificate.
      description: |
        A login certificate could be exported only by certificate id. If export
        the private key of a trusted certificate then the private key protection
        password is required.
        
        When the HSM is enabled for FTP, HTTP, or SSH, the public key fingerprint cannot be loaded from the store, so the value is reported as null.

        ** Known Issue: Applicable when exporting certificate. https://github.com/swagger-api/swagger-ui/issues/5293 **

        `Permissions`: "MASTER_CERT_MGR_FORM_1", "MASTER_CERT_MGR_FORM_2", "MASTER_CERT_MGR_FORM_3", "MASTER_CERT_MGR_FORM", "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM", "TEMPLATES_FORM".
      parameters:
        - name: id
          in: path
          description: Applicable for GET with json/multipart. The ID of the certificate to get or export.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: The certificate's fields to return.
          schema:
            type: string
          explode: false
        - name: fingerprintAlgorithm
          in: query
          description: Applicable for GET with json. The algorithm to be used for fingerprint generation (MD5, SHA-1 or SHA256).
          schema:
            type: string
        - name: base64EncodedFingerprint
          in: query
          description: Applicable for GET with json. Whether the fingerprint should be Base64 encoded. Use for generation.
          schema:
            type: string
        - name: password
          in: query
          description: Applicable for GET with multipart. REQUIRED for exporting private key of certificate.
          schema:
            type: string
            format: password
        - name: exportSSHPublicKey
          in: query
          description: Applicable for GET with multipart.
          schema:
            type: boolean
        - name: exportPrivateKey
          in: query
          description: Applicable for GET with multipart.
          schema:
            type: boolean
        - name: sshPublicKeyFormat
          in: query
          description: Applicable for GET with multipart. The SSH Public key format to be returned.
          schema:
            type: string
            enum:
              - secsh
              - openssh
        - name: includePath
          in: query
          description: Include the path in the response. Only for GET with json.
          schema:
            type: boolean
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'certificate.yaml#/Certificate'
            multipart/mixed:
              schema:
                type: object
                properties:
                  certificateProperties:
                    $ref: 'certificate.yaml#/Certificate'
                  certificate:
                    type: string
                    format: binary
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    delete:
      tags:
        - certificates
      summary: Delete a certificate.
      description: |
          `Permissions`: "MASTER_CERT_MGR_FORM_1", "MASTER_CERT_MGR_FORM_2", "MASTER_CERT_MGR_FORM_3", "MASTER_CERT_MGR_FORM", "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM", "TEMPLATES_FORM".
      operationId: deleteCertificate
      parameters:
        - name: id
          in: path
          description: The ID of the certificate to delete.
          required: true
          schema:
            type: string
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    head:
      tags:
        - certificates
      summary: Check if a certificate exists.
      description: |
          `Permissions`: "MASTER_CERT_MGR_FORM_1", "MASTER_CERT_MGR_FORM_2", "MASTER_CERT_MGR_FORM_3", "MASTER_CERT_MGR_FORM", "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM", "TEMPLATES_FORM".
      operationId: certificateExists
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - certificates
      summary: Partially update a certificate.
      description: |
          `Note`: Only certificate's accessLevel and additionalAttributes can be modified.
      operationId: updateCertificateAccess
      parameters:
        - name: id
          in: path
          description: The id of the certificate that needs to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: Certificate's properties that need to be updated for the specified certificate.
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /certificates/{id}/operations:
    post:
      tags:
        - certificates
      summary: Export the certificate and optionally its path and/or key.
      description: |
        Export certificate or certificate path in standard format (pem, pkcs12 etc.).
      operationId: certificateExport
      parameters:
        - name: id
          in: path
          description: The id of the certificate for which to export the path.
          required: true
          schema:
            type: string
        - name: operation
          in: query
          description: The operation to perform on the certificate.
          schema:
            type: string
            enum: ["export"]
            default: "export"
        - name: format
          in: query
          description: The export format to use.
          schema:
            type: string
            enum: ["crt", "pem", "pkcs12"]
            default: "pem"
        - name: includePath
          in: query
          description: Include the path in the response container.
          schema:
            type: boolean
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                exportPassword:
                  type: string
                  format: password
                  description: Export password to use when generating the pkcs12 container.
      responses:
        200:
          description: Successful operation.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /certificates/requests:
    get:
      tags:
        - certificates
      summary: Get the collection of certificate requests on the ST server.
      description: "`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"\
        MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\"\
        , \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\nCertificate request properties\
        \ 'keySize' and 'usage' are used only for certificate generation. When get\
        \ certificate requests, 'usage' property will not be listed and 'keySize'\
        \ will be listed with a zero value.\n"
      operationId: getCertificateRequests
      parameters:
        - name: limit
          in: query
          description: |
            The limit of the listed certificates. The limit parameter can has only positive integer value. If the limit parameter is not set then as limit is set the max Integer value: 2 147 483 647
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: The index of the first certificate reference to get.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: The fields of certificateRequest to return.
          schema:
            type: string
        - name: id
          in: query
          description: The id to filter by.
          schema:
            type: string
        - name: usage
          in: query
          description: The certificate request usage to search for.
          schema:
            type: string
            enum:
              - private
              - local
        - name: subject
          in: query
          description: The subject to filter by.
          schema:
            type: string
        - name: fingerprint
          in: query
          description: The fingerprint to filter by.
          schema:
            type: string
        - name: account
          in: query
          description: The account name to filter by.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'certificate.yaml#/CertificateRequest'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    post:
      tags:
        - certificates
      summary: Generate a Certificate Signing Request on the ST server.
      description: |
          `Permissions`: "MASTER_CERT_MGR_FORM_1", "MASTER_CERT_MGR_FORM_2", "MASTER_CERT_MGR_FORM_3", "MASTER_CERT_MGR_FORM", "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM", "TEMPLATES_FORM".
      operationId: generateCertificateRequest
      requestBody:
        description: The certificateRequest object to be created.
        content:
          application/json:
            schema:
              $ref: 'certificate.yaml#/CertificateRequest'
        required: true
      responses:
        201:
          description: Successfully created a certificate signing request operation.
          content:
            multipart/mixed:
              schema:
                $ref: 'certificate.yaml#/MultiPartCertificateRequest'
            application/json:
              schema:
                $ref: 'certificate.yaml#/CertificateRequest'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /certificates/requests/{id}:
    delete:
      tags:
        - certificates
      summary: Delete a Certificate Signing Request.
      description: |
          `Permissions`: "MASTER_CERT_MGR_FORM_1", "MASTER_CERT_MGR_FORM_2", "MASTER_CERT_MGR_FORM_3", "MASTER_CERT_MGR_FORM", "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM", "TEMPLATES_FORM".
      operationId: deleteCertificateRequest
      parameters:
        - name: id
          in: path
          description: The ID of the Certificate Signing Request to delete.
          required: true
          schema:
            type: string
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    get:
      tags:
        - certificates
      summary: Get certificate request on the ST server.
      description: "`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"\
        MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\"\
        , \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\n When get\
        \ certificate requests, 'usage' property will not be listed and 'keySize'\
        \ will be listed with a zero value.\n"
      operationId: getCertificateRequest
      parameters:
        - name: id
          in: path
          description: The ID of the Certificate Signing Request to retrieve.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: The certificate's fields to return.
          schema:
            type: string
          explode: false
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'certificate.yaml#/CertificateRequest'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    head:
      tags:
        - certificates
      summary: Check if a certificate request exists.
      description: |
          `Permissions`: "MASTER_CERT_MGR_FORM_1", "MASTER_CERT_MGR_FORM_2", "MASTER_CERT_MGR_FORM_3", "MASTER_CERT_MGR_FORM", "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM", "TEMPLATES_FORM".
      operationId: certificateRequestExists
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    post:
      tags:
        - certificates
      summary: Complete Certificate Signing Request on the ST server.
      description: |
          `Permissions`: "MASTER_CERT_MGR_FORM_1", "MASTER_CERT_MGR_FORM_2", "MASTER_CERT_MGR_FORM_3", "MASTER_CERT_MGR_FORM", "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM", "TEMPLATES_FORM".
      operationId: completeCertificateRequest
      parameters:
        - name: id
          in: path
          description: The ID of the certificateRequest to be completed.
          required: true
          schema:
            type: string
        - in: header
          name: certificateFile
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                alias:
                  type: string
                  description: The name of the certificate to be imported.
                certificateFile:
                  type: string
                  description: The Certificate File to be uplaoded.
                  format: binary
        description: The certificateRequest object to be completed.
      responses:
        200:
          description: Successfully finished certificate signing request operation.
          content:
            application/json:
              schema:
                $ref: 'certificate.yaml#/Certificate'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /zones:
    get:
      tags:
        - zones
      summary: Get collection of zones on the ST server.
      description: |
          `Permissions`: "DMZ_ZONE_FORM"
      operationId: getDmzZones
      parameters:
        - name: limit
          in: query
          description: |
           The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).
          schema:
           type: integer
           format: int32
        - name: offset
          in: query
          description: |
            The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: |
            The zone's fields to return.
          schema:
            type: string
          explode: false
        - name: name
          in: query
          description: |
            Search by zone name.
          schema:
            type: string
        - name: isDefault
          in: query
          description: |
            Search by isDefault property.
          schema:
            type: boolean
        - name: description
          in: query
          description: |
            Search by description of zone.
          schema:
            type: string
        - name: publicURLPrefix
          in: query
          description: |
            Search by publicURLPrefix of zone.
          schema:
            type: string
        - name: ssoSpEntityId
          in: query
          description: |
            Search zones by ssoSpEntityId.
          schema:
            type: string
        - name: isDnsResolutionEnabled
          in: query
          description: |
            Search by isDnsResolutionEnabled property.
          schema:
            type: boolean
        - name: edges.enabledProxy
          in: query
          description: |
            Search zones by enabledProxy property of edges.
          schema:
            type: boolean
        - name: edges.title
          in: query
          description: |
            Search zones by title of edge.
          schema:
            type: string
        - name: edges.notes
          in: query
          description: |
            Search zones by notes of edges.
          schema:
            type: string
        - name: edges.configurationId
          in: query
          description: |
            Search zones by configurationId of edges.
          schema:
            type: string
        - name: edges.descriptor
          in: query
          description: |
            Search zones by descriptor of edges.
          schema:
            type: string
        - name: edges.isAutoDiscoverable
          in: query
          description: |
            **Note:** Beta Feature - Do not use in Production. Check 'Beta.Dmz.DynamicNodeIpDiscovery.Enabled' configuration option.
            **Note:** The property is available only for zones different than the 'Private' one and only on Backend.
            
            Search zones by isAutoDiscoverable property of edges.
          schema:
            type: boolean
        - name: edges.dynamicNodeIpDiscoveryFqdn
          in: query
          description: |
            **Note:** Beta Feature - Do not use in Production. Check 'Beta.Dmz.DynamicNodeIpDiscovery.Enabled' configuration option.
            **Note:** The property is available only for zones different than the 'Private' one and only on Backend.
            
            Search zones by dynamicNodeIpDiscoveryFqdn property of edges.
          schema:
            type: string
        - name: edges.ipAddresses.ipAddress
          in: query
          description: |
            Search zones by ipAddress of edge.
          schema:
            type: string
        - name: edges.protocols.isEnabled
          in: query
          description: |
            Search zones by isEnabled property of edge's protocols.
          schema:
            type: boolean
        - name: edges.protocols.streamingProtocol
          in: query
          description: |
            Search zones by streamingProtocol of edge's protocols.
          schema:
            type: string
            enum:
              - HTTP
              - FTP
              - AS2
              - SSH
              - PESIT
              - ADMIN
        - name: edges.protocols.port
          in: query
          description: |
            Search zones by port of edge's protocols.
          schema:
            type: integer
            format: int32
        - name: edges.protocols.sslAlias
          in: query
          description: |
            Search zones by sslAlias of edge's protocols.
          schema:
            type: string
        - name: edges.proxies.isEnabled
          in: query
          description: |
            Search zones by isEnabled property of edge's proxies.
          schema:
            type: boolean
        - name: edges.proxies.proxyProtocol
          in: query
          description: |
            Search zones by proxyProtocol of edge.
          schema:
            type: string
        - name: edges.proxies.port
          in: query
          description: |
            Search zones by port of edge's proxies.
          schema:
            type: integer
            format: int32
        - name: edges.proxies.username
          in: query
          description: |
            Search zones by username of edge's proxies.
          schema:
            type: string
        - name: edges.proxies.isUsePassword
          in: query
          description: |
            Search zones by isUsePassword property of edge's proxies.
          schema:
            type: boolean
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'zone.yaml#/ZoneResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    post:
      tags:
        - zones
      summary: Create a zone on the ST server.
      description: |
          `Permissions`: "DMZ_ZONE_FORM"
      operationId: createZone
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'zone.yaml#/Zone'
        required: true
      responses:
        201:
          $ref: 'responses.yaml#/Created'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /zones/{name}:
    head:
      tags:
        - zones
      summary: Check if zone exists.
      description: |
         `Permissions`: "DMZ_ZONE_FORM"
      operationId: zoneExists
      parameters:
        - name: name
          in: path
          description: The name of the zone.
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    get:
      tags:
        - zones
      summary: Get a DMZ zone with a given name.
      description: |
          `Permissions`: "DMZ_ZONE_FORM"
      operationId: getDmzZone
      parameters:
        - name: name
          in: path
          description: The name of the zone to get.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: The zone's fields to return.
          schema:
            type: string
          explode: false
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'zone.yaml#/Zone'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - zones
      summary: Replace an existing zone with the same name on the ST Server.
      description: |
          `Permissions`: "DMZ_ZONE_FORM"
      operationId: updateZone
      parameters:
        - name: name
          in: path
          description: The name of the zone to replace.
          required: true
          schema:
            type: string
      requestBody:
        description: The DMZ zone to replace.
        content:
          application/json:
            schema:
              $ref: 'zone.yaml#/Zone'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - zones
      summary: Partially update a zone.
      description: |
        The update fully overrides the previously existing zone on the SecureTransport
        server.

        `Permissions`: "DMZ_ZONE_FORM"
      operationId: partiallyUpdateZone
      parameters:
        - name: name
          in: path
          description: The name of the zone.
          required: true
          schema:
            type: string
      requestBody:
        description: Zone object with properties to set.
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    delete:
      tags:
        - zones
      summary: Deletes a zone with given name.
      description: |
          `Permissions`: "DMZ_ZONE_FORM"
      operationId: deleteZone
      parameters:
        - name: name
          in: path
          description: The name of the zone to delete.
          required: true
          schema:
            type: string
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /loginRestrictionPolicies:
    get:
      tags:
        - loginRestrictionPolicies
      summary: Get login restriction policies collection on the ST server.
      operationId: getPolicies
      parameters:
        - name: limit
          in: query
          description: The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: The route's fields to return.
          schema:
            type: string
        - name: name
          in: query
          description: The login restriction policy name to filter by. Wildcard character (*) can be used.
          schema:
            type: string
        - name: orderByName
          in: query
          description: The order of filtering by name.
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
        - name: nameMatchMode
          deprecated: true
          in: query
          description: The name match mode. (Not used anymore, instead use wildcards in the name parameter)
          schema:
            type: string
            enum:
              - EXACT
              - START
              - END
              - ANYWHERE
        - name: type
          in: query
          description: The login restriction policy type to filter by.
          schema:
            type: string
            enum:
              - ALLOW_THEN_DENY
              - DENY_THEN_ALLOW
        - name: isDefault
          in: query
          description: Filter only the default login restriction policy or filter all
            policies without the default one.
          schema:
            type: boolean
        - name: businessUnit
          in: query
          description: The bisuness unit name to filter by.
          schema:
            type: string
        - name: additionalAttributes.key
          in: query
          description: Search by userVars key.
          schema:
            type: string
        - name: additionalAttributes.value
          in: query
          description: Search by userVars value.
          schema:
            type: string
        - name: description
          in: query
          description: Description to filter by.
          schema:
            type: string
        - name: rules.name
          in: query
          description: Applicable for loginRestrictionPolicy's rule. Rule's name to filter by.
          schema:
            type: string
        - name: rules.isEnabled
          in: query
          description: Applicable for loginRestrictionPolicy's rule. Whether rule is enabled.
          schema:
            type: boolean
        - name: rules.type
          in: query
          description: Applicable for loginRestrictionPolicy's rule. Rule's type to filter by.
          schema:
            type: string
        - name: rules.clientAddress
          in: query
          description: Applicable for loginRestrictionPolicy's rule. Rule's clientAddress to filter by.
          schema:
            type: string
        - name: rules.expression
          in: query
          description: Applicable for loginRestrictionPolicy's rule. Rule's expression to filter by.
          schema:
            type: string
        - name: rules.description
          in: query
          description: Applicable for loginRestrictionPolicy's rule. Rule's description to filter by.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'loginRestrictionPolicy.yaml#/PolicyResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    post:
      tags:
        - loginRestrictionPolicies
      summary: Create a login restriction policy.
      operationId: createPolicy
      requestBody:
        description: The login restriction policy to create.
        content:
          application/json:
            schema:
              $ref: 'loginRestrictionPolicy.yaml#/Policy'
        required: true
      responses:
        201:
          $ref: 'responses.yaml#/Created'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /loginRestrictionPolicies/{name}:
    head:
      tags:
        - loginRestrictionPolicies
      summary: Check if a login restriction policy exists.
      operationId: policyExists
      parameters:
        - name: name
          in: path
          required: true
          description: Name of the loginRestritionPolicy.
          schema:
            type: string
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    get:
      tags:
        - loginRestrictionPolicies
      summary: Get login restriction policy.
      operationId: getPolicy
      parameters:
        - name: name
          in: path
          description: The name of the login restriction policy to get.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: The loginRestrictionPolicies` fields to return.
          schema:
            type: string
          explode: false
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'loginRestrictionPolicy.yaml#/Policy'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - loginRestrictionPolicies
      summary: Partially update an existing login restriction policy.
      operationId: partiallyUpdatePolicy
      parameters:
        - name: name
          in: path
          description: The name of the loginRestrictionPolicy that needs to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: LoginRestrictionPolicy properties that need to be updated.
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - loginRestrictionPolicies
      summary: Replace an existing properties of a login restriction policy.
      operationId: updatePolicyProperties
      parameters:
        - name: name
          in: path
          description: The name of the login restriction policy to update.
          required: true
          schema:
            type: string
      requestBody:
        description: The login restriction policy which properties to update.
        content:
          application/json:
            schema:
              $ref: 'loginRestrictionPolicy.yaml#/Policy'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    delete:
      tags:
        - loginRestrictionPolicies
      summary: Delete a login restriction policy.
      operationId: deletePolicy
      parameters:
        - name: name
          in: path
          description: The name of the login restriction policy to delete.
          required: true
          schema:
            type: string
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /logs/audit:
    get:
      tags:
        - logs
      summary: Get the collection of audit logs.
      description: |
          `Permissions`: "AUDIT_LOG_FORM", "AUDIT_LOG_FORM_1".
      operationId: getOrExportAuditLogEntries
      parameters:
        - name: limit
          in: query
          description: |
            The number of entries to list (the number must be a positive number). If limit is set to 0 then the default limit value of 100 entries applies. The maximum allowed number of entries is 200.
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: The offset from the first result. By default is 0.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: Set of comma separated strings of audit log properties to return.
          schema:
            type: string
        - name: fromDate
          in: query
          description: The from date in RFC2822 string - EEE, d MMM yyyy HH:mm:ss Z.
          schema:
            type: string
        - name: endDate
          in: query
          description: The end date in RFC2822 string - EEE, d MMM yyyy HH:mm:ss Z.
          schema:
            type: string
        - name: dateModified
          in: query
          description: The modification date of the audit log.
          schema:
            type: string
        - name: duration
          in: query
          description: The time duration in hours.
          schema:
            type: string
        - name: userName
          in: query
          description: The name/part of name of the user who modified the object.
          schema:
            type: string
        - name: remoteAddress
          in: query
          description: The IP address of the remote client that sent the request.
          schema:
            type: string
        - name: objectType
          in: query
          description: The type of the object modified.
          schema:
            type: string
        - name: objectName
          in: query
          description: The name/part of name of the object modified.
          schema:
            type: string
        - name: objectString
          in: query
          description: The string representation of the audited object
          schema:
            type: string
        - name: objectIdentifier
          in: query
          description: The object identifier.
          schema:
            type: string
        - name: operationType
          in: query
          description: The type of the operation.
          schema:
            type: string
        - name: description
          in: query
          description: The exact description of the audit operation.
          schema:
            type: string
        - name: configurationId
          in: query
          description: A list of cluster node configuration id-s.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'logs.yaml#/AuditLogEntryResult'
            text/csv: {}
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /logs/audit/{id}:
    get:
      tags:
        - logs
      summary: Get an audit log.
      description: |
          `Permissions`: "AUDIT_LOG_FORM", "AUDIT_LOG_FORM_1".
      operationId: getAuditLogEntry
      parameters:
        - name: id
          in: path
          description: The id of the audit log.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: The audit log's fields to return.
          schema:
            type: string
          explode: false
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: 'logs.yaml#/AuditLogEntry'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - logs
      summary: Replace an existing description of an audit log.
      description: |
        `Permissions`: "AUDIT_LOG_FORM", "AUDIT_LOG_FORM_1".
      operationId: updateAuditLogEntryDescription
      parameters:
        - name: id
          in: path
          description: The id of the audit log.
          required: true
          schema:
            type: string
      requestBody:
        description: The audit log that needs to be updated.
        content:
          application/json:
            schema:
              $ref: 'logs.yaml#/AuditLogEntry'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: 'logs.yaml#/AuditLogEntry'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /logs/server:
    get:
      tags:
        - logs
      summary: Get the collection of server logs.
      description: |
        `Permissions`: "SERVER_LOG_FORM".
      operationId: getServerLogEntries
      parameters:
        - name: limit
          in: query
          description: |
            Max result size. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: |
            The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: Set of comma separated strings of server log properties to return.
          schema:
            type: string
        - name: component
          in: query
          description: |
            The components names. Could be more than one parameter with the same name. Valid component names are: 'TM', 'AS2D', 'SSHD', 'SOCKS', 'ADMIN', 'AUDIT', 'FTPD', 'HTTPD', 'PESITD'.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - TM
                - AS2D
                - SSHD
                - SOCKS
                - ADMIN
                - AUDIT
                - FTPD
                - HTTPD
                - PESITD
        - name: level
          in: query
          description: |
            The log levels. Could be more than one parameter. Must be a valid log4j logging level name. Valid names are: 'ALL', 'DEBUG', 'ERROR', 'FATAL', 'INFO', 'OFF', 'TRACE', 'WARN'.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - ALL
                - DEBUG
                - ERROR
                - FATAL
                - INFO
                - TRACE
                - WARN
        - name: accountName
          in: query
          description: The account name to filter.
          schema:
            type: string
        - name: threadName
          in: query
          description: The thread name to filter by.
          schema:
            type: string
        - name: fromDate
          in: query
          description: |
            The from date in RFC2822 format to filter. The format is: EEE, d MMM yyyy HH:mm:ss Z. Example: 'Thu, 21 Apr 2016 16:13:50 GMT'.
          schema:
            type: string
        - name: endDate
          in: query
          description: |
            The end date in RFC2822 format to filter. The format is: EEE, d MMM yyyy HH:mm:ss Z. Example: 'Thu, 21 Apr 2016 16:13:50 GMT'.
          schema:
            type: string
        - name: sessionIdentifier
          in: query
          description: The session ID to filter by.
          schema:
            type: string
        - name: transferIdentifier
          in: query
          description: The transfer ID to filter by.
          schema:
            type: string
        - name: message
          in: query
          description: The log message or part of log message to filter by.
          schema:
            type: string
        - name: thread
          in: query
          description: The thread
          schema:
            type: string
        - name: filename
          in: query
          description: The filename
          schema:
            type: string
        - name: className
          in: query
          description: The class name
          schema:
            type: string
        - name: method
          in: query
          description: The method
          schema:
            type: string
        - name: exception
          in: query
          description: The exception
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'logs.yaml#/ServerLogEntryResult'
            text/csv: {}
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /logs/server/{id}:
    get:
      tags:
        - logs
      summary: Get a server log.
      description: |
        `Permissions`: "SERVER_LOG_FORM".
      operationId: getServerLogEntry
      parameters:
        - name: id
          in: path
          description:
           "The composite id of the log to retrieve (Base64 encoded).
            You can build composite id by specified pattern and then encode it in Base64 format or use urlrepresent property of id object.\n\n
            `Pattern:` Id \\\\[mConfigurationId=(\\w\\*), mEventId=(-?\\d\\*), mTimestamp=(\\d\\*)\\\\]\n\n
            `Composite Id Example:` Id \\[mConfigurationId=e282jd8a293231sr2sg21, mEventId=1, mTimestamp=52938532949\\]\n\n
            `ID Example:` SWQgW21Db25maWd1cmF0aW9uSWQ9ZTI4MmpkOGEyOTMyMzFzcjJzZzIxLCBtRXZlbnRJZD0xLCBtVGltZXN0YW1wPTUyOTM4NTMyOTQ5XQ=="
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: The log's fields to return.
          schema:
            type: string
          explode: false
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: 'logs.yaml#/ServerLogEntry'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /logs/transfers:
    get:
      tags:
        - logs
      summary: Get the collection of transfer logs.
      description: |
        `Permissions`: "TRANSFER_LOG_FORM".
      operationId: getTransfers
      parameters:
        - name: limit
          in: query
          description: The limit of the listed rows. The limit parameter can has only
            positive integer value.
          schema:
            minimum: 1
            type: integer
            format: int32
        - name: offset
          in: query
          description: The start row to list. The offset parameter can has only nonnegative
            integer value. If this parameter is not set, then it is considered 0.
          schema:
            minimum: 0
            type: integer
            format: int32
        - name: fields
          in: query
          description: Set of comma separated strings of transfer log properties to return.
          schema:
            type: string
        - name: returnLatestStatusOnly
          in: query
          description: |
            Defines whether to return all available entries. When true, only the latest entry of a sequence of related logs would be returned.
          schema:
            type: boolean
        - name: account
          in: query
          description: The name of the account that performed the transfer. Supports wildcard search.
          schema:
            type: string
        - name: loginName
          in: query
          description: The loginName of the account that performed the transfer. Supports wildcard search.
          schema:
            type: string
        - name: serverName
          in: query
          description: The name of the server processing the transfer
          schema:
            type: string
        - name: filename
          in: query
          description: The transferred file. Supports wildcard search.
          schema:
            type: string
        - name: localFilename
          in: query
          description: The local name of the transferred file. Supports wildcard search.
          schema:
            type: string
        - name: userClass
          in: query
          description: The user class. Default values are 'VirtClass' and 'RealClass'.
          schema:
            type: string
        - name: site
          in: query
          description: The name of the transfer site. Supports wildcard search.
          schema:
            type: string
        - name: site.id
          in: query
          description: The id of the transfer site.
          schema:
            type: string
        - name: transferProfile
          in: query
          description: Transfer profile of the site (PeSIT related).
          schema:
            type: string
        - name: status
          in: query
          description: A list of transfer statuses. It can be 'In Progress', 'Processed',
            'Failed', 'Aborted', 'Pending receipt', 'Failed Subtransmission', 'Paused',
            'Failed Transfer Resubmit' or 'Waiting'.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - In Progress
                - Processed
                - Failed
                - Aborted
                - Pending receipt
                - Failed Subtransmission
                - Paused
                - Failed Transfer Resubmit
                - Waiting
        - name: transferId
          in: query
          description: The id of the transfer status entry.
          schema:
            type: string
        - name: startTimeBefore
          in: query
          description: The time before which the transfer started as RFC2822 string
            - EEE, d MMM yyyy HH:mm:ss Z.
          schema:
            type: string
        - name: startTimeAfter
          in: query
          description: The time after which the transfer started as RFC2822 string -
            EEE, d MMM yyyy HH:mm:ss Z.
          schema:
            type: string
        - name: endTimeBefore
          in: query
          description: The time before which the transfer ended as RFC2822 string -
            EEE, d MMM yyyy HH:mm:ss Z.
          schema:
            type: string
        - name: endTimeAfter
          in: query
          description: The time after which the transfer ended as RFC2822 string - EEE,
            d MMM yyyy HH:mm:ss Z.
          schema:
            type: string
        - name: serverInitiated
          in: query
          description: Defines whether the transfer is server or client initiated
          schema:
            type: boolean
        - name: protocol
          in: query
          description: The protocol of the site. It can be 'as2', 'ftp', 'http', 'ssh',
            'pesit', 'folder', 'adhoc' as well as the protocols added with transfer
            site plugins.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: application
          in: query
          description: A list of application names.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: direction
          in: query
          description: A list of transfer directions. It can be 'Incoming' or 'Outgoing'.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: incoming
          in: query
          description: Defines whether the transfer direction is incoming or outgoing
          style: form
          explode: true
          schema:
            type: array
            items:
              type: boolean
        - name: secure
          in: query
          description: Defines whether the transfer is secure or non-secure.
          schema:
            type: boolean
        - name: resubmitted
          in: query
          description: Defines whether the transfer is resubmitted or not-resubmitted.
            It can be 'false' or 'true'.
          schema:
            type: string
        - name: operationIndex
          in: query
          description: A list of operation indexes. It can be '(none)' or some ID.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: coreId
          in: query
          description: The coreId of the transfer entry.
          schema:
            type: string
        - name: filesize
          in: query
          description: Transfered file size
          schema:
            type: integer
            format: int64
        - name: remoteDir
          in: query
          description: Remote directory.
          schema:
            type: string
        - name: remotePartner
          in: query
          description: Remote partner that gets/sends the file.
          schema:
            type: string
        - name: securityParameters
          in: query
          description: Negotiated during handshake session security parameters
          schema:
            type: string
        - name: actionBy
          in: query
          description: Defines who initiated the transfer. It can be 'User' or 'Server'
          schema:
            type: string
        - name: cycleId
          in: query
          description: The Cycle Id
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'logs.yaml#/TransferLogEntryResult'
            text/csv: {}
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /logs/transfers/{id}:
    get:
      tags:
        - logs
      summary: Get a transfer log.
      description: |
        `Permissions`: "TRANSFER_LOG_FORM".
      operationId: getTransfer
      parameters:
        - name: id
          in: path
          description: Base64-encoded composite parameter in the format 'Id [mTransferStatusId=var1,
            mTransferStartTime=var2]', where var1 is the transfer id and var2 is the
            transfer start time in unix format.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: The log transfers' fields to return.
          schema:
            type: string
          explode: false
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'logs.yaml#/TransferLogDetails'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
        503:
          $ref: 'responses.yaml#/ServiceUnavailable'
  /logs/transfers/{id}/operations:
    post:
      tags:
        - logs
      summary: Perform an operation for specific transfer.
      description: |
        You can cancel or resubmit a transfer, verify an MDN, or manually acknowledge a received PeSIT transfer. An acknowledgment, either positive (ack) or negative (nack), can be sent only for transfers that have not been previously acknowledged.

        `Permissions`: "TRANSFER_LOG_FORM".
      operationId: transferOperations
      parameters:
        - name: id
          in: path
          description: Base64-encoded composite parameter in the format 'Id [mTransferStatusId=var1,
            mTransferStartTime=var2]', where var1 is the transfer id and var2 is the
            transfer start time in unix format.
          required: true
          schema:
            type: string
        - name: operation
          in: query
          description: Which transfer operation to be performed.
          required: true
          schema:
            type: string
            enum:
              - cancel
              - resubmit
              - verify
              - ack
              - nack
      requestBody:
        description: "
          Optional message that could be sent `ONLY` during `ack/nack` operations. To add a custom value to the `User Message (PI99)`\
          \ via ack/nack, enter the value (string) between the double quotation marks, in the example below.\n\n\
          \ This field supports Expression Language.\n\n\
          \ If the message is empty, the template from `Pesit.Transfer.Acknowledge` configuration property will be used by default."
        content:
          application/json:
            schema:
              $ref: 'logs.yaml#/AckMessage'
            examples:
              ackMessage:
                $ref: 'postExamples.yaml#/AckMessageExample'
        required: false
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: 'logs.yaml#/ResubmissionStatus'
                  - $ref: 'logs.yaml#/ReceiptVerificationResult'
              examples:
                resubmissionStatus:
                  $ref: 'postExamples.yaml#/ResubmissionStatusExample'
                receiptVerificationResult:
                  $ref: 'postExamples.yaml#/ReceiptVerificationResultExample'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        422:
          $ref: 'responses.yaml#/UnprocessableEntity'
        500:
          $ref: 'responses.yaml#/InternalServerError'
        503:
          $ref: 'responses.yaml#/ServiceUnavailable'
  /mailTemplates:
    get:
      tags:
        - mailTemplates
      summary: Get mail template collection.
      description: |
        `Permissions`: "MAIL_TEMPLATE_REPOSITORY".
      operationId: getMailTemplates
      parameters:
        - name: limit
          in: query
          description: The limit of the listed rows. The limit parameter can has only
            nonnegative integer value. If the limit parameter is set to 0 or it is null
            then its value will be the value of the global server configuration parameter
            named `Webservices.EntriesPerPage` (which by default has value 100).
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: The start row to list. The offset parameter can has only nonnegative
            integer value. If this parameter is not set, then it is considered 0.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: |
            The fields of mailTemplate to return.
          schema:
            type: string
        - name: name
          in: query
          description: The unique name of the mail template.
          schema:
            type: string
        - name: description
          in: query
          description: The description of the mail template.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'mailTemplate.yaml#/MailTemplateResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
        503:
          $ref: 'responses.yaml#/ServiceUnavailable'
    post:
      tags:
        - mailTemplates
      summary: Create new mail template.
      description: |
        `Permissions`: "MAIL_TEMPLATE_REPOSITORY".
      operationId: createTemplate
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - name
              properties:
                file:
                  type: string
                  description: The mail template file to be uploaded.
                  format: binary
                name:
                  type: string
                  description: File name of the uploaded file is ignored and file is saved on the ST server with the name specified in this parameter. The file extention should be xhtml.
                description:
                  type: string
                  description: The description of the mail template.
        required: true
      responses:
        201:
          $ref: 'responses.yaml#/Created'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /mailTemplates/{name}:
    head:
      tags:
        - mailTemplates
      summary: Check if mail template exists.
      description: |
        `Permissions`: "MAIL_TEMPLATE_REPOSITORY".
      operationId: isMailTemplateExists
      parameters:
        - name: name
          in: path
          description: The name of the mail template.
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    get:
      tags:
        - mailTemplates
      summary: Get mail template.
      description: |
        `Permissions`: "MAIL_TEMPLATE_REPOSITORY".
      operationId: getMailTempalte
      parameters:
        - name: name
          in: path
          description: The name of the mail template.
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK - successful operation.
          content:
            application/xhtml+xml:
              schema:
                type: string
                format: binary
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - mailTemplates
      summary: Replace an existing mail template.
      description: |
         The file name of the uploaded file is ignored and file is saved with the name specified in the URL.

         `Permissions`: "MAIL_TEMPLATE_REPOSITORY".
      operationId: updateTemplate
      parameters:
        - name: name
          in: path
          description: The name of the mail template. File name of the uploaded file
            is ignored and file is saved  on the ST server with the name specified in
            this parameter. The file extention should be xhtml.
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  description: The mail template file to be updated.
                  format: binary
                description:
                  type: string
                  description: The description of the mail template.
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    delete:
      tags:
        - mailTemplates
      summary: Delete mail template.
      description: |
        `Permissions`: "MAIL_TEMPLATE_REPOSITORY".
      operationId: deleteMailTempalte
      parameters:
        - name: name
          in: path
          description: The name of the mail template.
          required: true
          schema:
            type: string
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        409:
          $ref: 'responses.yaml#/Conflict'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /myself:
    get:
      tags:
        - myself
      summary: Get administrator.
      operationId: getLoginUser
      parameters:
        - name: fields
          in: query
          description: |
            The administrator's fields to return.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'administrator.yaml#/Administrator'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    post:
      tags:
        - myself
      summary: Login user.
      description: |
        Use the resource to authenticate a user to SecureTransport. SecureTransport will return session cookies, reuse of which will allow subsequent APIs to be issued without having to re-authenticate.

        You can observe the usage of curl's --cookie-jar option for storing cookies and --cookie for reading them in the next curl command, i.e. reuse the authentication.

        For example:

        curl -k --cookie-jar cookie.jar -u "user:password" -X POST "https://\<IP\>:\<PORT\>/api/v2.0/myself" -H "accept: application/json" -H "Referer: Random_Text_Here"
      operationId: loginUser
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'administrator.yaml#/AuthenticationActionResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    delete:
      tags:
        - myself
      summary: Logout user.
      description: |
        Use the resource to logout an authenticated user from SecureTransport.

        You can observe the usage of curl's --cookie-jar option for storing cookies and --cookie for reading them in the next curl command, i.e. reuse the authentication.

        For example:

        curl -k -L --cookie cookie.jar -X DELETE "https://\<IP\>:\<PORT\>/api/v2.0/myself" -H "accept: application/json" -H "Referer: Random_Text_Here"
      operationId: logoutUser
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'administrator.yaml#/AuthenticationActionResult'
        302:
          description: Redirect to IdP in case the user was authenticated by an external
            server.
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - myself
      summary: Update user password.
      requestBody:
        description: Password property that need to be updated for current user.
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchPasswordRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /routeStepsCharsets:
    get:
      tags:
        - routeStepsCharsets
      summary: Get collection of the supported charsets.
      operationId: getAvailableCharsets
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'route.yaml#/RouteStepsCharsets'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /routeStepsMetadata:
    get:
      tags:
        - routeStepsMetadata
      summary: Get collection of the route steps metadata.
      operationId: getRouteStepsMetadata
      parameters:
        - name: fields
          in: query
          description: |
            The fields of route steps metadata to return.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'route.yaml#/RouteStepMetadata'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /routes:
    get:
      tags:
        - routes
      summary: Get collection of routes on the ST server.
      description: |
        When trying to filter by fields exclusive to a certain route's step type, the steps.type property must be specified.
      operationId: getRoutes
      parameters:
        - name: limit
          in: query
          description: The limit of the listed rows. The limit parameter can has only
            nonnegative integer value. If the limit parameter is set to 0 or it is null
            then its value will be the value of the global server configuration parameter
            named 'Webservices.EntriesPerPage' (which by default has value 100)
          schema:
            minimum: 1
            type: integer
            format: int32
        - name: offset
          in: query
          description: The start row to list. The offset parameter can has only nonnegative
            integer value. If this parameter is not set, then it is considered 0.
          schema:
            minimum: 0
            type: integer
            format: int32
        - name: fields
          in: query
          description: |
            The fields of route to return.

            **Note:** The type field for steps will always be present when listing properties of steps.
          schema:
            type: string
        - name: account
          in: query
          description: The account to filter for.
          schema:
            type: string
        - name: businessUnit
          in: query
          description: The bisuness unit name to filter by.
          schema:
            type: string
        - name: referredByRoute
          in: query
          description: Which route is referred by this route.
          schema:
            type: string
        - name: type
          in: query
          description: Route's type to sort by.
          schema:
            type: string
            enum:
              - COMPOSITE
              - TEMPLATE
              - SIMPLE
        - name: managedByCG
          in: query
          description: Search for routes managed by Central Governance.
          schema:
            type: boolean
        - name: condition
          in: query
          description: Route's condition to sort by.
          schema:
            type: string
        - name: conditionType
          in: query
          description: Route's conditionType to sort by.
          schema:
            type: string
            enum:
              - MATCH_ALL
              - MATCH_FIRST
              - ALWAYS
              - EL
        - name: description
          in: query
          description: Route's description to sort by.
          schema:
            type: string
        - name: failureEmailName
          in: query
          description: Route's failureEmailName to sort by.
          schema:
            type: string
        - name: failureEmailNotification
          in: query
          description: Route's failureEmailNotification to sort by.
          schema:
            type: boolean
        - name: failureEmailTemplate
          in: query
          description: Route's failureEmailTemplate to sort by.
          schema:
            type: string
        - name: name
          in: query
          description: Route Package Name. Wildcard character (*) can be used.
          schema:
            type: string
        - name: routeTemplate
          in: query
          description: Route's routeTemplate to sort by.
          schema:
            type: string
        - name: subscription
          in: query
          description: The route package template subscription id.
          schema:
            type: array
            items:
              type: string
        - name: additionalAttributes.key
          in: query
          description: Search by userVars key.
          schema:
            type: string
        - name: additionalAttributes.value
          in: query
          description: Search by userVars value.
          schema:
            type: string
        - name: successEmailName
          in: query
          description: Route's successEmailName to sort by.
          schema:
            type: string
        - name: successEmailNotification
          in: query
          description: Route's successEmailNotification to sort by.
          schema:
            type: boolean
        - name: successEmailTemplate
          in: query
          description: Route's successEmailTemplate to sort by.
          schema:
            type: string
        - name: triggeringEmailName
          in: query
          description: Route's triggeringEmailName to sort by.
          schema:
            type: string
        - name: triggeringEmailNotification
          in: query
          description: Route's triggeringEmailNotification to sort by.
          schema:
            type: boolean
        - name: triggeringEmailTemplate
          in: query
          description: Route's triggeringEmailTemplate to sort by.
          schema:
            type: string
        - name: stepStatuses.stepId
          in: query
          description: Applicable for routes and steps.
          schema:
            type: string
        - name: stepStatuses.status
          in: query
          description: Applicable for routes and steps.
          schema:
            type: string
            enum:
              - ENABLED
              - DISABLED
        - name: steps.id
          in: query
          description: Applicable for all steps. Route's step id to sort by.
          schema:
            type: string
        - name: steps.type
          in: query
          description: |
            Applicable for all steps. Route's step type to sort by.
          schema:
            type: string
        - name: steps.condition
          in: query
          description: Applicable for all steps except for ExecuteRoute. Steps' condition to sort by.
          schema:
            type: string
        - name: steps.conditionType
          in: query
          description: Applicable for all steps except for ExecuteRoute. Steps' conditionType to sort by.
          schema:
            type: string
            enum:
              - ALWAYS
              - EL
        - name: steps.actionOnStepSuccess
          in: query
          description: Applicable for all steps except for ExecuteRoute. Route's step actionOnStepSuccess to sort by.
          schema:
            type: string
            enum:
              - PROCEED
              - STOP
        - name: steps.status
          in: query
          description: Applicable for all steps. Route's step status to sort by.
          schema:
            type: string
        - name: steps.autostart
          in: query
          description: Applicable for all steps. Route's step autostart property.
          schema:
            type: boolean
        - name: steps.executeRoute
          in: query
          description: Applicable only for step with type ExecuteRoute. Route's step executeRoute to sort by.
          schema:
            type: string
        - name: steps.precedingStep
          in: query
          description: Applicable for all steps. Route's step precedingStep to sort by.
          schema:
            type: string
        - name: steps.actionOnStepFailure
          in: query
          description: Applicable for all steps except for ExecuteRoute. Route's step actionOnStepFailure to sort by.
          schema:
            type: string
        - name: steps.fileFilterExpression
          in: query
          description: Applicable for EncodingConversion, Compress, Decompress, LineEnding, LinePadding, LineTruncating, PgpDecryption, PgpEncryption, Rename, CharacterReplace, Publish, SendToPartner RouteSteps. Specify file name or file name expression.
          schema:
            type: string
        - name: steps.fileFilterExpressionType
          in: query
          description: Applicable for EncodingConversion, Compress, Decompress, LineFolding, LineEnding, LinePadding, LineTruncating, PgpDecryption, PgpEncryption, Rename, CharacterReplace, Publish, SendToPartner RouteSteps. Specify file filter expression type.
          schema:
            type: string
        - name: steps.inputCharset
          in: query
          description: Applicable for EncodingConversion, LineFolding, LineEnding, LinePadding, LineTruncating, CharacterReplace RouteSteps. Specify the source file encoding.
          schema:
            type: string
        - name: steps.outputCharset
          in: query
          description: Applicable for EncodingConversion, LineFolding, LinePadding, CharacterReplace, LineEnding, LineTruncating, EncodingConversion RouteSteps. Specify output file encoding.
          schema:
            type: string
        - name: steps.postTransformationActionRenameAsExpression
          in: query
          description: Applicable for EncodingConversion, Compress, Decompress, LineFolding, LineEnding, LinePadding, LineTruncating, PgpDecryption, PgpEncryption, CharacterReplace, RouteSteps. Specify post transformation action rename expression.
          schema:
            type: string
        - name: steps.usePrecedingStepFiles
          in: query
          description: Applicable for EncodingConversion, Compress, Decompress, LineFolding, LineEnding, LinePadding, LineTruncating, PgpDecryption, PgpEncryption, Rename, CharacterReplace, Publish, SendToPartner, RouteSteps. Specify whether to use preceding step files.
          schema:
            type: boolean
        - name: step.compressionType
          in: query
          description: Applicable for Compress RouteStep. Specify compression type.
          schema:
            type: string
        - name: steps.compressionLevel
          in: query
          description: Applicable for Compress,PgpEncryption RouteSteps. Specify compression level.
          schema:
            type: string
        - name: step.singleArchiveName
          in: query
          description: Applicable for Compress RouteStep. Specify archive name or expression.
          schema:
            type: string
        - name: steps.singleArchiveEnabled
          in: query
          description: Applicable for Compress RouteStep. Specify wheter single file archiving is enabled.
          schema:
            type: string
        - name: steps.fileFoldWidth
          in: query
          description: Applicable for LineFolding RouteStep. Specify maximum lane width in the file over which point it will be
            folded.
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 2147483647
        - name: steps.inputEolSequence
          in: query
          description: Applicable for LineEnding RouteStep. Specify input EOL sequence.
          schema:
            type: string
        - name: steps.outputEolSequence
          in: query
          description: Applicable for LineEnding RouteStep. Specify output EOL sequence.
          schema:
            type: string
        - name: steps.linePaddingCharacter
          in: query
          description: Applicable for LinePadding RouteStep. Specify line padding character as valid Unicode escape sequence.
          schema:
            type: string
        - name: steps.linePaddingLength
          in: query
          description: Applicable for LinePadding RouteStep. Specify line padding length.
          schema:
            type: string
        - name: steps.truncateLength
          in: query
          description: Applicable for LineTruncating RouteStep. Specify the lines maximum length in number
            of characters/symbols.
          schema:
            type: integer
            format: int32
        - name: steps.requireEncryption
          in: query
          description: Applicable for PgpDecryption RouteStep. Wheter encryption is required.
          schema:
            type: boolean
        - name: steps.requireTrustedSignature
          in: query
          description: Applicable for PgpDecryption RouteStep. Wheter trusted signature is required.
          schema:
            type: boolean
        - name: steps.compressionType
          in: query
          description: Applicable for PgpEncryption RouteStep. test
          schema:
            type: string
        - name: steps.encryptKeyExpression
          in: query
          description: Applicable for PgpEncryption RouteStep. Specify PGP encryption name amongst PGP Public Keys.
          schema:
            type: string
        - name: steps.encryptKeyExpressionType
          in: query
          description: Applicable for PgpEncryption RouteStep. Specify Account name or expression.
          schema:
            type: string
        - name: steps.encryptKeyOwnerExpression
          in: query
          description: Applicable for PgpEncryption RouteStep. Specify either an account name or use an EL expression
            to determine the recipient based on the environment information.
          schema:
            type: string
        - name: steps.encryptKeyOwnerExpressionType
          in: query
          description: Applicable for PgpEncryption RouteStep. Specify Account name or expression.
          schema:
            type: string
        - name: steps.signKeyExpression
          in: query
          description: Applicable for PgpEncryption RouteStep. Specify PGP encryption name amongst PGP Public Keys.
          schema:
            type: string
        - name: steps.signKeyExpressionType
          in: query
          description: Applicable for PgpEncryption RouteStep. Specify PGP Key alias or expression.
          schema:
            type: string
        - name: steps.signKeyOwnerExpression
          in: query
          description: Applicable for PgpEncryption RouteStep. Specify either an account name or use an EL expression
            to determine the recipient based on the environment information.
          schema:
            type: string
        - name: steps.signKeyOwnerExpressionType
          in: query
          description: Applicable for PgpEncryption RouteStep. Specify account name or expression.
          schema:
            type: string
        - name: steps.useAsciiArmour
          in: query
          description: Applicable for PgpEncryption RouteStep. Whether to specify ASCII Armor.
          schema:
            type: boolean
        - name: steps.outputFileName
          in: query
          description: Applicable for Rename RouteStep. Specify output file name or expression.
          schema:
            type: string
        - name: steps.findCharacterSequence
          in: query
          description: Applicable for CharacterReplace RouteStep. Specify Find character sequence.
          schema:
            type: string
        - name: steps.lineStrip
          in: query
          description: Applicable for CharacterReplace RouteStep. Specify Line strip enablement.
          schema:
            type: string
        - name: steps.replaceCharacterSequence
          in: query
          description: Applicable for CharacterReplace RouteStep. Specify replace character sequence.
          schema:
            type: string
        - name: steps.logOutput
          in: query
          description: Applicable for ExternalScript RouteStep. Whether the script will genarate standard output to Server log.
          schema:
            type: boolean
        - name: steps.rootExecution
          in: query
          description: Applicable for ExternalScript RouteStep. Specify root execution.
          schema:
            type: boolean
        - name: steps.scriptPath
          in: query
          description: Applicable for ExternalScript RouteStep. Specify string or expression with an absolute path to external script.
          schema:
            type: string
        - name: steps.disableAutoCreateTargetFolder
          in: query
          description: Applicable for Publish RouteStep. Specify whether to disable auto create target folder for step.
          schema:
            type: boolean
        - name: steps.filenameCollisionResolutionType
          in: query
          description: Applicable for Publish, Decompress RouteSteps. Specify file name collision resolution type.
          schema:
            type: string
        - name: steps.postRoutingActionRenameExpression
          in: query
          description: Applicable for Publish, SendToPartner RouteSteps. Specify post transformation action rename expression for step.
          schema:
            type: string
        - name: steps.postRoutingActionType
          in: query
          description: Applicable for Publish, SendToPartner RouteSteps. Specify post routing action types.
          schema:
            type: string
        - name: steps.publishFileAs
          in: query
          description: Applicable for Publish RouteStep. Specify new file name or expression for a new file name.
          schema:
            type: string
        - name: steps.targetAccountExpression
          in: query
          description: Applicable for Publish, SendToPartner, PullFromPartner RouteSteps. Specify targetAccountExpression property to sort by.
          schema:
            type: string
        - name: steps.targetFolderExpression
          in: query
          description: Applicable for Publish RouteStep. Specify folder in the account to publish the file to.
          schema:
            type: string
        - name: steps.targetFolderExpressionType
          in: query
          description: Applicable for Publish RouteStep. Specify target folder simple name or expression will be used.
          schema:
            type: string
        - name: steps.triggerSubscription
          in: query
          description: Applicable for Publish RouteStep. Specify triggerSubscription property to sort by.
          schema:
            type: boolean
        - name: steps.archivePolicyOnFailure
          in: query
          description: Applicable for SendToPartner RouteStep. Specify archivePolicyOnFailure property to sort by.
          schema:
            type: string
            enum:
              - DEFAULT
              - ENABLED
              - DISABLED
        - name: steps.archivePolicyOnSuccess
          in: query
          description: Applicable for SendToPartner RouteStep. Specify archivePolicyOnSuccess property to sort by.
          schema:
            type: string
            enum:
              - DEFAULT
              - ENABLED
              - DISABLED
        - name: steps.dataEncoding
          in: query
          description: Applicable for SendToPartner RouteStep. Specify dataEncoding property to sort by.
          schema:
            type: string
        - name: steps.fileLabel
          in: query
          description: Applicable for SendToPartner RouteStep. Specify fileLabel property to sort by.
          schema:
            type: string
        - name: steps.finalDestination
          in: query
          description: Applicable for SendToPartner, PullFromPartner RouteSteps. Specify finalDestination property to sort by.
          schema:
            type: string
        - name: steps.maxNumberOfRetries
          in: query
          description: Applicable for SendToPartner, PullFromPartner RouteSteps. Specify maxNumberOfRetries property to sort by.
          schema:
            type: integer
            format: int32
        - name: steps.maxParallelClients
          in: query
          description: Applicable for SendToPartner, PullFromPartner RouteSteps. Specify maxParallelClients property to sort by.
          schema:
            type: integer
            format: int32
        - name: steps.originator
          in: query
          description: Applicable for SendToPartner, PullFromPartner RouteSteps. Specify originator property to sort by.
          schema:
            type: string
        - name: steps.recordFormat
          in: query
          description: Applicable for SendToPartner, PullFromPartner RouteSteps. Specify recordFormat property to sort by.
          schema:
            type: string
        - name: steps.recordLength
          in: query
          description: Applicable for SendToPartner, PullFromPartner RouteSteps. Specify recordLength property to sort by.
          schema:
            type: string
        - name: steps.routeFileAs
          in: query
          description: Applicable for SendToPartner RouteStep. Specify routeFileAs property to sort by.
          schema:
            type: string
        - name: steps.sleepBetweenRetries
          in: query
          description: Applicable for SendToPartner, PullFromPartner RouteSteps. Specify sleepBetweenRetries property to sort by.
          schema:
            type: integer
            format: int32
        - name: steps.sleepIncrementBetweenRetries
          in: query
          description: Applicable for SendToPartner, PullFromPartner RouteSteps. Specify sleepIncrementBetweenRetries property to sort by.
          schema:
            type: integer
            format: int32
        - name: steps.storeAndForwardMode
          in: query
          description: Applicable for SendToPartner, PullFromPartner RouteSteps. Specify storeAndForwardMode property to sort by.
          schema:
            type: string
        - name: steps.targetAccountExpressionType
          in: query
          description: Applicable for Publish, SendToPartner, PullFromPartner RouteSteps. Specify targetAccountExpressionType property to sort by.
          schema:
            type: string
        - name: steps.transferProfileExpression
          in: query
          description: Applicable for SendToPartner, PullFromPartner RouteSteps. Specify transferProfileExpression property to sort by.
          schema:
            type: string
        - name: steps.transferProfileExpressionType
          in: query
          description: Applicable for SendToPartner, PullFromPartner RouteSteps. Specify transferProfileExpressionType property to sort by.
          schema:
            type: string
        - name: steps.transferSiteExpression
          in: query
          description: Applicable for SendToPartner, PullFromPartner RouteSteps. Specify transferSiteExpression property to sort by.
          schema:
            type: string
        - name: steps.transferSiteExpressionType
          in: query
          description: Applicable for SendToPartner, PullFromPartner RouteSteps. Specify transferSiteExpressionType property to sort by.
          schema:
            type: string
        - name: steps.triggerFileContent
          in: query
          description: Applicable for SendToPartner, PullFromPartner RouteSteps. Specify triggerFileContent property to sort by.
          schema:
            type: string
        - name: steps.triggerFileForEach
          in: query
          description: Applicable for SendToPartner RouteStep. Specify triggerFileForEach property to sort by.
          schema:
            type: boolean
        - name: steps.triggerFileName
          in: query
          description: Applicable for SendToPartner, PullFromPartner RouteSteps. Specify triggerFileName property to sort by.
          schema:
            type: string
        - name: steps.triggerTargetAccountExpression
          in: query
          description: Applicable for SendToPartner RouteStep. Specify triggerTargetAccountExpression property to sort by.
          schema:
            type: string
        - name: steps.triggerTargetAccountExpressionType
          in: query
          description: Applicable for SendToPartner RouteStep. Specify triggerTargetAccountExpressionType property to sort by.
          schema:
            type: string
        - name: steps.triggerTransferProfileExpression
          in: query
          description: Applicable for SendToPartner RouteStep. Specify triggerTransferProfileExpression property to sort by.
          schema:
            type: string
        - name: steps.triggerTransferProfileExpressionType
          in: query
          description: Applicable for SendToPartner RouteStep. Specify triggerTransferProfileExpressionType property to sort by.
          schema:
            type: string
        - name: steps.triggerTransferSiteExpression
          in: query
          description: Applicable for SendToPartner RouteStep. Specify triggerTransferSiteExpression property to sort by.
          schema:
            type: string
        - name: steps.triggerTransferSiteExpressionType
          in: query
          description: Applicable for SendToPartner RouteStep. Specify triggerTransferSiteExpressionType property to sort by.
          schema:
            type: string
        - name: steps.triggerUploadFolder
          in: query
          description: Applicable for SendToPartner RouteStep. Specify triggerUploadFolder property to sort by.
          schema:
            type: string
        - name: steps.uploadFolder
          in: query
          description: Applicable for SendToPartner RouteStep. Specify uploadFolder property to sort by.
          schema:
            type: string
        - name: steps.userMessage
          in: query
          description: Applicable for SendToPartner RouteStep. Specify userMessage property to sort by.
          schema:
            type: string
        - name: steps.virtualFilename
          in: query
          description: Applicable for SendToPartner RouteStep. Specify virtualFilename property to sort by.
          schema:
            type: string
        - name: steps.localFolderPathExpression
          in: query
          description: Applicable for PullFromPartner RouteStep. Specify localFolderPathExpression property to sort by.
          schema:
            type: string
        - name: steps.localFolderPathExpressionType
          in: query
          description: Applicable for PullFromPartner RouteStep. Specify localFolderPathExpressionType property to sort by.
          schema:
            type: string
            enum:
              - SIMPLE
              - EXPRESSION
        - name: steps.localFileNameExpression
          in: query
          description: Applicable for PullFromPartner RouteStep. Specify localFileNameExpression property to sort by.
          schema:
            type: string
        - name: steps.localFileNameExpressionType
          in: query
          description: Applicable for PullFromPartner RouteStep. Specify localFileNameExpressionType property to sort by.
          schema:
            type: string
            enum:
              - SIMPLE
              - EXPRESSION
        - name: steps.remoteFolderPathExpression
          in: query
          description: Applicable for PullFromPartner RouteStep. Specify remoteFolderPathExpression property to sort by.
          schema:
            type: string
        - name: steps.remoteFolderPathExpressionType
          in: query
          description: Applicable for PullFromPartner RouteStep. Specify remoteFolderPathExpressionType property to sort by.
          schema:
            type: string
            enum:
              - SIMPLE
              - EXPRESSION
        - name: steps.remoteFileNameExpression
          in: query
          description: Applicable for PullFromPartner RouteStep. Specify remoteFileNameExpression property to sort by.
          schema:
            type: string
        - name: steps.remoteFileNameExpressionType
          in: query
          description: Applicable for PullFromPartner RouteStep. Specify remoteFileNameExpressionType property to sort by.
          schema:
            type: string
            enum:
              - GLOB
              - REGEXP
              - TEXT_FILES
      responses:
        200:
          description: Returns list with all routes.
          content:
            application/json:
              schema:
                $ref: 'route.yaml#/RouteResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    post:
      tags:
        - routes
      summary: Create a route on the ST server.
      description: "It is possible to\
        \ create three types of Route: TEMPLATE, COMPOSITE, SIMPLE.\n\nThe types are\
        \ used as follows:\n\nTemplate route type: \n- it can have businessUnits property\
        \ which is a list of business unit names appropriate for the Administrator\
        \ who is creating this route\n- it may not have account property\n- it may\
        \ not have subscriptions property\n- it may not have routeTemplate property\n\
        \nComposite route type: \n- it is to have routeTemplate property pointing\
        \ to the id of an existing Template Route visible by the account this route\
        \ is created for \n- it can have account property which is the name of an\
        \ existing account\n- it can have subscriptions property which is a list of\
        \ subscription id-s which belongs to the account this route is created for\n\
        - it may not have businessUnits property\n\nSimple Route:\n- it may not have\
        \ businessUnits property\n- it may not have account property\n- it may not\
        \ have subscriptions property\n- it may not have routeTemplate property\n\n\
        The route to be created may not have steps property. Steps are managed by\
        \ the sub-resource steps.\n\nWhen creating a composite route type to  link\
        \ a TEMPLATE route to an account, the new composite route properties to set\
        \ are: name, type - COMPOSITE, routeTemplate - &lt;simple_route_id&gt;, failureEmailNotification,\
        \ failureEmailTemplate,  failureEmailName, successEmailNotification, successEmailTemplate,\
        \ successEmailName, conditionType, account - &lt;account or login name to\
        \ link to&gt;, subscriptions - [\"account_subscribtion_id1\", \"account_subscribtion_id2\"\
        , ...].\n"
      operationId: createRoute
      requestBody:
        description: Route object that needs to be added to the ST server.
        content:
          application/json:
            schema:
              $ref: 'route.yaml#/Route'
        required: true
      responses:
        201:
          $ref: 'responses.yaml#/Created'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /routes/{id}:
    head:
      tags:
        - routes
      summary: Check if route exists.
      operationId: routeExists
      parameters:
        - name: id
          in: path
          description: The id of the route.
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    get:
      tags:
        - routes
      summary: Get route.
      description: |
          `Implementation note`: When trying to filter by fields exclusive to a certain route's step type, the steps.type property must be specified.
      operationId: getRoute
      parameters:
        - name: id
          in: path
          description: The id of the Route.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: Route's fields to return.
          schema:
            type: string
          explode: false
        - name: type
          in: query
          description: Route's type to sort by.
          schema:
            type: string
            enum:
              - COMPOSITE
              - TEMPLATE
              - SIMPLE
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'route.yaml#/Route'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - routes
      summary: Partially update an existing route.
      description: |
        Refer to the schema to see how to use the PATCH method or for more information about every step and available properties.

        Applicable only for route of type COMPOSITE:
        * account, subscriptions and routeTemplate.

        Applicable only for route of type TEMPLATE:
        * businessUnits.

        Read only fields for all route types:
        * type, id.

        Applicable for all route types:
        * when patching failureEmailNotification to true you must also supply either failureEmailTemplate or failureEmailName otherwise the request will fail.
        * when patching triggeringEmailNotification to true you must also supply either triggeringEmailTemplate or triggeringEmailName otherwise the request will fail.
        * when patching successEmailNotification to true you must also supply either successEmailTemplate or successEmailName otherwise the request will fail.

        steps:
        * ExecuteRoute step is used with only routes of type TEMPLATE or COMPOSITE
        * All other steps are used with only routes of type SIMPLE
      operationId: patchRoute
      parameters:
        - name: id
          in: path
          description: The id of the route that needs to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: Route's properties that need to be updated for the specified route.
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - routes
      summary: Replace an existing route.
      operationId: updateRoute
      parameters:
        - name: id
          in: path
          description: The id of the route.
          required: true
          schema:
            type: string
      requestBody:
        description: Route model.
        content:
          application/json:
            schema:
              $ref: 'route.yaml#/Route'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    delete:
      tags:
        - routes
      summary: Delete route.
      operationId: deleteRoute
      parameters:
        - name: id
          in: path
          description: The id of the route.
          required: true
          schema:
            type: string
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /sessions:
    get:
      tags:
        - sessions
      summary: Get collection of the current sessions on the ST server.
      description: |
        `Permissions`: "STATISTICS_MONITOR_ACTION".
      operationId: getSessions
      parameters:
        - name: limit
          in: query
          description: The limit of the returned sessions. It should be positive integer and if not specified then return the first 100 sessions.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: |
            The fields of session to return.
          schema:
            type: string
        - name: type
          in: query
          description: |
            The session type to filter by. Session types are: 'FTP', 'HTTP' or 'SSH'. If not specified then return for all types.
          schema:
            type: string
        - name: localDaemonReturn
          in: query
          description: Determines whether to return local daemon sessions.
          schema:
            type: boolean
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'session.yaml#/Session'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /sessions/{id}:
    get:
      tags:
        - sessions
      summary: Get session.
      description: |
        `Permissions`: "STATISTICS_MONITOR_ACTION".
      operationId: getSession
      parameters:
        - name: id
          in: path
          description: |
            The session id. Format should be FTP:session_id, SSH:session_id or HTTP:session_id
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: The fields of session to return.
          schema:
            type: string
          explode: false
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'session.yaml#/Session'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    delete:
      tags:
        - sessions
      summary: Kill a session.
      description: |
        `Permissions`: "STATISTICS_MONITOR_ACTION".
      operationId: killSession
      parameters:
        - name: id
          in: path
          description: |
            The session id. Format should be FTP:session_id, HTTP:session_id or SSH:session_id
          required: true
          schema:
            type: string
        - name: localDaemonReturn
          in: query
          description: Try to kill as a local daemon session.
          schema:
            type: boolean
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /sessions/statistics/bandwidth:
    get:
      tags:
        - sessions
      summary: Get bandwidth usage statistic.
      description: |
        `Permissions`: "STATISTICS_MONITOR_ACTION".
      operationId: readBandwidthInfoByLogin
      parameters:
        - name: limit
          in: query
          description: The limit of the returned statistics records. It should be positive
            integer. If the limit is null, the maximum integer value is used.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: |
            The fields of bandwidth usage statistic to return.
          schema:
            type: string
      responses:
        200:
          description: Returns bandwidth usage statistic information in JSON format
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'session.yaml#/SessionBandwidthStatisticsByLoginName'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /sessions/statistics/userClass:
    get:
      tags:
        - sessions
      summary: Get sessions information by user class.
      description: |
        `Permissions`: "STATISTICS_MONITOR_ACTION".
      operationId: getSessionsInfo
      parameters:
        - name: fields
          in: query
          description: |
            The fields of sessions information by user class to return.
          schema:
            type: string
      responses:
        200:
          description: Returns sessions information in JSON format
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'session.yaml#/ServerUsageSnapshotByUserClass'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /sites:
    get:
      tags:
        - sites
      summary: Get sites collection.
      description:
        "
        `Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n\n
        `Implementation note:` Searching for site by properties you must specify additional property **type**. \n\n
         Otherwise search is available only for common properties of sites
         (*maxConcurrentConnection*, *isDefault*, *accessLevel*, *account*, *siteTemplate*, *name*, *protocol*).\n\n
         When trying to filter by fields exclusive to a certain site type, the type property must be specified."
      operationId: getSites
      parameters:
        - name: limit
          in: query
          description: The limit of the listed rows. The limit parameter can has only
            nonnegative integer value. If the limit parameter is set to 0 or it is null
            then its value will be the value of the global server configuration parameter
            named `Webservices.EntriesPerPage` (which by default has value 100).
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: The start row to list. The offset parameter can has only nonnegative
            integer value. If this parameter is not set, then it is considered 0.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: |
            The site's fields to return.

            **Note:** The type field will always be present.
          schema:
            type: string
        - name: type
          in: query
          description: |
            Discriminator to filter by.

            **Note:** Type custom can only be used to filter by fields exclusive to a custom site type.
          schema:
            type: string
            enum:
            - http
            - ftp
            - ssh
            - pesit
            - as2
            - folder
            - adhoc
            - cd
            - synchrony transfer
            - custom
        - name: name
          in: query
          description: The name of the site. Does not require type. Wildcard character (*) can be used.
          schema:
            type: string
        - name: protocol
          in: query
          description: The protocol of the site. Does not require type.
          schema:
            type: string
        - name: maxConcurrentConnection
          in: query
          description: Concurrent connection for a site. Does not require type.
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 65535
        - name: default
          in: query
          description: Whether site is default. Does not require type.
          schema:
            type: boolean
        - name: accessLevel
          in: query
          description: Access level. Does not require type.
          schema:
            type: string
            enum:
              - PRIVATE
              - BUSINESS_UNIT
              - PUBLIC
        - name: account
          in: query
          description: The account for which the site is created. Does not require type.
          schema:
            type: string
        - name: siteTemplate
          in: query
          description: The name of the site template. Does not require type.
          schema:
            type: string
        - name: alternativeAddresses.position
          in: query
          description: Alternative address position. Does not require type.
          schema:
            type: string
        - name: alternativeAddresses.host
          in: query
          description: Alternative address host. Does not require type.
          schema:
            type: string
        - name: alternativeAddresses.port
          in: query
          description: Alternative address port. Does not require type.
          schema:
            type: string
        - name: isSecure
          in: query
          description: Applicable for http, ftp, PeSIT sites. Specify if secure connection is used or not.
          schema:
            type: boolean
        - name: useUri
          in: query
          description: Applicable for http site. Specify whether to define partner URL or not.
          schema:
            type: boolean
        - name: uri
          in: query
          description: Applicable for http site. Specify the partner URL.
          schema:
            type: string
        - name: host
          in: query
          description: Applicable for http, ftp, PeSIT, synchrony, ssh sites. Specify the remote site server host.
          schema:
            type: string
        - name: port
          in: query
          description: Applicable for http, synchrony, PeSIT, ssh, ftp sites. Specify the remote site server port.
          schema:
            type: string
        - name: pesitId
          in: query
          description: Applicable for PeSIT site. Specify the PeSIT ID.
          schema:
            type: string
        - name: downloadFolder
          in: query
          description: Applicable for http, ftp, ssh, folder monitor sites. Specify the download folder.
          schema:
            type: string
        - name: downloadPattern
          in: query
          description: Applicable for http, ftp, ssh, folder monitor sites. Specify the download pattern.
          schema:
            type: string
        - name: uploadFolder
          in: query
          description: Applicable for http, ftp, ssh, folder monitor sites. Specify the upload folder.
          schema:
            type: string
        - name: uploadFolderOverridable
          in: query
          description: Applicable for http, ftp, ssh, folder monitor sites. Defines if the upload folder can be modified by the Send
            To Partner routing step.
          schema:
            type: boolean
        - name: userName
          in: query
          description: Applicable for http, cd, ftp, ssh sites. Specify the site login username.
          schema:
            type: string
        - name: usePassword
          in: query
          description: Applicable for http, cd, ftp, ssh sites. Specify if the login password should be set.
          schema:
            type: boolean
        - name: usePasswordExpr
          in: query
          description: Applicable for http, cd, ssh, synchrony, ftp sites. Specify whether to have password expressions or not.
          schema:
            type: boolean
        - name: transferMode
          in: query
          description: Applicable for http, cd, ftp, ssh sites. Specify the transfer mode.
          schema:
            type: string
            enum:
              - BINARY
              - ASCII
        - name: fipsMode
          in: query
          description: Applicable for http, as2, PeSIT, ftp, ssh sites. Specify if the FIPS Transfer Mode.
          schema:
            type: boolean
        - name: dmz
          in: query
          description: Applicable for http, as2, PeSIT, ssh, ftp sites. Specify the remote site network zone.
          schema:
            type: string
        - name: downloadFolderAdvancedExpressionEnabled
          in: query
          description: Applicable for http, ftp, ssh, folder monitor sites. Whether the download folder is evaluated using expression language.
          schema:
            type: boolean
        - name: downloadPatternAdvancedExpressionEnabled
          in: query
          description: Applicable for http, ftp, ssh, folder monitor sites. Whether the download pattern is evaluated using expression language.
          schema:
            type: boolean
        - name: requestMode
          in: query
          description: Applicable for http site. Request mode of the site.
          schema:
            type: string
            enum:
              - POST
        - name: cipherSuites
          in: query
          description: Applicable for http, as2, ftp, ssh, PeSIT sites. Cipher suites for a site.
          schema:
            type: string
        - name: protocols
          in: query
          description: Applicable for http, as2, ftp, ssh, PeSIT sites. Protocols for a site.
          schema:
            type: string
        - name: postTransmissionActions.deleteOnTempFailOut
          in: query
          description: Applicable for http, ftp, ssh, folder monitor sites. Whether to delete the destination file on temporary
            failure after the transmission.
          schema:
            type: string
            enum:
              - true
        - name: postTransmissionActions.deleteOnSuccessIn
          in: query
          description: Applicable for http, ftp, ssh, folder monitor sites. Whether to delete the source file on success after
            the transmission.
          schema:
            type: string
            enum:
              - true
        - name: postTransmissionActions.deleteOnPermFailOut
          in: query
          description: Applicable for http, ftp, ssh, folder monitor sites. Whether to delete the destination file on failure
            after the transmission.
          schema:
            type: string
            enum:
              - true
        - name: postTransmissionActions.deleteOnPermFailIn
          in: query
          description: Applicable for http, ftp, ssh, folder monitor sites. Whether to delete the source file on failure after
            the transmission.
          schema:
            type: string
            enum:
              - true
        - name: postTransmissionActions.doAsOut
          in: query
          description: Applicable for http, ftp, ssh, folder monitor sites. Specify a value to send the file with a different name.
          schema:
            type: string
        - name: postTransmissionActions.doAsIn
          in: query
          description: Applicable for http, ftp, ssh, folder monitor sites. Specify a value to receive the file with a different name.
          schema:
            type: string
        - name: fromEmailAddress
          in: query
          description: Applicable for adhoc site. Specify the From email address.
          schema:
            type: string
        - name: toEmailAddresses
          in: query
          description: Applicable for adhoc site. Specify the TO email addresses.
          schema:
            type: string
        - name: ccEmailAddresses
          in: query
          description: Applicable for adhoc site. Specify the CC email addresses.
          schema:
            type: string
        - name: bccEmailAddresses
          in: query
          description: Applicable for adhoc site. Specify the BCC email addresses.
          schema:
            type: string
        - name: subject
          in: query
          description: Applicable for adhoc site. Specify the subject for adhoc site.
          schema:
            type: string
        - name: body
          in: query
          description: Applicable for adhoc site. Specify the message to be sent.
          schema:
            type: string
        - name: securityLevel
          in: query
          description: Applicable for adhoc site. Specify the delivery method of the site.
          schema:
            type: string
            enum:
              - ANONYMOUS_LINK
              - CHALLENGED_LINK
              - EXISTING_ACCOUNT
              - ENROLL_UNLICENSED
              - ENROLL_LICENSED
        - name: notificationTemplate
          in: query
          description: Applicable for adhoc site. Specify the notification mail template of the site.
          schema:
            type: string
        - name: challenge
          in: query
          description: Applicable for adhoc site. Specify secret question.
          schema:
            type: string
        - name: expiration
          in: query
          description: Applicable for adhoc site. Specify the site expiration interval in minutes.
          schema:
            type: integer
            format: int32
        - name: sendAs
          in: query
          description: Applicable for adhoc site. Specify a value to send the file with a different name.
          schema:
            type: string
        - name: sendFileAsAttachment
          in: query
          description: Applicable for adhoc site.  Specify whether to send file as an email attachment.
          schema:
            type: boolean
        - name: senderAs2Id
          in: query
          description: Applicable for as2 site. Specify the server site AS2 name.
          schema:
            type: string
        - name: senderEmail
          in: query
          description: Applicable for as2 site. Specify the server site email.
          schema:
            type: string
        - name: receiverAs2Id
          in: query
          description: Applicable for as2 site. Specify the remote site AS2 name.
          schema:
            type: string
        - name: receiverEmail
          in: query
          description: Applicable for as2 site. Specify the remote site email.
          schema:
            type: string
        - name: as2Url
          in: query
          description: Applicable for as2 site. Specify the remote site URL.
          schema:
            type: string
        - name: transferSettings.doAsOut
          in: query
          description: Applicable for as2 site. Specify a value to send the file with a different name.
          schema:
            type: string
        - name: transferSettings.doAsIn
          in: query
          description: Applicable for as2 site. Specify a value to receive the file with a different name.
          schema:
            type: string
        - name: transferSettings.mimeType
          in: query
          description: Applicable for as2 site. Specify the message MIME Type.
          schema:
            type: string
        - name: transferSettings.subject
          in: query
          description: Applicable for as2 site. Specify the email subject.
          schema:
            type: string
        - name: transferSettings.requireSign
          in: query
          description: Applicable for as2 site. Specify if Signature is required.
          schema:
            type: boolean
        - name: transferSettings.requireEncrypt
          in: query
          description: Applicable for as2 site. Specify if Encryption is required.
          schema:
            type: boolean
        - name: transferSettings.requireSsl
          in: query
          description: Applicable for as2 site. Specify if SSL Connection is required.
          schema:
            type: boolean
        - name: transferSettings.enableChunked
          in: query
          description: Applicable for as2 site. Specify if file chunking is enabled.
          schema:
            type: boolean
        - name: transferSettings.as2MdnReturnUrl
          in: query
          description: Applicable for as2 site. Specify if the receipt request should be asynchronous or
            synchronous.
          schema:
            type: string
        - name: transferSettings.as2MdnUrl
          in: query
          description: Applicable for as2 site. Specify if site should request receipt for all transfers.
          schema:
            type: boolean
            enum:
              - true
        - name: transferSettings.encrypt
          in: query
          description: Applicable for as2 site. Specify encryption.
          schema:
            type: string
        - name: transferSettings.sign
          in: query
          description: Applicable for as2 site. Specify signing.
          schema:
            type: string
        - name: transferSettings.compress
          in: query
          description: Applicable for as2 site. Specify if the message should be compressed.
          schema:
            type: boolean
        - name: transferSettings.as2MdnOptions
          in: query
          description: Applicable for as2 site. Specify mdn options.
          schema:
            type: string
        - name: transferSettings.transferTimeout
          in: query
          description: Applicable for as2 site. Specify the transfer timeout in seconds.
          schema:
            type: integer
            format: int32
        - name: useCertificate
          in: query
          description: Applicable for cd site. Specify if the login certificate should be set.
          schema:
            type: boolean
        - name: localServerName
          in: query
          description: Applicable for cd site. Specify the local server name.
          schema:
            type: string
        - name: localServerPort
          in: query
          description: Applicable for cd site. Specify the local server port.
          schema:
            type: string
        - name: submitScriptWithinFile
          in: query
          description: Applicable for cd site. Specify if the script contains unicode characters and has to be submitted within a file.
          schema:
            type: boolean
        - name: recScript
          in: query
          description: Applicable for cd site. Specify the receive script.
          schema:
            type: string
        - name: sendScript
          in: query
          description: Applicable for cd site. Specify the send script.
          schema:
            type: string
        - name: ccc
          in: query
          description: Applicable for ftp site. Clear command channel.
          schema:
            type: boolean
        - name: tlsShutdownCcc
          in: query
          description: Applicable for ftp site. TLC Shutdown on CCC.
          schema:
            type: boolean
        - name: uploadCommand
          in: query
          description: Applicable for ftp site. Specify the FTP upload command that will be used when server
            initiated transfer is executed.
          schema:
            type: string
            enum:
              - STOR
              - APPE
        - name: preferredMethod
          in: query
          description: Applicable for ftp site. Specify the preferred FTP command when entering FTP passive mode.
          schema:
            type: string
            enum:
              - default
              - PASV
              - EPSV
        - name: siteCommand
          in: query
          description: Applicable for ftp site. Specify the SITE commands.
          schema:
            type: string
        - name: activeMode
          in: query
          description: Applicable for ftp site. Define whether the Active Connection Mode is enabled.
          schema:
            type: boolean
        - name: matchAnyLineTerminators
          in: query
          description: Applicable for ftp site. Tanscode any line terminators in ASCII mode.
          schema:
            type: boolean
            enum:
              - true
        - name: hostnameVerification
          in: query
          description: Applicable for ftp site. Verify if the remote host taking part of a data connection is the same as the host to which the control connection is attached.
          schema:
              type: string
              enum:
                - DEFAULT
                - ENABLED
                - DISABLED
        - name: postTransmissionActions.moveOnTempFailOut
          in: query
          description: Applicable for ftp, ssh, folder monitor sites. Specify a value to rename the file after transmission or
            move it to a different folder on temporary failure.
          schema:
            type: string
        - name: postTransmissionActions.moveOnPermFailOut
          in: query
          description: Applicable for ftp, ssh, folder monitor sites. Specify a value to rename the file after transmission or
            move it to a different folder on failure.
          schema:
            type: string
        - name: postTransmissionActions.moveOnSuccessOut
          in: query
          description: Applicable for ftp, ssh, folder monitor sites. Specify a value to rename the file after transmission or
            move it to a different folder on success.
          schema:
            type: string
        - name: postTransmissionActions.moveOnPermFailIn
          in: query
          description: Applicable for ftp, ssh, folder monitor sites. Specify a value to rename the file after transmission or
            move it to a different folder on failure.
          schema:
            type: string
        - name: postTransmissionActions.moveOnSuccessIn
          in: query
          description: Applicable for ftp, ssh, folder monitor sites. Specify a value to rename the file after transmission or
            move it to a different folder on success.
          schema:
            type: string
        - name: fingerPrint
          in: query
          description: Applicable for ssh site. Specify the fingerprint.
          schema:
            type: string
        - name: verifyFinger
          in: query
          description: Applicable for ssh site. Defines whther to verify fingerprint for this site or not.
          schema:
            type: boolean
        - name: socketTimeout
          in: query
          description: Applicable for ssh site. Specify the maximum number of seconds the server waits to
            read a block of data from the partner server, or write a block of data
            to the partner server.
          schema:
            type: integer
            format: int32
        - name: socketBufferSize
          in: query
          description: Applicable for ssh site. Specify the size of the receive buffer in bytes used from
            the socket opened during the transfer.
          schema:
            type: integer
            format: int32
        - name: socketSendBufferSize
          in: query
          description: Applicable for ssh site. Specify the size of the send buffer in bytes used from the
            socket opened during the transfer.
          schema:
            type: integer
            format: int32
        - name: downloadPatternType
          in: query
          description: Applicable for ssh, folder monitor sites. Specify download pattern type.
          schema:
            type: string
        - name: uploadPermissions
          in: query
          description: Applicable for ssh site. Specify the upload permissions.
          schema:
            type: string
        - name: bufferSize
          in: query
          description: Applicable for ssh, PeSIT sites. Specify the size of the buffer in bytes used for reading
            from the local file system when performing the transfer.
          schema:
            type: integer
            format: int32
        - name: blockSize
          in: query
          description: Applicable for ssh site. Specify the SFTP block size value used for the transfer.
          schema:
            type: integer
            format: int32
        - name: tcpNoDelay
          in: query
          description: Applicable for ssh site. Specify tcpNoDelay for the site.
          schema:
            type: boolean
        - name: allowedMacs
          in: query
          description: Applicable for ssh site. Specify allowedMacs for the site.
          schema:
            type: string
        - name: keyExchangeAlgorithms
          in: query
          description: Applicable for ssh site. Specify key exchange algorithms for ssh site.
          schema:
            type: string
        - name: publicKeys
          in: query
          description: Applicable for ssh site. Specify public keys for ssh site.
          schema:
            type: string
        - name: postTransmissionActions.doMoveOverwriteIn
          in: query
          description: Applicable for ssh site. Specify doMoveOverwriteIn property.
          schema:
            type: boolean
        - name: postTransmissionActions.doMoveOverwriteOut
          in: query
          description: Applicable for ssh site. Specify doMoveOverwriteOut property.
          schema:
            type: boolean
        - name: preconnectionPartnerId
          in: query
          description: Applicable for PeSIT site. Specify the partner id used for Pre-Connection.
          schema:
            type: string
        - name: usePreconnectionPartnerPassword
          in: query
          description: Applicable for PeSIT site. Specify whether to use Pre-Connection partner password or not.
          schema:
            type: boolean
        - name: usePreconnectionPartnerPasswordExpr
          in: query
          description: Applicable for PeSIT site. Specify whether to have Pre-Connection partner password expressions or not.
          schema:
            type: boolean
        - name: preconnectionServerId
          in: query
          description: Applicable for PeSIT site. Specify the server id used for Pre-Connection.
          schema:
            type: string
        - name: usePreconnectionServerPassword
          in: query
          description: Applicable for PeSIT site. Specify whether to use Pre-Connection server password or not.
          schema:
            type: boolean
        - name: usePreconnectionServerPasswordExpr
          in: query
          description: Applicable for PeSIT site. Specify whether to have Pre-Connection server password expressions or not.
          schema:
            type: boolean
        - name: configurePreconnection
          in: query
          description: Applicable for PeSIT site. Specify if Pre-Connection should be set.
          schema:
            type: boolean
        - name: useServerPassword
          in: query
          description: Applicable for PeSIT site. Specify if the server password should be set.
          schema:
            type: boolean
        - name: useServerPasswordExpr
          in: query
          description: Applicable for PeSIT site. Specify whether to have server password expressions or not.
          schema:
            type: boolean
        - name: usePartnerPassword
          in: query
          description: Applicable for PeSIT site. Specify if the partner password should be set.
          schema:
            type: boolean
        - name: usePartnerPasswordExpr
          in: query
          description: Applicable for PeSIT site. Specify whether to have partner password expressions or not.
          schema:
            type: boolean
        - name: checkpointInterval
          in: query
          description: Applicable for PeSIT site. Specify the checkpoint interval.
          schema:
            type: integer
            format: int32
        - name: checkpointWindow
          in: query
          description: Applicable for PeSIT site. Specify the checkpoint window.
          schema:
            type: integer
            format: int32
        - name: resyncAllowed
          in: query
          description: Applicable for PeSIT site. Specify if the resync is allowed.
          schema:
            type: boolean
        - name: compression
          in: query
          description: Applicable for PeSIT site. Specify the transfer compression.
          schema:
            type: string
            enum:
              - none
              - vertical
              - horizontal
              - both
        - name: verifyCert
          in: query
          description: Applicable for PeSIT, http, ftp sites.  Whether certificate is verified for this site.
          schema:
            type: boolean
        - name: cftCompatibleSslMode
          in: query
          description: Applicable for PeSIT site. Enable Legasy transfer CFT compatible SSL mode.
          schema:
            type: boolean
        - name: receiveMessage
          in: query
          description: Applicable for PeSIT site. Specify a user receive message.
          schema:
            type: string
        - name: sendMessage
          in: query
          description: Applicable for PeSIT site. Specify a user send message.
          schema:
            type: string
        - name: originator
          in: query
          description: Applicable for PeSIT site. Use this field to override the original sender (PI61) of the transfer.
          schema:
            type: string
        - name: finalDestination
          in: query
          description: Applicable for PeSIT site. Use this field to override the final destination (PI62) of the transfer.
          schema:
            type: string
        - name: storeAndForwardMode
          in: query
          description: Applicable for PeSIT site. All the advanced PeSIT settings are included or all are ommitted.
          schema:
            type: string
            enum:
              - START_NEW
              - PRESERVE
        - name: ptcpConnections
          in: query
          description: Applicable for PeSIT site. Specify the number of parallel TCP connections.
          schema:
            type: integer
            format: int32
        - name: ptcpPacketSize
          in: query
          description: Applicable for PeSIT site. Specify the TCP packet size
          schema:
            type: integer
            format: int32
        - name: socketSendReceiveBuffersize
          in: query
          description: Applicable for PeSIT site. Specifies the TCP Socket maximum send and receive buffer size
            in bytes.
          schema:
            type: integer
            format: int32
        - name: ptcpConnectRetryCount
          in: query
          description: Applicable for PeSIT site. Specifies the maximum times the SecureTransport will attempt
            to re-establish a connection with the remote server.
          schema:
            type: integer
            format: int32
        - name: connectionTimeout
          in: query
          description: Applicable for PeSIT site. Overwrites the value specified in Pesit.Client.Inactivity.Timeout 
            configuration option. It is used to determine how much time (in seconds) ST will wait for acknowledgment 
            command for transfer end, when pushing file to a server, when ST acts as a PeSIT client.
          schema:
            type: integer
            format: int32
        - name: uploadFolderExpressionSupport
          in: query
          description: Applicable for folder monitor site. Whether the upload folder is evaluated using expression
            language.
          schema:
            type: boolean
        - name: uploadFolderAutocreate
          in: query
          description: Applicable for folder monitor site. Whether the Upload Folder will be automatically created
            if it doesn't exist.
          schema:
            type: boolean
        - name: downloadPatternCaseSensitive
          in: query
          description: Applicable for folder monitor site. Whether the subfolder download pattern is case sensitive.
          schema:
            type: boolean
        - name: downloadSubfolderPattern
          in: query
          description: Applicable for folder monitor site. Specify the pattern used to match folder names to determine
            whether to apply the download pattern to the folder.
          schema:
            type: string
        - name: downloadSubfolderPatternType
          in: query
          description: Applicable for folder monitor site. Specify the dowlnload pattern type. Pattern matching expression
            supports 'glob' and 'regex' syntaxes.
          schema:
            type: string
        - name: downloadSubfolderPatternCaseSensitive
          in: query
          description: Applicable for folder monitor site. Whether the subfolder download pattern is case sensitive.
          schema:
            type: boolean
        - name: downloadSubfolderMaxDepth
          in: query
          description: Applicable for folder monitor site. Specify the maximum depth of the subfolders to monitor.
          schema:
            type: integer
            format: int32
        - name: username
          in: query
          description: Applicable for synchrony site. Specify the site login username.
          schema:
            type: string
        - name: partner
          in: query
          description: Applicable for synchrony site. Specify partner property for synchrony site.
          schema:
            type: string
        - name: transferProfile
          in: query
          description: Applicable for synchrony site. Specify transfer profile for synchrony site.
          schema:
            type: string
        - name: additionalProperties.appcycid
          in: query
          description: Applicable for synchrony site.
          schema:
            type: string
        - name: additionalProperties.fName
          in: query
          description: Applicable for synchrony site.
          schema:
            type: string
        - name: additionalProperties.appobjid
          in: query
          description: Applicable for synchrony site.
          schema:
            type: string
        - name: additionalProperties.direction
          in: query
          description: Applicable for synchrony site.
          schema:
            type: string
        - name: additionalProperties.freeMsg
          in: query
          description: Applicable for synchrony site.
          schema:
            type: string
        - name: additionalProperties.ida
          in: query
          description: Applicable for synchrony site.
          schema:
            type: string
        - name: additionalProperties.ipart
          in: query
          description: Applicable for synchrony site.
          schema:
            type: string
        - name: additionalProperties.maxDate
          in: query
          description: Applicable for synchrony site.
          schema:
            type: string
        - name: additionalProperties.maxTime
          in: query
          description: Applicable for synchrony site.
          schema:
            type: string
        - name: additionalProperties.minDate
          in: query
          description: Applicable for synchrony site.
          schema:
            type: string
        - name: additionalProperties.minTime
          in: query
          description: Applicable for synchrony site.
          schema:
            type: string
        - name: additionalProperties.nfName
          in: query
          description: Applicable for synchrony site.
          schema:
            type: string
        - name: additionalProperties.nIdf
          in: query
          description: Applicable for synchrony site.
          schema:
            type: string
        - name: additionalProperties.pri
          in: query
          description: Applicable for synchrony site.
          schema:
            type: string
        - name: additionalProperties.rappl
          in: query
          description: Applicable for synchrony site.
          schema:
            type: string
        - name: additionalProperties.rUser
          in: query
          description: Applicable for synchrony site.
          schema:
            type: string
        - name: additionalProperties.sappl
          in: query
          description: Applicable for synchrony site.
          schema:
            type: string
        - name: additionalProperties.state
          in: query
          description: Applicable for synchrony site.
          schema:
            type: string
        - name: additionalProperties.sUser
          in: query
          description: Applicable for synchrony site.
          schema:
            type: string
        - name: additionalProperties.trk
          in: query
          description: Applicable for synchrony site.
          schema:
            type: string
        - name: additionalAttributes.key
          in: query
          description: Search by userVars key.
          schema:
            type: string
        - name: additionalAttributes.value
          in: query
          description: Search by userVars value.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'site.yaml#/SiteResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    post:
      tags:
        - sites
      summary: Create a site.
      description: |
        `Permissions`: "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM", "TEMPLATES_FORM".

        **Note:** All fields of type string for the internal transfer sites (besides AS2 and System to Human) support Expression Language (EL), except those regarding certificates and enum ones.
        Refer to the schema for each transfer site. Valid expressions are:
        * custom properties passed in a REST API Pull/Push request via the '/transfers/operations' resource - "${DXAGENT_TRANSFERSAPI_*}"
        * SecureTransport specific named variable sets - "${stenv.variable}" and "${env['variable']}"
        * predefined functions using EL - "{concat("var1", "var2")}}"

        **Note**: To create a transfer site and use the placeholder default values of the selected site template, add a trailing hyphen to the placeholder name: "testPlaceholder-": ""
                      Use of default placeholder values is applicable with the following transfer sites only: Connect:Direct, Synchrony, File Services interface protocol.
      operationId: createSite
      requestBody:
        description: Site that needs to be created.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: 'site.yaml#/HTTPSite'
                - $ref: 'site.yaml#/AdhocSite'
                - $ref: 'site.yaml#/AS2Site'
                - $ref: 'site.yaml#/ConnectDirectSite'
                - $ref: 'site.yaml#/FTPSite'
                - $ref: 'site.yaml#/SSHSite'
                - $ref: 'site.yaml#/PeSITSite'
                - $ref: 'site.yaml#/FolderMonitorSite'
                - $ref: 'site.yaml#/SynchronySite'
                - $ref: 'site.yaml#/CustomSite'
              discriminator:
                propertyName: type
                mapping:
                  http: 'site.yaml#/HTTPSite'
                  ftp: 'site.yaml#/FTPSite'
                  ssh: 'site.yaml#/SSHSite'
                  pesit: 'site.yaml#/PeSITSite'
                  AS2: 'site.yaml#/AS2Site'
                  folder: 'site.yaml#/FolderMonitorSite'
                  adhoc: 'site.yaml#/AdhocSite'
                  cd: 'site.yaml#/ConnectDirectSite'
                  synchrony transfer: 'site.yaml#/SynchronySite'
                  custom: 'site.yaml#/CustomSite'
            examples:
              HTTP:
                $ref: 'postExamples.yaml#/HTTPSiteExample'
              FTP:
                $ref: 'postExamples.yaml#/FTPSiteExample'
              SSH:
                $ref: 'postExamples.yaml#/SSHSiteExample'
              PeSIT:
                $ref: 'postExamples.yaml#/PeSITSiteExample'
              AS2:
                $ref: 'postExamples.yaml#/AS2SiteExample'
              FolderMonitor:
                $ref: 'postExamples.yaml#/FolderMonitorSiteExample'
              Adhoc:
                $ref: 'postExamples.yaml#/AdhocSiteExample'
              ConnectDirect:
                $ref: 'postExamples.yaml#/ConnectDirectSiteExample'
              Synchrony:
                $ref: 'postExamples.yaml#/SynchronySiteExample'
              Custom:
                $ref: 'postExamples.yaml#/CustomSiteExample'
        required: true
      responses:
        201:
          $ref: 'responses.yaml#/Created'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /sites/{id}:
    head:
      tags:
        - sites
      summary: Check if site exists.
      description: |
        `Permissions`: "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM", "TEMPLATES_FORM".
      operationId: siteExists
      parameters:
        - name: id
          in: path
          description: The id of the site.
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    get:
      tags:
        - sites
      summary: Get a site.
      description: |
        `Permissions`: "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM", "TEMPLATES_FORM".

        `Implementation note`: When trying to filter by fields exclusive to a certain site type, the type property must be specified.
      operationId: getSite
      parameters:
        - name: id
          in: path
          description: The id of the site.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: |
           The site's fields to return.

           **Note:** The type field will always be present.
          schema:
            type: string
          explode: false
        - name: type
          in: query
          description: |
            Discriminator to filter by.

            **Note:** Type custom can only be used to filter by fields exclusive to a custom site type.
          schema:
            type: string
            enum:
              - http
              - ftp
              - ssh
              - pesit
              - as2
              - folder
              - adhoc
              - cd
              - synchrony transfer
              - custom
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: 'site.yaml#/HTTPSite'
                  - $ref: 'site.yaml#/AdhocSite'
                  - $ref: 'site.yaml#/AS2Site'
                  - $ref: 'site.yaml#/ConnectDirectSite'
                  - $ref: 'site.yaml#/FTPSite'
                  - $ref: 'site.yaml#/SSHSite'
                  - $ref: 'site.yaml#/PeSITSite'
                  - $ref: 'site.yaml#/FolderMonitorSite'
                  - $ref: 'site.yaml#/SynchronySite'
                  - $ref: 'site.yaml#/CustomSite'
                discriminator:
                  propertyName: type
                  mapping:
                    http: 'site.yaml#/HTTPSite'
                    ftp: 'site.yaml#/FTPSite'
                    ssh: 'site.yaml#/SSHSite'
                    pesit: 'site.yaml#/PeSITSite'
                    AS2: 'site.yaml#/AS2Site'
                    folder: 'site.yaml#/FolderMonitorSite'
                    adhoc: 'site.yaml#/AdhocSite'
                    cd: 'site.yaml#/ConnectDirectSite'
                    synchrony transfer: 'site.yaml#/SynchronySite'
                    custom: 'site.yaml#/CustomSite'
              examples:
                HTTP:
                  $ref: 'examples.yaml#/HTTPSiteExample'
                FTP:
                  $ref: 'examples.yaml#/FTPSiteExample'
                SSH:
                  $ref: 'examples.yaml#/SSHSiteExample'
                PeSIT:
                  $ref: 'examples.yaml#/PeSITSiteExample'
                AS2:
                  $ref: 'examples.yaml#/AS2SiteExample'
                FolderMonitor:
                  $ref: 'examples.yaml#/FolderMonitorSiteExample'
                Adhoc:
                  $ref: 'examples.yaml#/AdhocSiteExample'
                ConnectDirect:
                  $ref: 'examples.yaml#/ConnectDirectSiteExample'
                Synchrony:
                  $ref: 'examples.yaml#/SynchronySiteExample'
                Custom:
                  $ref: 'examples.yaml#/CustomSiteExample'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - sites
      summary: Partially update an existing site.
      description: |
        `Permissions`: "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM", "TEMPLATES_FORM".

        **Note:** All fields of type string for the internal transfer sites (besides AS2 and System to Human) support Expression Language (EL), except those regarding certificatesand enum ones.
        Refer to the schema for each transfer site. Valid expressions are:
        * custom properties passed in a REST API Pull/Push request via the '/transfers/operations' resource - "${DXAGENT_TRANSFERSAPI_*}"
        * SecureTransport specific named variable sets - "${stenv.variable}" and "${env['variable']}"
        * predefined functions using EL - "{concat("var1", "var2")}}"

        **Note**: To update a transfer site and use the placeholder default values of the selected site template, add a trailing hyphen to the placeholder name: "testPlaceholder-": ""
                      Use of default placeholder values is applicable with the following transfer sites only: Connect:Direct, Synchrony, File Services interface protocol.
      operationId: partiallyUpdateSiteProperties
      parameters:
        - name: id
          in: path
          description: The id of the site that needs to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: Site's properties that need to be updated for the specified id.
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - sites
      summary: Replace an existing site.
      description: |
        `Permissions`: "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM", "TEMPLATES_FORM".

        **Note:** All fields of type string for the internal transfer sites (besides AS2 and System to Human) support Expression Language (EL), except those regarding certificatesand enum ones.
        Refer to the schema for each transfer site. Valid expressions are:
        * custom properties passed in a REST API Pull/Push request via the '/transfers/operations' resource - "${DXAGENT_TRANSFERSAPI_*}"
        * SecureTransport specific named variable sets - "${stenv.variable}" and "${env['variable']}"
        * predefined functions using EL - "{concat("var1", "var2")}}"

        **Note**: To update a transfer site and use the placeholder default values of the selected site template, add a trailing hyphen to the placeholder name: "testPlaceholder-": ""
                      Use of default placeholder values is applicable with the following transfer sites only: Connect:Direct, Synchrony, File Services interface protocol.
      operationId: updateSiteProperties
      parameters:
        - name: id
          in: path
          description: The id of the site.
          required: true
          schema:
            type: string
      requestBody:
        description: Site that needs to be updated for the specified site.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: 'site.yaml#/HTTPSite'
                - $ref: 'site.yaml#/AdhocSite'
                - $ref: 'site.yaml#/AS2Site'
                - $ref: 'site.yaml#/ConnectDirectSite'
                - $ref: 'site.yaml#/FTPSite'
                - $ref: 'site.yaml#/SSHSite'
                - $ref: 'site.yaml#/PeSITSite'
                - $ref: 'site.yaml#/FolderMonitorSite'
                - $ref: 'site.yaml#/SynchronySite'
                - $ref: 'site.yaml#/CustomSite'
              discriminator:
                propertyName: type
                mapping:
                  http: 'site.yaml#/HTTPSite'
                  ftp: 'site.yaml#/FTPSite'
                  ssh: 'site.yaml#/SSHSite'
                  pesit: 'site.yaml#/PeSITSite'
                  AS2: 'site.yaml#/AS2Site'
                  folder: 'site.yaml#/FolderMonitorSite'
                  adhoc: 'site.yaml#/AdhocSite'
                  cd: 'site.yaml#/ConnectDirectSite'
                  synchrony transfer: 'site.yaml#/SynchronySite'
                  custom: 'site.yaml#/CustomSite'
            examples:
              HTTP:
                $ref: 'examples.yaml#/HTTPSiteExample'
              FTP:
                $ref: 'examples.yaml#/FTPSiteExample'
              SSH:
                $ref: 'examples.yaml#/SSHSiteExample'
              PeSIT:
                $ref: 'examples.yaml#/PeSITSiteExample'
              AS2:
                $ref: 'examples.yaml#/AS2SiteExample'
              FolderMonitor:
                $ref: 'examples.yaml#/FolderMonitorSiteExample'
              Adhoc:
                $ref: 'examples.yaml#/AdhocSiteExample'
              ConnectDirect:
                $ref: 'examples.yaml#/ConnectDirectSiteExample'
              Synchrony:
                $ref: 'examples.yaml#/SynchronySiteExample'
              Custom:
                $ref: 'examples.yaml#/CustomSiteExample'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    delete:
      tags:
        - sites
      summary: Delete a site.
      description: |
        `Permissions`: "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM", "TEMPLATES_FORM".
      operationId: deleteSite
      parameters:
        - name: id
          in: path
          description: The id of the site.
          required: true
          schema:
            type: string
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /sites/operations:
    post:
      tags:
        - sites
      summary: Tests site operations.
      description: |
        `Permissions`: "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM", "TEMPLATES_FORM".
      operationId: siteOperations
      parameters:
        - name: operation
          in: query
          description: Operation type.
          required: true
          schema:
            type: string
            enum:
              - testConnection
              - listRemoteFolder
        - name: includesFolderNamesInResult
          in: query
          description: |
            Defines whether folder names to be included in list operation response. Available for listRemoteFolder operation only.
          required: false
          schema:
            type: boolean
            default: true
        - name: folderToList
          in: query
          description: |
            Defines the remote folder on which listRemoteFolder operation will be performed. If the parameter is set to downloadFolder - list operation will be performed on download folder, otherwise operation will be performed on upload folder. Available for listRemoteFolder operation only.
          required: false
          schema:
            type: string
            enum:
              - downloadFolder
              - uploadFolder
            default: downloadFolder
        - name: limit
          in: query
          description: |
            The limit of the listed files and folders. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named 'ListRemoteFolder.Result.Files.Limit' (which by default has value 50). If the limit parameter is set to -1 - all files and folders will be included in list operation result. Available for listRemoteFolder operation only.
          required: false
          schema:
            type: integer
      requestBody:
        description: The properties that need to be included for the test operation
          for the specified site.
        content:
          application/json:
            schema:
              $ref: 'site.yaml#/Connection'
        required: true
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                oneOf:
                   - $ref: 'site.yaml#/ConnectionDetailsResult'
                   - $ref: 'site.yaml#/ListRemoteFolderResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /siteTemplates:
    get:
      tags:
        - siteTemplates
      summary: Get siteTemplates collection.
      description: |
        `Permissions`: "Site Templates"

        `Implementation note:` Searching for site template by properties you must specify additional property **type**.
        Otherwise search is available only for common properties of site templates (name, protocol).

        When trying to filter by fields exclusive to a certain site template type, the type property must be specified.
      operationId: getSiteTemplates
      parameters:
        - name: name
          in: query
          description: The name of the Site template.
          schema:
            type: string
        - name: limit
          in: query
          description: The limit of the listed rows. The limit parameter can has only
            nonnegative integer value. If the limit parameter is set to 0 or it is null
            then its value will be the value of the global server configuration parameter
            named `Webservices.EntriesPerPage` (which by default has value 100).
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: The start row to list. The offset parameter can has only nonnegative
            integer value. If this parameter is not set, then it is considered 0.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: |
            Site template's fields to return.

            **Note:** The type field will always be present.
          schema:
            type: string
        - name: type
          in: query
          description: |
            The type of the site template.
          schema:
            type: string
            enum:
              - cd
              - synchrony transfer
              - custom
        - name: protocol
          in: query
          description: |
            The protocol of the site template.
          schema:
            type: string
        - name: localServerName
          in: query
          description: Applicable for cd site template. Specify the name of the site template.
          schema:
            type: string
        - name: localServerPort
          in: query
          description: Applicable for cd site template. Specify the port of the site template.
          schema:
            type: string
        - name: submitScriptWithinFile
          in: query
          description: Applicable for cd site. Specify if the script contains unicode characters and has to be submitted within a file.
          schema:
            type: boolean
        - name: recScript
          in: query
          description: Applicable for cd site template. Specify the receive script of the site template.
          schema:
            type: string
        - name: sendScript
          in: query
          description: Applicable for cd site template. Specify the send script of the site template.
          schema:
            type: string
        - name: userName
          in: query
          description: Applicable for cd, synchrony site templates. Specify the username of the site template.
          schema:
            type: string
        - name: useCertificate
          in: query
          description: Applicable for cd site template. Whether to use certificate for login.
          schema:
            type: boolean
        - name: usePassword
          in: query
          description: Applicable for cd site template. Whether to use password for login.
          schema:
            type: boolean
        - name: usePasswordExpr
          in: query
          description: Applicable for cd, synchrony site templates. Whether to use password expressions.
          schema:
            type: boolean
        - name: transferMode
          in: query
          description: Applicable for cd site template. Specify the transfer mode of the site template.
          schema:
            type: string
            enum:
              - Auto detect
              - ASCII_MODE
              - IMAGE_MODE
        - name: host
          in: query
          description: Applicable for synchrony site template. Specify the host of the site template.
          schema:
            type: string
        - name: port
          in: query
          description: Applicable for synchrony site template. Specify the port of the site template.
          schema:
            type: string
        - name: partner
          in: query
          description: Applicable for synchrony site template. Specify the partner of the site template.
          schema:
            type: string
        - name: transferProfile
          in: query
          description: Applicable for synchrony site template. Specify the transfer profile of the site template.
          schema:
            type: string
        - name: additionalProperties.appcycid
          in: query
          description: Applicable for synchrony site template.
          schema:
            type: string
        - name: additionalProperties.fName
          in: query
          description: Applicable for synchrony site template.
          schema:
            type: string
        - name: additionalProperties.appobjid
          in: query
          description: Applicable for synchrony site template.
          schema:
            type: string
        - name: additionalProperties.direction
          in: query
          description: Applicable for synchrony site template.
          schema:
            type: string
        - name: additionalProperties.freeMsg
          in: query
          description: Applicable for synchrony site template.
          schema:
            type: string
        - name: additionalProperties.ida
          in: query
          description: Applicable for synchrony site template.
          schema:
            type: string
        - name: additionalProperties.ipart
          in: query
          description: Applicable for synchrony site template.
          schema:
            type: string
        - name: additionalProperties.maxDate
          in: query
          description: Applicable for synchrony site template.
          schema:
            type: string
        - name: additionalProperties.maxTime
          in: query
          description: Applicable for synchrony site template.
          schema:
            type: string
        - name: additionalProperties.minDate
          in: query
          description: Applicable for synchrony site template.
          schema:
            type: string
        - name: additionalProperties.minTime
          in: query
          description: Applicable for synchrony site template.
          schema:
            type: string
        - name: additionalProperties.nfName
          in: query
          description: Applicable for synchrony site template.
          schema:
            type: string
        - name: additionalProperties.nIdf
          in: query
          description: Applicable for synchrony site template.
          schema:
            type: string
        - name: additionalProperties.pri
          in: query
          description: Applicable for synchrony site template.
          schema:
            type: string
        - name: additionalProperties.rappl
          in: query
          description: Applicable for synchrony site template.
          schema:
            type: string
        - name: additionalProperties.rUser
          in: query
          description: Applicable for synchrony site template.
          schema:
            type: string
        - name: additionalProperties.sappl
          in: query
          description: Applicable for synchrony site template.
          schema:
            type: string
        - name: additionalProperties.state
          in: query
          description: Applicable for synchrony site template.
          schema:
            type: string
        - name: additionalProperties.sUser
          in: query
          description: Applicable for synchrony site template.
          schema:
            type: string
        - name: additionalProperties.trk
          in: query
          description: Applicable for synchrony site template.
          schema:
            type: string
        - name: additionalAttributes.key
          in: query
          description: Search by userVars key.
          schema:
            type: string
        - name: additionalAttributes.value
          in: query
          description: Search by userVars value.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'siteTemplate.yaml#/SiteTemplateResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    post:
      tags:
        - siteTemplates
      summary: Create a siteTemplate.
      description: |
        `Permissions`: "Site Templates"
      operationId: createSiteTemplate
      requestBody:
        description: Site template that needs to be created.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: 'siteTemplate.yaml#/ConnectDirectSiteTemplate'
                - $ref: 'siteTemplate.yaml#/SynchronySiteTemplate'
                - $ref: 'siteTemplate.yaml#/CustomSiteTemplate'
              discriminator:
                propertyName: type
                mapping:
                  cd: 'siteTemplate.yaml#/ConnectDirectSiteTemplate'
                  synchrony transfer: 'siteTemplate.yaml#/SynchronySiteTemplate'
            examples:
              connectDirectSiteTemplate:
                $ref: 'postExamples.yaml#/connectDirectSiteTemplate'
              synchronySiteTemplate:
                $ref: 'postExamples.yaml#/synchronySiteTemplate'
        required: true
      responses:
        201:
          $ref: 'responses.yaml#/Created'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /siteTemplates/{id}:
    head:
      tags:
        - siteTemplates
      summary: Check if site template exists.
      description: |
        `Permissions`: "Site Templates"
      operationId: siteTemplateExists
      parameters:
        - name: id
          in: path
          description: The id to search for.
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    get:
      tags:
        - siteTemplates
      summary: Get a site template.
      description: |
        `Permissions`: "Site Templates"

        `Imlementation note`: When trying to filter by fields exclusive to a certain site template type, the type property must be specified.
      operationId: getSiteTemplate
      parameters:
        - name: id
          in: path
          description: The id to search for.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: |
            The site template's fields to return.

            **Note:** The type field will always be present.
          schema:
            type: string
          explode: false
        - name: type
          in: query
          description: |
            The type of the site template.
          schema:
            type: string
            enum:
              - cd
              - synchrony transfer
              - custom
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: 'siteTemplate.yaml#/ConnectDirectSiteTemplate'
                  - $ref: 'siteTemplate.yaml#/SynchronySiteTemplate'
                  - $ref: 'siteTemplate.yaml#/CustomSiteTemplate'
                discriminator:
                  propertyName: type
                  mapping:
                    cd: 'siteTemplate.yaml#/ConnectDirectSiteTemplate'
                    synchrony transfer: 'siteTemplate.yaml#/SynchronySiteTemplate'
                    custom: 'siteTemplate.yaml#/CustomSiteTemplate'
              examples:
                connectDirectSiteTemplate:
                  $ref: 'examples.yaml#/connectDirectSiteTemplate'
                synchronySiteTemplate:
                  $ref: 'examples.yaml#/synchronySiteTemplate'
                customSiteTemplate:
                  $ref: 'examples.yaml#/CustomSiteTemplateExample'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - siteTemplates
      summary: Partially update a site template.
      description: |
        `Permissions`: "Site Templates"
      operationId: partiallyUpdateSiteTemplate
      parameters:
        - name: id
          in: path
          description: The id of the site template that needs to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: Site template properties that needs to be updated for the specified
          site template.
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - siteTemplates
      summary: Replace an existing site template properties.
      description: |
        `Permissions`: "Site Templates"
      operationId: updateSiteTemplate
      parameters:
        - name: id
          in: path
          description: The value of id.
          required: true
          schema:
            type: string
      requestBody:
        description: The properties that need to be updated for the specified site
          template.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: 'siteTemplate.yaml#/ConnectDirectSiteTemplate'
                - $ref: 'siteTemplate.yaml#/SynchronySiteTemplate'
              discriminator:
                propertyName: protocol
                mapping:
                  cd: 'siteTemplate.yaml#/ConnectDirectSiteTemplate'
                  synchrony transfer: 'siteTemplate.yaml#/SynchronySiteTemplate'
            examples:
              connectDirectSiteTemplate:
                $ref: 'examples.yaml#/connectDirectSiteTemplate'
              synchronySiteTemplate:
                $ref: 'examples.yaml#/synchronySiteTemplate'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    delete:
      tags:
        - siteTemplates
      summary: Delete a site template.
      description: |
        `Permissions`: "Site Templates"
      operationId: deleteSiteTemplate
      parameters:
        - name: id
          in: path
          description: The id of the site template.
          required: true
          schema:
            type: string
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /transferProfiles:
    get:
      tags:
        - transferProfiles
      summary: Get transfer profiles collection.
      description: |
        `Permissions`: "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM", "TEMPLATES_FORM".
      operationId: getTransferProfiles
      parameters:
        - name: limit
          in: query
          description: The limit of the listed rows. The limit parameter can has only
            nonnegative integer value. If the limit parameter is set to 0 or it is null
            then its value will be the value of the global server configuration parameter
            named `Webservices.EntriesPerPage` (which by default has value 100).
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: The start row to list. The offset parameter can has only nonnegative
            integer value. If this parameter is not set, then it is considered 0.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: |
            The transfer profiles' fields to return.
          schema:
            type: string
        - name: name
          in: query
          description: The name of the transfer profile. Wildcard character (*) can be used.
          schema:
            type: string
        - name: account
          in: query
          description: The account for which the transfer profile is created.
          schema:
            type: string
        - name: default
          in: query
          description: Defines whether the transfer profile is default or not.
          schema:
            type: string
        - name: sendMapping
          in: query
          description: The send mapping of the transfer profile.
          schema:
            type: string
        - name: receiveMapping
          in: query
          description: The receive mapping of the transfer profile. The transfer profile's
            `Receive File as` mapping may not contain '*' or '?'.
          schema:
            type: string
            pattern: ^([^\*\?])$
        - name: fileLabelOption
          in: query
          description: The file label option of the transfer profile. Corresponds to PI 37 code.
          schema:
            type: string
            enum:
              - DONT_SEND
              - SEND_FILENAME
              - SEND_FILENAME_AND_PATH
        - name: multiSelect
          in: query
          description: Defines whether multi select is chosen.
          schema:
            type: boolean
        - name: transferMode
          in: query
          description: The mode of the transfer profile.
          schema:
            type: string
            enum:
              - BINARY
              - ASCII
              - EBCDIC
              - EBCDIC_NATIVE
        - name: recordFormat
          in: query
          description: The record format of the transfer profile. It can be variable (128)
            or fixed (0). Corresponds to PI 31 code.
          schema:
            type: string
            enum:
              - Variable
              - Fixed
        - name: recordLength
          in: query
          description: The record length of the transfer profile. It should be positive. Corresponds to PI 32 code
            number.
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 32767
        - name: sendingAcknowledgmentEnabled
          in: query
          description: Defines whether the sending acknowledgment is enabled.
          schema:
            type: boolean
        - name: paddingStripEnabled
          in: query
          description: Defines whether the padding strip is enabled.
          schema:
            type: boolean
        - name: additionalAttributes.key
          in: query
          description: Search by userVars key.
          schema:
            type: string
        - name: additionalAttributes.value
          in: query
          description: Search by userVars value.
          schema:
            type: string
        - name: advancedSettings.enabled
          in: query
          description: Determines whether advancedSettings are enabled.
          schema:
            type: boolean
        - name: advancedSettings.callerTranscoding.localDataCode
          in: query
          description: The file encoding of sending side of the transfer profile. It can be binary, ascii or ebcdic.
          schema:
            type: string
            enum:
              - BINARY
              - ASCII
              - EBCDIC
        - name: advancedSettings.callerTranscoding.type
          in: query
          description:  Determines whether and what transcoding to be applied. Acts as a discriminator and is case sensitive.
          schema:
            type: string
            enum:
              - binary
              - ascii
              - ebcdic
              - ascii_predefined
              - ebcdic_predefined
#              - ascii_custom_table
#              - ebcdic_custom_table
        - name: advancedSettings.callerTranscoding.transcoding
          in: query
          description:  Read-only field displayed when predefined "type" is used.
          schema:
            type: string
            enum:
              - predefined
        - name: advancedSettings.callerTranscoding.networkDataCode
          in: query
          description: Defines the value of PI 16 - the data coding of the network file. The field is Read-only, populated based on type, when type is ASCII or EBCDIC.
          schema:
            type: string
            enum:
              - BINARY
              - ASCII
              - EBCDIC
        - name: advancedSettings.callerTranscoding.sourceEncodingScheme
          in: query
          description: The encoding scheme of the source file. Can be one of the system supported charsets.  Applicable only for ascii_predefined and ebcdic_predefined types.
          schema:
            type: string
        - name: advancedSettings.callerTranscoding.outputEncodingScheme
          in: query
          description: The encoding scheme of the output file. Can be one of the system supported charsets.  Applicable only for ascii_predefined and ebcdic_predefined types.
          schema:
            type: string
        - name: advancedSettings.callerTranscoding.outputRecordFormat
          in: query
          description:  The record format of the transfer profile. Corresponds to PI 31 code.
          schema:
            type: string
            enum:
              - VARIABLE
              - FIXED
        - name: advancedSettings.callerTranscoding.outputRecordLength
          in: query
          description: The record length of the transfer profile. It should be positive number. Corresponds to PI 32 code.
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 32767
        - name: advancedSettings.callerTranscoding.paddingCharacter
          in: query
          description: The padding character can be UNICODE or ASCII and specified by its hexadecimal value.
          schema:
            type: string
        - name: advancedSettings.receiverTranscoding.type
          in: query
          description: Determines whether and what transcoding to be applied. Acts as a discriminator and is case sensitive.
          schema:
            type: string
            enum:
              - binary
              - ascii
              - ebcdic
              - predefined
#              - custom_table
        - name: advancedSettings.receiverTranscoding.transcoding
          in: query
          description:  Read-only field displayed when predefined "type" is used.
          schema:
            type: string
            enum:
              - predefined
        - name: advancedSettings.receiverTranscoding.localDataCode
          in: query
          description: Read-only field populated based on "type". The data coding of the file on the local file system.
          schema:
            type: string
            enum:
              - BINARY
              - ASCII
              - EBCDIC
        - name: advancedSettings.receiverTranscoding.sourceEncodingScheme
          in: query
          description: The encoding scheme of the source file. Can be one of the system supported charsets.  Applicable only for predefined type.
          schema:
            type: string
        - name: advancedSettings.receiverTranscoding.outputEncodingScheme
          in: query
          description: The encoding scheme of the output file. Can be one of the system supported charsets.  Applicable only for predefined type.
          schema:
            type: string
        - name: advancedSettings.receiverTranscoding.outputRecordFormat
          in: query
          description: The record format of the transfer profile.
          schema:
            type: string
            enum:
              - VARIABLE
              - FIXED
        - name: advancedSettings.receiverTranscoding.outputRecordLength
          in: query
          description: The record length of the transfer profile. It should be positive number.
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 32767
        - name: advancedSettings.receiverTranscoding.paddingCharacter
          in: query
          description: The padding character can be UNICODE or ASCII and specified by its hexadecimal value.
          schema:
            type: string
        - name: advancedSettings.receiverTranscoding.lineEndingFormat
          in: query
          description: Line ending of the receiving side of the transfer profile.
          schema:
            type: string
            enum:
              - DEFAULT
              - WINDOWS
              - UNIX
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'transferProfile.yaml#/TransferProfileResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    post:
      tags:
        - transferProfiles
      summary: Create a transfer profile.
      description: |
          At least one of the transfer profile's 'sendMapping' or 'receiveMapping' should be set.

          `Permissions`: "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM", "TEMPLATES_FORM".
      operationId: createTransferProfile
      requestBody:
        description: Create a transfer profile.
        content:
          application/json:
            schema:
              $ref: 'transferProfile.yaml#/TransferProfile'
            examples:
              legacyTransferProfile:
                $ref: 'examples.yaml#/TransferProfileOldExample'
              basicTransferProfile:
                $ref: 'examples.yaml#/TransferProfileDefaultExample'
              advancedTransferProfile:
                $ref: 'examples.yaml#/TransferProfileAsciiAndEbcdicExample'
              advancedTransferProfilePredefined:
                $ref: 'examples.yaml#/TransferProfileEbcdicPredefinedAndPredefinedExample'
      responses:
        201:
          $ref: 'responses.yaml#/Created'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /transferProfiles/{id}:
    head:
      tags:
        - transferProfiles
      summary: Check if transfer profile exists.
      description: |
        `Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".
      operationId: transferProfileExists
      parameters:
        - name: id
          in: path
          description: The id of the transferProfile.
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    get:
      tags:
        - transferProfiles
      summary: Get a transfer profile.
      description: |
        `Permissions`: "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM", "TEMPLATES_FORM".
      operationId: getTransferProfile
      parameters:
        - name: id
          in: path
          description: The id of the transfer profile.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: The transfer profiles' fields to return.
          schema:
            type: string
          explode: false
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'transferProfile.yaml#/TransferProfile'
              examples:
                legacyTransferProfile:
                  $ref: 'examples.yaml#/TransferProfileOldExample'
                basicTransferProfile:
                  $ref: 'examples.yaml#/TransferProfileDefaultExample'
                advancedTransferProfile:
                  $ref: 'examples.yaml#/TransferProfileAsciiAndEbcdicExample'
                advancedTransferProfilePredefined:
                  $ref: 'examples.yaml#/TransferProfileEbcdicPredefinedAndPredefinedExample'
            multipart/mixed:
              schema:
                type: object
                properties:
                  transferProfileBody:
                    $ref: 'transferProfile.yaml#/TransferProfile'
                  callerTranscodingTable:
                    type: string
                    format: binary
                  receiverTranscodingTable:
                    type: string
                    format: binary
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - transferProfiles
      summary: Partially update a transfer profile.
      description: |
        `Permissions`: "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM", "TEMPLATES_FORM".
      operationId: partiallyUpdateTransferProfile
      parameters:
        - name: id
          in: path
          description: The id of the transfer profile.
          required: true
          schema:
            type: string
      requestBody:
        description: The transfer profile that needs to be updated.
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: false
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - transferProfiles
      summary: Replace an existing transfer profile.
      description: |
        `Permissions`: "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM", "TEMPLATES_FORM".
      operationId: updateTransferProfile
      parameters:
        - name: id
          in: path
          description: The id of the transfer profile.
          required: true
          schema:
            type: string
      requestBody:
        description: The transfer profile that needs to be updated.
        content:
          application/json:
            schema:
              $ref: 'transferProfile.yaml#/TransferProfile'
            examples:
              legacyTransferProfile:
                $ref: 'examples.yaml#/TransferProfileOldExample'
              basicTransferProfile:
                $ref: 'examples.yaml#/TransferProfileDefaultExample'
              advancedTransferProfile:
                $ref: 'examples.yaml#/TransferProfileAsciiAndEbcdicExample'
              advancedTransferProfilePredefined:
                $ref: 'examples.yaml#/TransferProfileEbcdicPredefinedAndPredefinedExample'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    delete:
      tags:
        - transferProfiles
      summary: Delete transfer profile.
      description: |
        `Permissions`: "USER_ACCOUNT_FORM", "SERVICE_ACCOUNT_FORM", "TEMPLATES_FORM".
      operationId: deleteTransferProfile
      parameters:
        - name: id
          in: path
          description: The id of the transfer profile.
          required: true
          schema:
            type: string
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /transfers/operations:
    post:
      tags:
        - transfers
      summary: Perform operation on transfers.
      description: |
        Currently only pull operation is available. Triggers pull event to retrieve files for a given transfer pull.

        The "customProperties" field is a map, consisting of "key":"value" pairs, that can be referenced by the Transfer Site (TS)
        using SecureTransport Expression Language (EL) with the "DXAGENT_TRANSFERSAPI_" prefix. For example, given a key "foo" with a value of "bar",
        we can access it in the TS using ${DXAGENT_TRANSFERSAPI_FOO} for properties which support EL and it would be evaluated to "bar".
        The transfer sites which support these expressions are FTP, HTTP, SSH, PeSIT and Folder Monitor.

        **Note:** The keys in the "customProperties" map are case insensitive.

        `Permissions`: "USER_ACCOUNT_FORM", "TRANSFER_LOG_FORM"
      operationId: pullTransfer
      parameters:
        - name: operation
          in: query
          description: Which transfer operation to be performed.
          required: true
          schema:
            type: string
            enum:
              - pull
      requestBody:
        description: The transfer pull.
        content:
          application/json:
            schema:
              $ref: 'transfer.yaml#/AdminTransferPull'
        required: true
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'transfer.yaml#/TransferResult'
        202:
          description: Accepted - Successfuly submitted operation.
          content:
            application/json:
              schema:
                $ref: 'transfer.yaml#/TransferResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
        503:
          $ref: 'responses.yaml#/ServiceUnavailable'
  /subscriptions:
    get:
      tags:
        - subscriptions
      summary: Get collection of subscriptions on the ST server.
      description:
        "
        `Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n\n
        `Implementation note:` Searching for subscription by properties you must specify additional property **type**. \n\n
         Otherwise search is available only for common properties of subscription
         (*type*, *account*, *application*, *flowAttributes*, *flowAttrsMergeMode*, *flowName*, *folder*,
          *folderMonitorScheduleCheck*, *maxParallelSitPulls*, *scheduledFolderMonitor*, *subscriptionEncryptMode*, *fileRetentionPeriod*,
          *flowAttributes.value*, *flowAttributes.key*).\n\n
          \ When trying to filter by fields exclusive to a certain subscription type, the type property must be specified.\n\n
          \ Searching properties or filtering by fields exclusive to a certain schedule type, the schedules.type parameter must be specified."
      operationId: getSubscriptions
      parameters:
        - name: limit
          in: query
          description: The limit of the listed rows. The limit parameter can has only
            nonnegative integer value. If the limit parameter is set to 0 or it is null
            then its value will be the value of the global server configuration parameter
            named `Webservices.EntriesPerPage` (which by default has value 100).
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: The start row to list. The offset parameter can has only nonnegative
            integer value. If this parameter is not set, then it is considered 0.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: |
            Set of comma separated strings of subscription properties to return.

            **Note:** The type field will always be present.
          schema:
            type: string
        - name: account
          in: query
          description: The account name to filter by.
          schema:
            type: string
        - name: application
          in: query
          description: The application name to filter by.
          schema:
            type: string
        - name: type
          in: query
          description: |
            Discriminator to filter by.
          schema:
            type: string
            enum:
              - AdvancedRouting
              - Basic
              - HumanSystem
              - MBFT
              - SharedFolder
              - SiteMailbox
              - StandardRouter
              - SynchronyTransfer
        - name: schedules.type
          in: query
          description: The schedules type to filter by.
          schema:
            type: string
            enum:
              - ONCE
              - HOURLY
              - DAILY
              - WEEKLY
              - MONTHLY
              - YEARLY
              - EXPRESSION
        - name: folder
          in: query
          description: The subscription folder to filter by. The file path should be
            provided e.g '/TEST'. Wildcard character (*) can be used.
          schema:
            type: string
        - name: maxParallelSitPulls
          in: query
          description: Custom attribute under which we store the option for maximum
            sit pulls to be executed simultaneously. Negative value or 0 - no limit,
            positive value 4 - limits simultaneously
          schema:
            type: integer
        - name: flowAttrsMergeMode
          in: query
          description: The flow merge mode.
          schema:
            type: string
            enum:
              - preserve
              - overwrite
              - append
        - name: folderMonitorScheduleCheck
          in: query
          description: Whether a folder monitor subscription is scheduled.
          schema:
            type: string
        - name: flowAttributes.key
          in: query
          description: Search by userVars key.
          schema:
            type: string
        - name: flowAttributes.value
          in: query
          description: Search by userVars value.
          schema:
            type: string
        - name: scheduledFolderMonitor
          in: query
          description: Specify if this subscription is targeted for a scheduled folder monitor.
          schema:
            type: string
        - name: fileRetentionPeriod
          in: query
          description: Search by fileRetentionPeriod value. If this parameter is not set, then it is considered 0.
          schema:
            type: integer
            format: int32
        - name: subscriptionEncryptMode
          in: query
          description: Encryption that will be used for subscription folder. Accepting
            one of default, enabled, disabled.
          schema:
            type: string
        - name: flowAttributeKey
          in: query
          description: Search by flowAtrribute key.
          schema:
            type: string
        - name: flowAttributeValue
          in: query
          description: Search by flowAtrribute value.
          schema:
            type: string
        - name: templateAdvancedExpression
          in: query
          description: Specify if advanced expressions section be displayed in Admin
            UI Subscriptions page.
            Applicable for Basic, SharedFolder, SiteMailbox subscriptions.
          schema:
            type: string
        - name: transferConfigurations.id
          in: query
          description: Search by id of transfer configuration.
          schema:
            type: string
        - name: transferConfigurations.tag
          in: query
          description: Search by tag of transfer configuration.
          schema:
            type: string
            enum:
              - PARTNER-IN
              - PARTNER-OUT
        - name: transferConfigurations.outbound
          in: query
          description: Search by direction of transfer configuration. If true, subscriptions with outbound transfer configurations
            will be returned, else subscriptions with inbound transfer configrations.
          schema:
            type: boolean
        - name: transferConfigurations.site
          in: query
          description: Search by transfer site name of transfer configuration.
          schema:
            type: string
        - name: transferConfigurations.transferProfile
          in: query
          description: Search by transfer profile of transfer configuration.
          schema:
            type: string
        - name: transferConfigurations.dataTransformations.id
          in: query
          description: Search by id of transfer configuration's data transformation.
          schema:
            type: string
        - name: transferConfigurations.dataTransformations.type
          in: query
          description: Search by type of transfer configuration's data transformation.
          schema:
            type: string
        - name: transferConfigurations.dataTransformations.asciiArmor
          in: query
          description: Search by asciiArmor of transfer configuration's data transformation.
            Specify if SecureTransport uses ASCII armor encoding.
            ASCII armor refers to using binary-to-text encoding for plain text data.
          schema:
            type: boolean
            enum:
              - true
        - name: transferConfigurations.dataTransformations.compressionAlgorithm
          in: query
          description: Search by compressionAlgorithm of transfer configuration's data transformation.
            Possible values are -1 (Preffered), 0 (No compression), 1 (ZIP), 2 (ZLIB) or 3 (BZIP2).
            Preferred compression methods and order of preference are determined by examining the recipient's PGP key.
            If the data compression method you choose is not among the recipient's preferred methods,
            it is possible that the recipient will not be able to access the data.
          schema:
            type: integer
        - name: transferConfigurations.dataTransformations.compressionLevel
          in: query
          description: Search by compressionLevel of transfer configuration's data transformation.
            Possible values are 2 (Fast), 5 (Normal), 7 (Good) or 9 (Best).
          schema:
            type: integer
        - name: transferConfigurations.dataTransformations.encryptEnabled
          in: query
          description: Search by encryptEnabled property of transfer configuration's data transformation.
          schema:
            type: boolean
        - name: transferConfigurations.dataTransformations.localSignCertificate
          in: query
          description: Search by localSignCertificate of transfer configuration's data transformation.
          schema:
            type: string
        - name: transferConfigurations.dataTransformations.originalNameExpressionEnabled
          in: query
          description: Search by originalNameExpressionEnabled of transfer configuration's data transformation.
          schema:
            type: boolean
        - name: transferConfigurations.dataTransformations.originalNameExpression
          in: query
          description: Search by originalNameExpression of transfer configuration's data transformation.
          schema:
            type: string
        - name: transferConfigurations.dataTransformations.partnerEncryptCertificate
          in: query
          description: Search by partnerEncryptCertificate of transfer configuration's data transformation.
          schema:
            type: string
        - name: transferConfigurations.dataTransformations.requireEncryption
          in: query
          description: Search by requireEncryption of transfer configuration's data transformation.
          schema:
            type: boolean
            enum:
              - true
        - name: transferConfigurations.dataTransformations.requireSignature
          in: query
          description: Search by requireSignature of transfer configuration's data transformation.
          schema:
            type: boolean
            enum:
              - true
        - name: transferConfigurations.dataTransformations.signingEnabled
          in: query
          description: Search by signingEnabled of transfer configuration's data transformation.
          schema:
            type: boolean
        - name: transferConfigurations.dataTransformations.transformedNameExpressionEnabled
          in: query
          description: Search by transformedNameExpressionEnabled property of transfer configuration's data transformation.
          schema:
            type: boolean
        - name: transferConfigurations.dataTransformations.transformedNameExpression
          in: query
          description: Search by transformedNameExpression of transfer configuration's data transformation.
          schema:
            type: string
        - name: postClientDownloads.postClientDownloadActionType
          in: query
          description: Specify if Post Client Download Actions will be applied to
            each file successfully downloaded from the subscription folder. It can
            be 'DELETE' or no property at all.
            Applicable for AdvancedRouting subscription.
          schema:
            type: string
        - name: postClientDownloads.postClientDownloadActionTypeFailure
          in: query
          description: Advanced Routing setting for post client download action type option on failure.
            Applicable for AdvancedRouting subscription.
          schema:
            type: string
        - name: postClientDownloads.postClientDownloadTypeOnFailDoAdvancedRouting
          in: query
          description: Whether to trigger advanced routing in case of a failed post client download.
            Applicable for AdvancedRouting subscription.
          schema:
            type: boolean
        - name: postClientDownloads.postClientDownloadTypeOnFailDoAdvancedRoutingProcessFailedFile
          in: query
          description: Defines whether to trigger advanced routing with file copy in case of a failed post client download.
            Applicable for AdvancedRouting subscription.
          schema:
            type: boolean
        - name: postClientDownloads.postClientDownloadTypeOnPermfailDoDelete
          in: query
          description: Defines whether to delete the file in case of a permanent failure of a post client download.
            Applicable for AdvancedRouting subscription.
          schema:
            type: boolean
        - name: postClientDownloads.postClientDownloadTypeOnSuccessDoAdvancedRouting
          in: query
          description: Defines whether to trigger advanced routing in case of a successful post client download.
            Applicable for AdvancedRouting subscription.
          schema:
            type: boolean
        - name: postClientDownloads.postClientDownloadTypeOnSuccessDoAdvancedRoutingProcessFile
          in: query
          description: Defines whether to trigger advanced routing with file copy in case of a successful post client download.
            Applicable for AdvancedRouting subscription.
          schema:
            type: boolean
        - name: postProcessingActions.ppaOnFailInDoDelete
          in: query
          description: Defines whether to delete the file on failure after the transmission.
            This action is applied to files arrived to this folder and processed by a route package.
            Applicable for AdvancedRouting subscription.
          schema:
            type: boolean
        - name: postProcessingActions.ppaOnFailInDoMove
          in: query
          description: Specify a value to rename the file after transmission or
            move it to a different folder on failure. An expression language can
            be used to specify a file name/folder. This action is applied to files
            arrived to this folder and processed by a route package.
            Applicable for AdvancedRouting subscription.
          schema:
            type: string
        - name: postProcessingActions.ppaOnSuccessInDoDelete
          in: query
          description: Defines whether to delete the file on success after the transmission.
            This action is applied to files arrived to this folder and processed by a route package.
            Applicable for AdvancedRouting subscription.
          schema:
            type: boolean
        - name: postProcessingActions.ppaOnSuccessInDoMove
          in: query
          description: Specify a value to rename the file after transmission or
            move it to a different folder on success. An expression language can
            be used to specify a file name/folder. This action is applied to files
            arrived to this folder and processed by a route package.
            Applicable for AdvancedRouting subscription.
          schema:
            type: string
        - name: postTransmissionActions.moveOverwrite
          in: query
          description: Delete the target file and repeat the rename operation.
            Applicable for AdvancedRouting subscription.
          schema:
            type: boolean
        - name: postTransmissionActions.ptaOnTempfailInDoDelete
          in: query
          description: Defines whether to delete the file on failure after the transmission.
            Applicable for AdvancedRouting, Basic, SharedFolder, SiteMailbox and StandardRouter subscriptions.
          schema:
            type: boolean
        - name: postTransmissionActions.ptaOnTempfailInDoMove
          in: query
          description: Specify a value to rename the file after transmission or
            move it to a different folder on temporary failure. An expression language
            can be used to specify a file name/folder.
            Applicable for AdvancedRouting, Basic, SharedFolder, SiteMailbox and StandardRouter subscriptions.
          schema:
            type: string
        - name: postTransmissionActions.ptaOnPermfailInDoDelete
          in: query
          description: Defines whether to delete the file on failure after the transmission.
            Applicable for AdvancedRouting, Basic, SharedFolder, SiteMailbox and StandardRouter subscriptions.
          schema:
            type: boolean
        - name: postTransmissionActions.ptaOnPermfailInDoMove
          in: query
          description: Specify a value to rename the file after transmission or
            move it to a different folder on failure. An expression language can
            be used to specify a file name/folder.
            Applicable for AdvancedRouting, Basic, SharedFolder, SiteMailbox and StandardRouter subscriptions.
          schema:
            type: string
        - name: postTransmissionActions.ptaOnPermfailDoAdvancedRouting
          in: query
          description: Defines whether to trigger advanced routing
            in case of a PTA permanent failure.
            Applicable for AdvancedRouting subscription.
          schema:
            type: boolean
        - name: postTransmissionActions.ptaOnPermfailInDoAdvancedRoutingFailedFile
          in: query
          description: Defines whether to trigger advanced routing with file copy
            in case of a PTA permanent failure.
            Applicable for AdvancedRouting subscription.
          schema:
            type: boolean
        - name: postTransmissionActions.ptaOnPermfailInDoAdvancedRoutingWildcardPull
          in: query
          description: Defines whether to trigger wildcard pull with advanced routing
            in case of a PTA permanent failure.
            Applicable for AdvancedRouting subscription.
          schema:
            type: boolean
        - name: postTransmissionActions.ptaOnTempfailInDoAdvancedRouting
          in: query
          description: Defines whether to trigger advanced routing
            in case of a PTA temporary failure.
            Applicable for AdvancedRouting subscription.
          schema:
            type: boolean
        - name: postTransmissionActions.ptaOnTempfailInDoAdvancedRoutingProcessFailedFile
          in: query
          description: Defines whether to trigger advanced routing with file copy
            in case of a PTA permanent failure.
            Applicable for AdvancedRouting subscription.
          schema:
            type: boolean
        - name: postTransmissionActions.ptaOnTempfailInDoAdvancedRoutingWildcardPull
          in: query
          description: Defines whether to trigger wildcard pull with advanced routing
            in case of a PTA temporary failure.
            Applicable for AdvancedRouting subscription.
          schema:
            type: boolean
        - name: postTransmissionActions.ptaOnSuccessDoInAdvancedRoutingWildcardPull
          in: query
          description: Defines whether to trigger wildcard pull with advanced routing
            in case of a PTA success.
            Applicable for AdvancedRouting subscription.
          schema:
            type: boolean
        - name: postTransmissionActions.ptaOnSuccessTriggerRouteExecutionOnPeSITAck
          in: query
          description: "When enabled, the route execution triggers on any of the following events:\ \n\n 
            * When a PeSIT acknowledgement is received \n
            * When a transfer completes with a status for which the Route action is configured \n\n
            Applicable only for AdvancedRouting subscription."
          schema:
            type: boolean
        - name: postTransmissionActions.ptaOnSuccessInDoDelete
          in: query
          description: Defines whether to delete the source file on success after the transmission.
            Applicable for AdvancedRouting, Basic, SharedFolder, SiteMailbox and StandardRouter subscriptions.
          schema:
            type: boolean
        - name: postTransmissionActions.ptaOnSuccessInDoMove
          in: query
          description: Specify a value to rename the file after transmission or move it to a different folder on success.
            An expression language can be used to specify a file name/folder.
            Applicable for AdvancedRouting, Basic, SharedFolder, SiteMailbox and StandardRouter subscriptions.
          schema:
            type: string
        - name: postTransmissionActions.ptaOnSuccessInDoMoveOverwrite
          in: query
          description: When the "Allow Overwrite Existing File" option is enabled and the rename operation fails because the target
            file exists, ST will delete the target file and repeat the rename operation.
            Applicable for AdvancedRouting subscription.
          schema:
            type: boolean
        - name: postTransmissionActions.ptaOnPermfailOutDoDelete
          in: query
          description: Defines whether to delete the file on failure after the transmission.
            Applicable for AdvancedRouting, Basic, SiteMailbox and StandardRouter subscriptions.
          schema:
            type: boolean
        - name: postTransmissionActions.ptaOnPermfailOutDoMove
          in: query
          description: Specify a value to rename the file after transmission or move it to a different folder on permanent failure.
            An expression language can be used to specify a file name/folder.
            Applicable for AdvancedRouting, Basic, SiteMailbox and StandardRouter subscriptions.
          schema:
            type: string
        - name: postTransmissionActions.ptaOnSuccessOutDoDelete
          in: query
          description: Defines whether to delete the file on success after the transmission.
            Applicable for AdvancedRouting, Basic, SiteMailbox and StandardRouter subscriptions.
          schema:
            type: boolean
        - name: postTransmissionActions.ptaOnSuccessOutDoMove
          in: query
          description: Specify a value to rename the file after transmission or move it to a different folder on success.
            An expression language can be used to specify a file name/folder.
            Applicable for AdvancedRouting, Basic, SiteMailbox and StandardRouter subscriptions.
          schema:
            type: string
        - name: postTransmissionActions.ptaOnSuccessOutDoMoveOverwrite
          in: query
          description: When the "Allow Overwrite Existing File" option is enabled and the rename operation fails because the target
            file exists, ST will delete the target file and repeat the rename operation.
            Applicable for AdvancedRouting subscription.
          schema:
            type: boolean
        - name: postTransmissionActions.ptaOnTempfailOutDoDelete
          in: query
          description: Defines whether to delete the file on failure after the transmission.
            Applicable for AdvancedRouting subscription.
          schema:
            type: boolean
        - name: postTransmissionActions.ptaOnTempfailOutDoMove
          in: query
          description: Specify a value to rename the file after transmission or move it to a different folder on failure.
            An expression language can be used to specify a file name/folder.
            Applicable for AdvancedRouting subscription.
          schema:
            type: string
        - name: postTransmissionActions.triggerOnConditionEnabled
          in: query
          description: If checked, processing of files in the subscription folder
            will be triggered upon a specific condition.
            Applicable for AdvancedRouting subscription.
          schema:
            type: boolean
        - name: postTransmissionActions.triggerOnConditionExpression
          in: query
          description: Specify the condition on which to trigger file processing.
            An expression language can be used.
            Applicable for AdvancedRouting subscription.
          schema:
            type: string
        - name: postTransmissionActions.triggerOnSuccessfulWildcardPull
          in: query
          description: Setting for trigger on successful wildcard pull.
            Applicable for AdvancedRouting subscription.
          schema:
            type: boolean
        - name: postTransmissionActions.submitFilterType
          in: query
          description:  Specify the submit filter type. It could be 'FILENAME_PATTERN' or 'TRIGGER_FILE_CONTENT'.
            Applicable for AdvancedRouting subscription.
          schema:
            type: string
        - name: postTransmissionActions.submitFilenamePatternExpression
          in: query
          description:  Specify the file name pattern. An expression language can be used.
            Applicable for AdvancedRouting subscription.
          schema:
            type: string        
        - name: postTransmissionActions.triggerFileOption
          in: query
          description:  Specify the trigger file option. It could be 'fail', 'continue' or 'retry'.
            Applicable for AdvancedRouting subscription.
          schema:
            type: string        
        - name: postTransmissionActions.triggerFileRetriesNumber
          in: query
          description:  Specify the trigger file maximum retries number.
            Applicable for AdvancedRouting subscription when 'triggerFileOption' option is set to 'retry'.
          schema:
            type: integer       
        - name: postTransmissionActions.triggerFileRetryDelay
          in: query
          description:  Specify the interval in seconds, when next trigger file retry will be executed.
            Applicable for AdvancedRouting subscription when 'triggerFileOption' option is set to 'retry'.
          schema:
            type: integer
        - name: subscriberID
          in: query
          description: The subscriber ID. Applicable for StandardRouter subscription.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'subscription.yaml#/SubscriptionResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    post:
      tags:
        - subscriptions
      summary: Create subscription on the ST server.
      description: "Subscriptions\
        \ support custom attributes which can be added via the ST RESTful\
        \ API. The custom attributes are in the following format: `userVars.{attribute_name}:\
        \ {attribute_value}`. \n\n`Note`: For properties supporting expression language:\
        \ If the filename expression begins with /, then the transformed file is put\
        \ in the sub-folder indicated by this filename expression relative to the\
        \ subscription folder.\n"
      operationId: createSubscription
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: 'subscription.yaml#/AdvancedRoutingSubscription'
                - $ref: 'subscription.yaml#/BasicSubscription'
                - $ref: 'subscription.yaml#/HumanSystemSubscription'
                - $ref: 'subscription.yaml#/MBFTSubscription'
                - $ref: 'subscription.yaml#/SharedFolderSubscription'
                - $ref: 'subscription.yaml#/SiteMailboxSubscription'
                - $ref: 'subscription.yaml#/StandardRouterSubscription'
                - $ref: 'subscription.yaml#/SynchronyTransferSubscription'
              discriminator:
                propertyName: type
                mapping:
                  AdvancedRouting: 'subscription.yaml#/AdvancedRoutingSubscription'
                  Basic: 'subscription.yaml#/BasicSubscription'
                  HumanSystem: 'subscription.yaml#/HumanSystemSubscription'
                  MBFT: 'subscription.yaml#/MBFTSubscription'
                  SharedFolder: 'subscription.yaml#/SharedFolderSubscription'
                  SiteMailbox: 'subscription.yaml#/SiteMailboxSubscription'
                  StandardRouter: 'subscription.yaml#/StandardRouterSubscription'
                  SynchronyTransfer: 'subscription.yaml#/SynchronyTransferSubscription'
            examples:
              advancedRoutingSubscription:
                $ref: 'postExamples.yaml#/AdvancedRoutingSubscriptionExample'
              basicSubscription:
                $ref: 'postExamples.yaml#/BasicSubscriptionExample'
              humanSystemSubscription:
                $ref: 'postExamples.yaml#/HumanSystemSubscriptionExample'
              MBFTSubscription:
                $ref: 'postExamples.yaml#/MBFTSubscriptionExample'
              sharedFolderSubscription:
                $ref: 'postExamples.yaml#/SharedFolderSubscriptionExample'
              siteMailboxSubscription:
                $ref: 'postExamples.yaml#/SiteMailboxSubscriptionExample'
              standardRouterSubscription:
                $ref: 'postExamples.yaml#/StandardRouterSubscriptionExample'
              synchronyTransferSubscription:
                $ref: 'postExamples.yaml#/SynchronyTransferSubscriptionExample'
        required: true
      responses:
        201:
          $ref: 'responses.yaml#/Created'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /subscriptions/{id}:
    head:
      tags:
        - subscriptions
      summary: Check if subscription exists.
      description: |
        `Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".
      operationId: subscriptionExists
      parameters:
        - name: id
          in: path
          description: The id of the subscription.
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    get:
      tags:
        - subscriptions
      summary: Get a subscription.
      operationId: getSubscription
      description: |
          `Implementation note`: When trying to filter by fields exclusive to a certain subscription type, the type property must be specified.
      parameters:
        - name: id
          in: path
          description: The id of the subscription.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: |
            Subscription's fields to return.

            **Note:** The type field will always be present.
          schema:
            type: string
          explode: false
        - name: type
          in: query
          description: |
            Discriminator to filter by.
          schema:
            type: string
            enum:
              - AdvancedRouting
              - Basic
              - HumanSystem
              - MBFT
              - SharedFolder
              - SiteMailbox
              - StandardRouter
              - SynchronyTransfer
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: 'subscription.yaml#/AdvancedRoutingSubscription'
                  - $ref: 'subscription.yaml#/BasicSubscription'
                  - $ref: 'subscription.yaml#/HumanSystemSubscription'
                  - $ref: 'subscription.yaml#/MBFTSubscription'
                  - $ref: 'subscription.yaml#/SharedFolderSubscription'
                  - $ref: 'subscription.yaml#/SiteMailboxSubscription'
                  - $ref: 'subscription.yaml#/StandardRouterSubscription'
                  - $ref: 'subscription.yaml#/SynchronyTransferSubscription'
                discriminator:
                  propertyName: type
                  mapping:
                    AdvancedRouting: 'subscription.yaml#/AdvancedRoutingSubscription'
                    Basic: 'subscription.yaml#/BasicSubscription'
                    HumanSystem: 'subscription.yaml#/HumanSystemSubscription'
                    MBFT: 'subscription.yaml#/MBFTSubscription'
                    SharedFolder: 'subscription.yaml#/SharedFolderSubscription'
                    SiteMailbox: 'subscription.yaml#/SiteMailboxSubscription'
                    StandardRouter: 'subscription.yaml#/StandardRouterSubscription'
                    SynchronyTransfer: 'subscription.yaml#/SynchronyTransferSubscription'
              examples:
                advancedRoutingSubscription:
                  $ref: 'examples.yaml#/AdvancedRoutingSubscriptionExample'
                basicSubscription:
                  $ref: 'examples.yaml#/BasicSubscriptionExample'
                humanSystemSubscription:
                  $ref: 'examples.yaml#/HumanSystemSubscriptionExample'
                MBFTSubscription:
                  $ref: 'examples.yaml#/MBFTSubscriptionExample'
                sharedFolderSubscription:
                  $ref: 'examples.yaml#/SharedFolderSubscriptionExample'
                siteMailboxSubscription:
                  $ref: 'examples.yaml#/SiteMailboxSubscriptionExample'
                standardRouterSubscription:
                  $ref: 'examples.yaml#/StandardRouterSubscriptionExample'
                synchronyTransferSubscription:
                  $ref: 'examples.yaml#/SynchronyTransferSubscriptionExample'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - subscriptions
      summary: Replace an existing properties of subscription.
      description: |
        `Implementation note:` If a subscription has a fileRetentionPeriod parameter greater than 0, changing
        the transfer site to other than SFTP will require setting the fileRetentionPeriod parameter value to 0. Currently only
        SFTP transfer sites are supported by the 'Keep pull history' feature.
      operationId: updateSubscription
      parameters:
        - name: id
          in: path
          description: The id of the subscription.
          required: true
          schema:
            type: string
      requestBody:
        description: The subscription to update.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: 'subscription.yaml#/AdvancedRoutingSubscription'
                - $ref: 'subscription.yaml#/BasicSubscription'
                - $ref: 'subscription.yaml#/HumanSystemSubscription'
                - $ref: 'subscription.yaml#/MBFTSubscription'
                - $ref: 'subscription.yaml#/SharedFolderSubscription'
                - $ref: 'subscription.yaml#/SiteMailboxSubscription'
                - $ref: 'subscription.yaml#/StandardRouterSubscription'
                - $ref: 'subscription.yaml#/SynchronyTransferSubscription'
              discriminator:
                propertyName: type
                mapping:
                  AdvancedRouting: 'subscription.yaml#/AdvancedRoutingSubscription'
                  Basic: 'subscription.yaml#/BasicSubscription'
                  HumanSystem: 'subscription.yaml#/HumanSystemSubscription'
                  MBFT: 'subscription.yaml#/MBFTSubscription'
                  SharedFolder: 'subscription.yaml#/SharedFolderSubscription'
                  SiteMailbox: 'subscription.yaml#/SiteMailboxSubscription'
                  StandardRouter: 'subscription.yaml#/StandardRouterSubscription'
                  SynchronyTransfer: 'subscription.yaml#/SynchronyTransferSubscription'
            examples:
              advancedRoutingSubscription:
                $ref: 'examples.yaml#/AdvancedRoutingSubscriptionExample'
              basicSubscription:
                $ref: 'examples.yaml#/BasicSubscriptionExample'
              humanSystemSubscription:
                $ref: 'examples.yaml#/HumanSystemSubscriptionExample'
              MBFTSubscription:
                $ref: 'examples.yaml#/MBFTSubscriptionExample'
              sharedFolderSubscription:
                $ref: 'examples.yaml#/SharedFolderSubscriptionExample'
              siteMailboxSubscription:
                $ref: 'examples.yaml#/SiteMailboxSubscriptionExample'
              standardRouterSubscription:
                $ref: 'examples.yaml#/StandardRouterSubscriptionExample'
              synchronyTransferSubscription:
                $ref: 'examples.yaml#/SynchronyTransferSubscriptionExample'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - subscriptions
      summary: Partially update subscription properties.
      operationId: patchSubscription
      parameters:
        - name: id
          in: path
          description: The id of the subscription.
          required: true
          schema:
            type: string
      requestBody:
        description: Subscription properties that need to be updated.
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    delete:
      tags:
        - subscriptions
      summary: Delete (unsubscribe) and/or purge subscription.
      description: Unsubscribing from an application deletes the associated pull history.
      operationId: deleteSubscription
      parameters:
        - name: id
          in: path
          description: The id of the subscription.
          required: true
          schema:
            type: string
        - name: purge
          in: query
          description: Defines whether or not to purge the subscription folder.
          schema:
            type: boolean
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /subscriptions/{id}/operations:
    post:
      tags:
        - subscriptions
      summary: Perform operation on subscriptions.
      description: "
        `Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\n
        `ClearPullHistory`: deletes the pull history associated with the subscription.\n\n
        `Purge`: does not affect the subscription pull history."
      operationId: subscriptionOperation
      parameters:
        - name: id
          in: path
          description: The id of the subscription.
          required: true
          schema:
            type: string
        - name: operation
          in: query
          description: Operation type.
          required: true
          schema:
            type: string
            enum:
              - ClearPullHistory
              - Purge
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'subscription.yaml#/PullHistoryDetailsResult'
        202:
          description: Accepted - Successfully submitted asynchronous operation.
          content:
            application/json:
              schema:
                $ref: 'responses.yaml#/Accepted'
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /version:
    get:
      tags:
        - version
      summary: Get version information.
      operationId: getSTVersion
      parameters:
        - name: fields
          in: query
          description: |
            The version information's fields to return.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'version.yaml#/VersionInformation'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /addressBook/sources:
    get:
      tags:
        - addressBook
      summary: Get address book sources.
      operationId: getAddressBookSources
      parameters:
        - name: fields
          in: query
          description: The fields of addressBookSource to return.
          schema:
            type: string
          explode: false
        - name: name
          in: query
          description: Name of addressBookSource to filter by.
          schema:
            type: string
        - name: type
          in: query
          description: Type of addressBookSource to filter by.
          schema:
            type: string
            enum:
              - LOCAL
              - LDAP
              - CUSTOM
        - name: parentGroup
          in: query
          description: Parent group of addressBookSource to filter by.
          schema:
            type: string
        - name: enabled
          in: query
          description: Filter by whether addressBookSource is enabled.
          schema:
            type: boolean
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'inheritance.yaml#/GlobalAddressBookSourceResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /addressBook/sources/{id}:
    head:
      tags:
        - addressBook
      summary: Check if an address book source exists.
      operationId: addressBookSourceExists
      parameters:
        - name: id
          in: path
          description: The id of the address book source to be checked.
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    get:
      tags:
        - addressBook
      summary: Get an address book source.
      operationId: getAddressBookSource
      parameters:
        - name: id
          in: path
          description: The id of the address book source to be retrieved.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: The fields of address book source to return.
          schema:
            type: string
          explode: false
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'inheritance.yaml#/AddressBookSource'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - addressBook
      summary: Replace an existing address book source.
      operationId: updateAddressBookSource
      parameters:
        - name: id
          in: path
          description: The id of the address book source that needs to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: Address book source to update.
        content:
          application/json:
            schema:
              $ref: 'inheritance.yaml#/AddressBookSource'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - addressBook
      summary: Partially update an existing address book source.
      operationId: partiallyUpdateAddressBookSource
      parameters:
        - name: id
          in: path
          description: The id of the address book source that needs to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: Address book source properties that need to be updated for the specified id.
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /userClasses:
    get:
      tags:
        - userClasses
      summary: Get a collection of existing on ST server user classes.
      operationId: getUserClasses
      parameters:
        - name: limit
          in: query
          description: "The limit of the listed rows. The limit parameter can only have\
          \ a nonnegative integer value. \nIf the limit parameter is set to 0 or it\
          \ is null then its value will be the value of the global server \nconfiguration\
          \ parameter named 'Webservices.EntriesPerPage' (which by default has a value\
          \ of 100).\n"
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: "The initial row to list all user classes. The offset parameter\
          \ can only have a nonnegative integer value. \nIf this parameter is not\
          \ set, then it is considered 0.\n"
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: |
            The userClasses` fields to return.
          schema:
            type: string
          explode: false
        - name: className
          in: query
          description: A user class name. Wildcard character (*) can be used.
          schema:
            type: string
        - name: userType
          in: query
          description: A user class type.
          schema:
            type: string
            enum:
              - '*'
              - real
              - virtual
        - name: order
          in: query
          description: The position on which a user class is persisted.
          schema:
            type: integer
        - name: userName
          in: query
          description: A user name bound to a user class.
          schema:
            type: string
        - name: enabled
          in: query
          description: Is user class enabled.
          schema:
            type: boolean
        - name: group
          in: query
          description: The group which a user class belongs to.
          schema:
            type: string
        - name: address
          in: query
          description: A user class host.
          schema:
            type: string
        - name: expression
          in: query
          description: A user class expression.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'userClass.yaml#/UserClassResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    post:
      tags:
        - userClasses
      summary: Create a single user class on the SecureTransport server.
      description: |
        The required properties in the POST request are: className, userType, userName, group and host.
        The order, expression and enabled properties are optional. Default values for this properties are false,"" and 1. During a POST
        request the properties enabled and expression can be modified, but all values passed for property order will be ignored and default one will be used.
      operationId: createUserClass
      requestBody:
        description: User class objects to be persisted on the SecureTransport server.
        content:
          application/json:
            schema:
              $ref: 'userClass.yaml#/UserClass'
        required: true
      responses:
        201:
          $ref: 'responses.yaml#/Created'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /userClasses/{id}:
    head:
      tags:
        - userClasses
      summary: Check if user class exists.
      operationId: userClassExists
      parameters:
        - name: id
          in: path
          description: The id of the user class.
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    get:
      tags:
        - userClasses
      summary: Get an instance of a user class associated with provided ID.
      operationId: getUserClass
      parameters:
        - name: id
          in: path
          description: User class ID to search for.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: The userClasses` fields to return.
          schema:
            type: string
          explode: false
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'userClass.yaml#/UserClass'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - userClasses
      summary: Update an existing on SecureTransport server user class.
      description: "The update full overwrite the previously existing user class on the SecureTransport\
        \ server.\n Required information for the user class\nfields(className, userType,\
        \ address and group) must be specified. Optional properties are: enabled,\
        \ expression and\norder. \n\nThe enabled property is used for enabling or\
        \ disabling the user class instance.\nThe order property is used to change\
        \ the position of the user class. When changing position of the user class\
        \ instance\nall user classes before or after the new user class position will\
        \ be shifted up or down by one position.\n"
      operationId: updateUserClass
      parameters:
        - name: id
          in: path
          description: The ID of the user class which must be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: A user class instance with populated properties which must be
          updated.
        content:
          application/json:
            schema:
              $ref: 'userClass.yaml#/UserClass'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - userClasses
      summary: Partially update an existing userClass.
      operationId: partiallyUpdateUserClass
      parameters:
        - name: id
          in: path
          description: The ID of the user class which must be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: UserClass object with properties to set.
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/BadRequest'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    delete:
      tags:
        - userClasses
      summary: Delete a user class instance.
      operationId: deleteUserClass
      parameters:
        - name: id
          in: path
          description: The ID of the class which will be deleted.
          required: true
          schema:
            type: string
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /administrators:
    get:
      tags:
        - administrators
      summary: Get available administrators.
      operationId: getAdministrators
      parameters:
        - name: limit
          in: query
          description: The limit of the listed rows. The limit parameter can only have
            a non-negative integer value. If the limit parameter is set to 0 or it is
            null, then its value will be the value of the global server configuration
            parameter named 'Webservices.EntriesPerPage' (which by default has value
            100).
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: The initial row to list all administrators. The offset parameter
            can only have a non-negative integer value. If this parameter is not set,
            then it is considered 0.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: |
            The administrator fields to return.
          schema:
            type: string
        - name: loginName
          in: query
          description: The administrator's name.
          schema:
            type: string
        - name: parent
          in: query
          description: The administrator's parent.
          schema:
            type: string
        - name: roleName
          in: query
          description: Name of the administrator's administrative role.
          schema:
            type: string
        - name: isLimited
          in: query
          description: Whether the administrator is limited or master.
          schema:
            type: boolean
        - name: localAuthentication
          in: query
          description: Search for local-authenticated or external-authenticated administrators.
          schema:
            type: boolean
        - name: dualAuthentication
          in: query
          description: Search for administrators which authenticate with a certificate and password.
          schema:
            type: boolean
        - name: locked
          in: query
          description: Search for locked administrators.
          schema:
            type: boolean
        - name: passwordCredentials.passwordExpired
          in: query
          description: Search for administrators with an expired password.
          schema:
            type: boolean
        - name: passwordCredentials.lastPasswordChangeTime.from
          in: query
          description: Search for administrators with a change of password after the specified time.
          schema:
            type: string
        - name: passwordCredentials.lastPasswordChangeTime.to
          in: query
          description: Search for administrators with a change of password before the specified time.
          schema:
            type: string
        - name: passwordCredentials.ownPasswordChanged.from
          in: query
          description: Search for administrators who changed their passwords after the specified time.
          schema:
            type: string
        - name: passwordCredentials.ownPasswordChange.to
          in: query
          description: Search for administrators who changed their passwords before the specified time.
          schema:
            type: string
        - name: passwordCredentials.lastLoginTime.from
          in: query
          description: Search for administrators who logged in after the specified time.
          schema:
            type: string
        - name: passwordCredentials.lastLoginTime.to
          in: query
          description: Search for administrators who logged in before the specified time.
          schema:
            type: string
        - name: passwordCredentials.lastFailureLoginTime.from
          in: query
          description: Search for administrators who failed to log in after the specified time.
          schema:
            type: string
        - name: passwordCredentials.lastFailureLoginTime.to
          in: query
          description: Search for administrators who failed to log in before the specified time.
          schema:
            type: string
        - name: passwordCredentials.loginFailureCount
          in: query
          description: Search for administrators who failed to log in a certain number of times.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'administrator.yaml#/AdministratorResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    post:
      tags:
        - administrators
      summary: Create an administrator.
      operationId: createAdministrator
      requestBody:
        description: An administrator object to be created on the SecureTransport
          server.
        content:
          application/json:
            schema:
              $ref: 'administrator.yaml#/Administrator'
        required: true
      responses:
        201:
          $ref: 'responses.yaml#/Created'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /administrators/{name}:
    get:
      tags:
        - administrators
      summary: Get an administrator.
      operationId: getAdministrator
      parameters:
        - name: name
          in: path
          description: The administrator's name to search for.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: The administrator's fields to return.
          schema:
            type: string
          explode: false
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'administrator.yaml#/Administrator'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    head:
      tags:
        - administrators
      summary: Check if an administrator exists
      operationId: administratorExists
      parameters:
        - name: name
          in: path
          description: The administrator's name to search for.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - administrators
      summary: Replace an existing administrator.
      operationId: updateAdministrator
      parameters:
        - name: name
          in: path
          description: The name of the administrator.
          required: true
          schema:
            type: string
      requestBody:
        description: Administrator object with properties to set.
        content:
          application/json:
            schema:
              $ref: 'administrator.yaml#/Administrator'
        required: true
      responses:
        204:
          description: The administrator was successfully updated.
          content: {}
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - administrators
      summary: Partially update an administrator.
      operationId: partiallyUpdateAdmin
      parameters:
        - name: name
          in: path
          description: The name of the administrator.
          required: true
          schema:
            type: string
      requestBody:
        description: Administrator object with properties to set.
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          description: The administrator was successfully updated.
          content: {}
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    delete:
      tags:
        - administrators
      summary: Delete an administrator.
      operationId: deleteAdministrator
      parameters:
        - name: name
          in: path
          description: The name of the administrator.
          required: true
          schema:
            type: string
      responses:
        204:
          description: Successfully deleted the administrator.
          content: {}
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /administrativeRoles:
    get:
      tags:
        - administrativeRoles
      summary: Get a collection of administrative roles.
      description: Get a collection of all administrative roles with their respective menus on the SecureTransport server.
      operationId: getAdministrativeRoles
      parameters:
        - name: limit
          in: query
          description: |
            The limit of the listed rows. The limit parameter can only have a non-negative integer value. If the limit parameter is set to 0 or it is null, then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: |
            The initial row to list all administrative roles. The offset parameter can only have a non-negative integer value. If this parameter is not set, then it is considered 0.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: |
            The administrativeRoles` fields to return.
          schema:
            type: string
        - name: roleName
          in: query
          description: An administrative role name.
          schema:
            type: string
        - name: isLimited
          in: query
          description: Whether the role is limited or not.
          schema:
            type: boolean
        - name: isBounceAllowed
          in: query
          description: Is bouncing of a server currently allowed for this administrative
            role.
          schema:
            type: boolean
        - name: menus
          in: query
          description: The roles with access to the specified menus.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'administrativeRole.yaml#/AdministrativeRoleResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    post:
      tags:
        - administrativeRoles
      summary: Create an administrative role.
      operationId: createAdministrativeRole
      requestBody:
        description: Administrative role object which can be created on the SecureTransport
          server.
        content:
          application/json:
            schema:
              $ref: 'administrativeRole.yaml#/AdministrativeRole'
        required: true
      responses:
        201:
          $ref: 'responses.yaml#/Created'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /administrativeRoles/{name}:
    head:
      tags:
        - administrativeRoles
      summary: Check if an administrative role exists.
      operationId: administrativeRoleExists
      parameters:
        - name: name
          in: path
          description: The role name to search for.
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    get:
      tags:
        - administrativeRoles
      summary: Get an administrative role.
      operationId: getAdministrativeRole
      parameters:
        - name: name
          in: path
          description: An administrative role name to search for.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: The administrative role's fields to return.
          schema:
            type: string
          explode: false
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'administrativeRole.yaml#/AdministrativeRole'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - administrativeRoles
      summary: Replace an existing administrative role.
      operationId: updateAdministrativeRole
      parameters:
        - name: name
          in: path
          description: The name of the administrative role to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: Administrative role object populated with properties which must be updated.
        content:
          application/json:
            schema:
              $ref: 'administrativeRole.yaml#/AdministrativeRole'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - administrativeRoles
      summary: Partially update an existing administrative role.
      operationId: partiallyUpdateRole
      parameters:
        - name: name
          in: path
          description: The name of the administrative role to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: Administrative role properties that need to be updated for the specified
          account.
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    delete:
      tags:
        - administrativeRoles
      summary: Delete an administrative role.
      description: All administrators assigned to this role will also be deleted.
      operationId: deleteAdministrativeRole
      parameters:
        - name: name
          in: path
          description: The name of the administrative role which will be deleted.
          required: true
          schema:
            type: string
        - name: targetRoleName
          in: query
          description: All administrators assigned to the deleted role will
            be moved to a target administrative role, specified with this query parameter.
          schema:
            type: string
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /servers:
    get:
      tags:
        - servers
      summary: Gets a collection of servers.
      description: |
        `Implementation note:` Searching for server by properties you must specify additional property **protocol**.
          Otherwise search is available only for common properties of servers (serverName, isActive).

          When trying to filter by fields exclusive to a certain server, the protocol property must be specified.
      operationId: getServers
      parameters:
        - name: limit
          in: query
          description: |
            The limit of the listed rows. The limit parameter can only have a non-negative integer value. If the limit parameter is set to 0 or it is null, then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: |
            The initial row to list all administrative roles. The offset parameter can only have a non-negative integer value. If this parameter is not set, then it is considered 0.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: |
            The server's fields to return.

            **Note:** The protocol field will always be present.
          schema:
            type: string
        - name: protocol
          in: query
          description: |
            The server protocol to filter by.
          schema:
            type: string
            enum:
              - http
              - ftp
              - ssh
              - as2
              - pesit
        - name: serverName
          in: query
          description: The server name
          schema:
            type: string
        - name: isActive
          in: query
          description: The current state of the server.
          schema:
            type: boolean
        - name: host
          in: query
          description: Server bind host. Applicable for FTP, SSH, PeSIT
          schema:
            type: string
        - name: port
          in: query
          description: Server bind port. Applicable for FTP, SSH
          schema:
            type: integer
            maximum: 65535
            minimum: 1
        - name: ciphers
          in: query
          description: Comma-separated list of enabled ciphers. Applicable for FTP, HTTP, SSH, PeSIT
          schema:
            type: string
        - name: fipsCiphers
          in: query
          description: Comma-separated list of enabled FIPS ciphers. Applicable for FTP, HTTP, SSH, PeSIT
          schema:
            type: string
        - name: enabledSslProtocols
          in: query
          description: The suite of protocols available for the server. Applicable for FTP, HTTP, AS2, PeSIT
          schema:
            type: string
        - name: isFipsEnabled
          in: query
          description: FIPS transfer mode. Applicable for FTP, HTTP, SSH, AS2, PeSIT
          schema:
            type: boolean
        - name: isFtpsEnabled
          in: query
          description: Controls whether FTPS is enabled.
          schema:
            type: boolean
        - name: isFtpEnabled
          in: query
          description: Controls whether FTP is enabled.
          schema:
            type: boolean
        - name: sslKeyAlgorithm
          in: query
          description: FTP server SSL key algorithm.
          schema:
            type: string
        - name: sslProtocol
          in: query
          description: Server SSL protocol. Applicable for FTP, HTTP
          schema:
            type: string
        - name: sslTrustAlgorithm
          in: query
          description: FTP SSL trust algorithm.
          schema:
            type: string
        - name: certificateAlias
          in: query
          description: Server certificate alias for FTP, HTTP, SSH server, used for FTPS, HTTPS, SSH connections.
          schema:
            type: string
        - name: clientCertificateResolution
          in: query
          description: Controls the status of FTPS, HTTPS, AS2, SSH, PeSIT client certificate authentication.
          schema:
            type: string
            enum:
              - none
              - optional
              - required
        - name: clientPasswordAuth
          in: query
          description: Controls if password authentication is enabled as a user authentication method on the SSH server.
          schema:
            type: string
            enum:
              - default
              - disabled
        - name: passivePortBase
          in: query
          description: Passive mode base port, 0 means 'let system choose port'. Applicable for FTP
          schema:
            type: integer
        - name: passivePortNumber
          in: query
          description: Passive mode port range, 0 means 'there are no port range
            restrictions'. Applicable for FTP
          schema:
            type: integer
        - name: httpPort
          in: query
          description: HTTP server bind port.
          schema:
            type: integer
            maximum: 65535
            minimum: 1
        - name: httpsPort
          in: query
          description: HTTPS server bind port.
          schema:
            type: integer
            maximum: 65535
            minimum: 1
        - name: isHttpEnabled
          in: query
          description: HTTP status.
          schema:
            type: boolean
        - name: isHttpsEnabled
          in: query
          description: HTTPS status.
          schema:
            type: boolean
        - name: httpHost
          in: query
          description: HTTP host
          schema:
            type: string
        - name: httpsHost
          in: query
          description: HTTPS host
          schema:
            type: string
        - name: loginFormat
          in: query
          description: How will the client get challenged for authentication. Applicable for HTTP
          schema:
            type: string
            enum:
              - HTML
              - BA
              - ERR
              - PREAUTH
        - name: allowedAuthenticationParameters
          in: query
          description: HTTP allowed authentication parameters represented as a semicolon
            separated list.
          schema:
            type: string
        - name: allowedAuthenticationParametersMaxSize
          in: query
          description: HTTP allowed authentication parameters maximum size in bytes.
          schema:
            type: integer
            minimum: 0
        - name: isHstsEnabled
          in: query
          description: Enable or disable HSTS for HTTP, AS2 Server. On change, the server must be restarted.
          schema:
            type: boolean
        - name: contentSecurityPolicy
          in: query
          description: Specifies the value of the Content-Security-Policy header
            for the HTTP server.
          schema:
            type: string
        - name: xssProtection
          in: query
          description: |
            Specifies the value of the X-XSS-Protection header for the HTTP server. Accepted values are: 0 | 1 | 1; mode=block |1; report=<reporting url>
          schema:
            type: string
        - name: contentTypeOptions
          in: query
          description: |
            Specifies the value of the X-Content-Type-Options header for the HTTP server. Accepted value: nosniff
          schema:
            type: string
        - name: referrerPolicy
          in: query
          description: |
            Specifies the value of the Referrer-Policy header for the HTTP server. Accepted values are: no-referrer|no-referrer-when-downgrade|origin|origin-when-cross-origin |same-origin|strict-origin|strict-origin-when-cross-origin|unsafe-url
          schema:
            type: string
        - name: expectCt
          in: query
          description: |
            Specifies the value of the Expect-CT header for the HTTP server. Accepted value is: max-age=<age>; enforce; report-uri=<uri>. The enforce and report-uri directives are optional.
          schema:
            type: string
        - name: httpSecuritySameSite
          in: query
          description: |
            Specifies value for the SameSite cookie attribute for http. Valid values: None, Lax, Strict. Default value when not set: Strict.
          schema:
            type: string
        - name: redirectHostname
          in: query
          description: |
            When set, all subsequent to first requests to the ST Web client will be bound to that hostname.
            This should be used in the case where a DNS switch occurs to avoid requests getting split across different nodes.
            Applicable for HTTP.
          schema:
            type: string
        - name: isScpEnabled
          in: query
          description: Secure Copy (SCP) status
          schema:
            type: boolean
        - name: isSftpEnabled
          in: query
          description: Secure File TransferProtocol (SFTP) status
          schema:
            type: boolean
        - name: keyExchangeAlgorithms
          in: query
          description: Comma-separated list of supported Key Exchange algorithms for the current SSH server.
            This option is not honored when FIPS mode is enabled.
          schema:
            type: string
        - name: fipsKeyExchangeAlgorithms
          in: query
          description: Comma-separated list of supported Key Exchange algorithms in FIPS mode for the current SSH server.
          schema:
            type: string
        - name: minDiffieHellmanGroupExchangeKeySize
          in: query
          description: Define the minimum key size for Diffie-Hellman exchange algorithms group supported by the current SSH server.
            This value is honored if Diffie-Hellman key exchange algorithm is defined as supported in keyExchangeAlgorithms parameter value.
          schema:
            type: integer
        - name: maxDiffieHellmanGroupExchangeKeySize
          in: query
          description: Define the maximum key size for Diffie-Hellman exchange algorithms group supported by the current SSH server.
            This value is honored if Diffie-Hellman key exchange algorithm is defined as supported in keyExchangeAlgorithms parameter value.
          schema:
            type: integer
        - name: publicKeys
          in: query
          description: Comma-separated list of supported public keys for client certificate authentication to current SSH server. This option is not honored when FIPS mode is enabled.
            The first entry will be set as preferred public key for authentication to SSH daemon.
          schema:
            type: string
        - name: fipsPublicKeys
          in: query
          description: Comma-separated list of supported public keys in FIPS mode for client certificate authentication to current SSH server.
          schema:
            type: string
        - name: allowedMacs
          in: query
          description: Comma-separated list of supported MAC algorithms for current SSH server.
            The first one will be set as preferred MAC algorithm.
            This option is not honored when FIPS mode is enabled.
          schema:
            type: string
        - name: fipsAllowedMacs
          in: query
          description: Comma-separated list of supported MAC algorithms in FIPS mode for current SSH server.
          schema:
            type: string
        - name: nonSslListenerEnabled
          in: query
          description: AS2 non-SSL listener status.
          schema:
            type: boolean
        - name: nonSslListenerHost
          in: query
          description: AS2 non-SSL host
          schema:
            type: string
        - name: nonSslListenerPort
          in: query
          description: AS2 non-SSL port
          schema:
            type: integer
            minimum: 1
            maximum: 65535
        - name: sslListenerEnabled
          in: query
          description: AS2 SSL listener status
          schema:
            type: boolean
        - name: sslListenerHost
          in: query
          description: AS2 SSL host
          schema:
            type: string
        - name: sslListenerPort
          in: query
          description: AS2 SSL port
          schema:
            type: integer
            minimum: 1
            maximum: 65535
        - name: enabledCipherSuites
          in: query
          description: Comma-separated list of AS2 enabled ciphers.
          schema:
            type: string
        - name: fipsEnabledCipherSuites
          in: query
          description: Comma-separated list of AS2 enabled FIPS ciphers.
          schema:
            type: string
        - name: keyAlgorithm
          in: query
          description: AS2 key algorithm.
          schema:
            type: string
        - name: keyAlias
          in: query
          description: AS2 key alias
          schema:
            type: string
        - name: isReceiverEnabled
          in: query
          description: Whether AS2 receiving is enabled.
          schema:
            type: boolean
        - name: isPesitEnabled
          in: query
          description: PeSIT plain port enabled/disabled status
          schema:
            type: boolean
        - name: isPesitSslEnabled
          in: query
          description: PeSIT SSL port enabled/disabled status
          schema:
            type: boolean
        - name: isCftSslEnabled
          in: query
          description: PeSIT CFT SSL port enabled/disabled status
          schema:
            type: boolean
        - name: isPtcpEnabled
          in: query
          description: PeSIT over parallel-TCP plain port enabled/disabled status
          schema:
            type: boolean
        - name: isPtcpSslEnabled
          in: query
          description: PeSIT over parallel-TCP SSL port enabled/disabled status
          schema:
            type: boolean
        - name: pesitPort
          in: query
          description: PeSIT plain port
          schema:
            type: integer
            minimum: 1
            maximum: 65535
        - name: pesitSslPort
          in: query
          description: PeSIT SSL port (non CFT compatible)
          schema:
            type: integer
            minimum: 1
            maximum: 65535
        - name: cftSslPort
          in: query
          description: PeSIT CFT SSL port (CFT compatible)
          schema:
            type: integer
            minimum: 1
            maximum: 65535
        - name: ptcpPort
          in: query
          description: PeSIT over parallel-TCP plain port
          schema:
            type: integer
            minimum: 1
            maximum: 65535
        - name: ptcpSslPort
          in: query
          description: PeSIT over parallel-TCP SSL port
          schema:
            type: integer
            minimum: 1
            maximum: 65535
        - name: cftSslKeyAlgorithm
          in: query
          description: PeSIT CFT SSL key algorithm
          schema:
            type: string
        - name: cftSslKeyAlias
          in: query
          description: PeSIT CFT SSL key alias
          schema:
            type: string
        - name: cftSslProtocol
          in: query
          description: PeSIT CFT SSL protocol
          schema:
            type: string
        - name: cftSslTrustAlgorithm
          in: query
          description: PeSIT CFT SSL trust algorithm
          schema:
            type: string
        - name: ptcpKeyAlgorithm
          in: query
          description: PeSIT pTCP SSL key algorithm
          schema:
            type: string
        - name: ptcpKeyAlias
          in: query
          description: PeSIT pTCP SSL key alias
          schema:
            type: string
        - name: ptcpProtocol
          in: query
          description: PeSIT pTCP SSL protocol
          schema:
            type: string
        - name: ptcpTrustAlgorithm
          in: query
          description: PeSIT pTCP SSL trust algorithm
          schema:
            type: string
        - name: pesitKeyAlgorithm
          in: query
          description: PeSIT SSL key algorithm
          schema:
            type: string
        - name: pesitKeyAlias
          in: query
          description: PeSIT SSL key alias
          schema:
            type: string
        - name: pesitSslProtocol
          in: query
          description: PeSIT SSL protocol
          schema:
            type: string
        - name: pesitTrustAlgorithm
          in: query
          description: PeSIT SSL trust algorithm
          schema:
            type: string
        - name: autodetectTlsModeListenerEnabled
          in: query
          description: Whether the PeSIT autodetect TLS mode is enabled.
          schema:
            type: boolean
        - name: autodetectTlsModeListenerPort
          in: query
          description: The PeSIT autodetect TLS mode listener port.
          schema:
            type: integer
            minimum: 1
            maximum: 65535
        - name: autodetectTlsModeListenerKeyAlgorithm
          in: query
          description: The autodetect TLS mode listener key algorithm. Applicable for PeSIT.
          schema:
            type: string
        - name: autodetectTlsModeListenerKeyAlias
          in: query
          description: The autodetect TLS mode listener key alias. Applicable for PeSIT.
          schema:
            type: string
        - name: autodetectTlsModeListenerProtocol
          in: query
          description: The autodetect TLS mode listener protocol. Applicable for PeSIT.
          schema:
            type: string
        - name: autodetectTlsModeListenerTrustAlgorithm
          in: query
          description: The autodetect TLS mode listener trust algorithm. Applicable for PeSIT.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'server.yaml#/ServerConfigurations'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    post:
      tags:
        - servers
      summary: Create server with a specific configuration.
      operationId: createServer
      requestBody:
        description: Server configuration.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: 'server.yaml#/FtpServerConfiguration'
                - $ref: 'server.yaml#/HttpServerConfiguration'
                - $ref: 'server.yaml#/SshServerConfiguration'
                - $ref: 'server.yaml#/As2ServerConfiguration'
                - $ref: 'server.yaml#/PesitServerConfiguration'
              discriminator:
                propertyName: protocol
                mapping:
                  ftp: 'server.yaml#/FtpServerConfiguration'
                  http: 'server.yaml#/HttpServerConfiguration'
                  ssh: 'server.yaml#/SshServerConfiguration'
                  as2: 'server.yaml#/As2ServerConfiguration'
                  pesit: 'server.yaml#/PesitServerConfiguration'
            examples:
              FtpServerConfiguration:
                $ref: 'postExamples.yaml#/FtpServerConfigurationExample'
              HttpServerConfiguration:
                $ref: 'postExamples.yaml#/HttpServerConfigurationExample'
              SshServerConfiguration:
                $ref: 'postExamples.yaml#/SshServerConfigurationExample'
              As2ServerConfiguration:
                $ref: 'postExamples.yaml#/As2ServerConfigurationExample'
              PesitServerConfiguration:
                $ref: 'postExamples.yaml#/PesitServerConfigurationExample'
        required: true
      responses:
        201:
          $ref: 'responses.yaml#/Created'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /servers/{name}:
    head:
      tags:
        - servers
      summary: Check if a server configuration exists.
      operationId: serverExists
      parameters:
        - name: name
          in: path
          description: The name of the server configuration to be updated.
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    get:
      tags:
        - servers
      summary: Get a server configuration.
      description: |
          `Implementation note`: When trying to filter by fields exclusive to a certain server,
          the protocol property must be specified.
      operationId: getServer
      parameters:
        - name: name
          in: path
          description: The name of the server configuration to be updated.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: |
            The server configuration's fields to return.

            **Note:** The protocol field will always be present.
          schema:
            type: string
          explode: false
        - name: protocol
          in: query
          description: Server's protocol.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: 'server.yaml#/FtpServerConfiguration'
                  - $ref: 'server.yaml#/HttpServerConfiguration'
                  - $ref: 'server.yaml#/SshServerConfiguration'
                  - $ref: 'server.yaml#/As2ServerConfiguration'
                  - $ref: 'server.yaml#/PesitServerConfiguration'
                discriminator:
                  propertyName: protocol
                  mapping:
                    ftp: 'server.yaml#/FtpServerConfiguration'
                    http: 'server.yaml#/HttpServerConfiguration'
                    ssh: 'server.yaml#/SshServerConfiguration'
                    as2: 'server.yaml#/As2ServerConfiguration'
                    pesit: 'server.yaml#/PesitServerConfiguration'
              examples:
                FtpServerConfiguration:
                  $ref: 'examples.yaml#/FtpServerConfigurationExample'
                HttpServerConfiguration:
                  $ref: 'examples.yaml#/HttpServerConfigurationExample'
                SshServerConfiguration:
                  $ref: 'examples.yaml#/SshServerConfigurationExample'
                As2ServerConfiguration:
                  $ref: 'examples.yaml#/As2ServerConfigurationExample'
                PesitServerConfiguration:
                  $ref: 'examples.yaml#/PesitServerConfigurationExample'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - servers
      summary: Replace an existing server configuration.
      operationId: updateServer
      parameters:
        - name: name
          in: path
          description: The name of the server configuration to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: Server configuration.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: 'server.yaml#/FtpServerConfiguration'
                - $ref: 'server.yaml#/HttpServerConfiguration'
                - $ref: 'server.yaml#/SshServerConfiguration'
                - $ref: 'server.yaml#/As2ServerConfiguration'
                - $ref: 'server.yaml#/PesitServerConfiguration'
              discriminator:
                propertyName: protocol
                mapping:
                  ftp: 'server.yaml#/FtpServerConfiguration'
                  http: 'server.yaml#/HttpServerConfiguration'
                  ssh: 'server.yaml#/SshServerConfiguration'
                  as2: 'server.yaml#/As2ServerConfiguration'
                  pesit: 'server.yaml#/PesitServerConfiguration'
            examples:
              FtpServerConfiguration:
                $ref: 'examples.yaml#/FtpServerConfigurationExample'
              HttpServerConfiguration:
                $ref: 'examples.yaml#/HttpServerConfigurationExample'
              SshServerConfiguration:
                $ref: 'examples.yaml#/SshServerConfigurationExample'
              As2ServerConfiguration:
                $ref: 'examples.yaml#/As2ServerConfigurationExample'
              PesitServerConfiguration:
                $ref: 'examples.yaml#/PesitServerConfigurationExample'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - servers
      summary: Partially update an existing server configuration.
      operationId: partiallyUpdateServer
      parameters:
        - name: name
          in: path
          description: The name of the server configuration to be updated.
          required: true
          schema:
            type: string
      requestBody:
        description: Server configuration that need to be updated for the specified
          account.
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    delete:
      tags:
        - servers
      summary: Delete a server.
      operationId: deleteServer
      parameters:
        - name: name
          in: path
          description: The name of the server to be deleted.
          required: true
          schema:
            type: string
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /servers/operations:
    post:
      tags:
        - servers
      summary: Start or stop servers.
      operationId: serverOperation
      parameters:
        - name: serverName
          in: query
          description: The server name
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: operation
          in: query
          description: Which server operation to be performed.
          required: true
          schema:
            type: string
            enum:
              - start
              - stop
        - name: timeout
          in: query
          description: Total timeout (in seconds) for waiting a response from a server.
          schema:
            minimum: 150
            type: integer
            default: 150
      responses:
        200:
          description: The server operation was successful.
          content:
            application/json:
              schema:
                $ref: 'server.yaml#/ServerStatuses'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /daemons:
    get:
      tags:
        - daemons
      summary: Get daemons statuses.
      operationId: getDaemonsStatus
      parameters:
        - name: fields
          in: query
          description: The daemon's fields to return.
          schema:
            type: string
          explode: false
      responses:
        200:
          description: Return the daemons statuses.
          content:
            application/json:
              schema:
                $ref: 'daemons.yaml#/DaemonsStatus'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /daemons/operations:
    post:
      tags:
        - daemons
      summary: Start/stop particular daemon or daemons.
      operationId: daemonOperation
      parameters:
        - name: daemon
          in: query
          description: The daemon name to start. Leave it empty to start all daemons
            (FTP, HTTP, SSH, AS2, PeSIT).
          schema:
            type: string
            enum:
              - http
              - ftp
              - ssh
              - as2
              - pesit
        - name: timeout
          in: query
          description: Total timeout (in seconds) for waiting a response from a server.
            In a graceful stop, the timeout parameter refers to the time
            (in seconds) for which the existing connections are left to complete their
            job. If not specified (left blank) the particular daemon server configuration
            timeout will be used. In a non-graceful stop it refers to the total timeout
            (in seconds) for waiting a response from a server.
          schema:
            type: integer
        - name: operation
          in: query
          description: Which daemons operation to be performed.
          required: true
          schema:
            type: string
            enum:
              - start
              - stop
        - name: graceful
          in: query
          description: Whether to stop daemon gracefully.
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'daemons.yaml#/DaemonOperationResults'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /daemons/{name}:
    get:
      tags:
        - daemons
      summary: Get daemon configuration.
      operationId: getDaemonConfiguration
      parameters:
        - name: name
          in: path
          description: The daemon name to get the configuration of.
          required: true
          schema:
            type: string
            enum:
              - ssh
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'daemons.yaml#/SshDaemonConfiguration'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - daemons
      summary: Replace an existing daemon configuration.
      operationId: updateDaemonConfiguration
      description: |
        `Note:` Update of the daemon configuration requires a restart of the daemon in order to take effect.
      parameters:
        - name: name
          in: path
          description: The daemon name to update the configuration of.
          required: true
          schema:
            type: string
            enum:
              - ssh
      requestBody:
        description: Server configuration.
        content:
          application/json:
            schema:
              $ref: 'daemons.yaml#/SshDaemonConfiguration'
            examples:
              SshDaemonConfiguration:
                $ref: 'examples.yaml#/SshDaemonConfigurationExample'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - daemons
      summary: Partially update an existing daemon configuration.
      operationId: partiallyUpdateDaemonConfiguration
      description: |
        `Note:` Update of the daemon configuration requires a restart of the daemon in order to take effect.
      parameters:
        - name: name
          in: path
          description: The daemon name to update the configuration of.
          required: true
          schema:
            type: string
            enum:
              - ssh
      requestBody:
        description: Daemon configuration that need to be updated.
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /statisticsSummary/generateReport:
    get:
      tags:
        - statisticsSummary
      summary: Generate statistics summary report.
      description: Generate statistics summary report for a given date range.
      operationId: generateStatisticsSummary
      parameters:
        - name: startDate
          in: query
          description: The begging date of the date frame of the generated report. **Must
            be in the following format 'dd/MM/yyyy'.**
          required: true
          schema:
            type: string
        - name: endDate
          in: query
          description: |
            The ending date of the date frame of the generated report.
            Current date can not be included in the report. **Must be in the following format 'dd/MM/yyyy'.**
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /statisticsSummary/activeUsers:
    get:
      tags:
        - statisticsSummary
      summary: Return the Active Users
      description: Return the active users with respective login times.
      operationId: getActiveUsers
      parameters:
        - name: limit
          in: query
          description: |
            Defines maximum count of returned entries. Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with offset query parameter to get entries at portions.
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: |
            Defines the first entry number of an ordered result to get; last entry number to return is (offset + limit - 1). Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with limit query parameter to get entries at portions.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: The configuration option's fields to return.
          schema:
            type: string
        - name: name
          in: query
          description: The login name of the user.
          required: false
          schema:
            type: string
        - name: lastAccessTime.from
          in: query
          description: |
            Search for logins after a specified time.

            **Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.
          required: false
          schema:
            type: string
        - name: lastAccessTime.to
          in: query
          description: |
            Search for logins before a specified time.

            **Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.
          required: false
          schema:
            type: string
        - name: lastAdhocAccessTime.from
          in: query
          description: |
            Search for adhoc access after a specified time.

            **Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.
          required: false
          schema:
            type: string
        - name: lastAdhocAccessTime.to
          in: query
          description: |
            Search for adhoc access before a specified time.

            **Note:** Format must be *EEE, dd MMM yyyy HH:mm:ss Z*, *yyyy-MM-dd* or a timestamp.
          required: false
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'activeUser.yaml#/ActiveUsersResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /clusterServices:
    get:
      tags:
        - clusterServices
      summary: Get the status of particular service.
      operationId: getServiceStatus
      parameters:
        - name: fields
          in: query
          description: |
            The cluster service's fields to return.
          schema:
            type: string
        - name: serviceName
          required: true
          in: query
          description: The service name to get the status of.
          schema:
            type: string
            enum:
              - FolderMonitor
              - Scheduler
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'clusterService.yaml#/ClusterServiceStatus'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /clusterServices/operations:
    post:
      tags:
        - clusterServices
      summary: Operations on particular service.
      operationId: clusterServiceOperation
      parameters:
        - name: serviceName
          in: query
          description: The service name to execute operation.
          schema:
            type: string
            enum:
              - FolderMonitor
              - Scheduler
        - name: operation
          in: query
          description: Operation type.
          schema:
            type: string
            enum:
              - start
              - stop
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'clusterService.yaml#/ClusterServiceOperationResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /transactionManager:
    get:
      tags:
        - transactionManager
      summary: Get the status of Transaction Manager.
      operationId: statusTransactionManager
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'transactionManager.yaml#/TransactionManagerStatus'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /transactionManager/operations:
    post:
      tags:
        - transactionManager
      summary: Stops Transaction Manager.
      operationId: stopTM
      parameters:
        - name: timeout
          in: query
          description: In a graceful stop, the timeout parameter refers to the time
            (in seconds) for which any existing events in TM should be processed. That
            includes server side transfers, post processing actions, advanced routing
            operations. If timeout is not specified (left blank) the value from the
            configuration option TransactionManager.GracefulShutdownTimeout will be
            used.
          schema:
            type: integer
        - name: operation
          in: query
          description: Which TM operation to be performed.
          required: true
          schema:
            type: string
            enum:
              - stop
        - name: graceful
          in: query
          description: Whether to stop TM gracefully.
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'transactionManager.yaml#/TransactionManagerOperationResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /configurations/options:
    get:
      tags:
        - configurations
      summary: Get all configuration options.
      description: "`Permissions`: \"SERVER_CONFIGURATION_FORM\", \"SUPPORT_TOOL_CONFIGURATION_FORM\"\
        .\n\n**Known Issue:** The configuration options collection does not comply\
        \ with the common json objects representation.      \n"
      operationId: getOptions
      parameters:
        - name: name
          in: query
          description: Specify name property for configuration option. Wildcard search available.
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Defines maximum count of returned entries. Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with offset query parameter to get entries at portions.
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: |
            Defines the first entry number of an ordered result to get; last entry number to return is (offset + limit - 1). Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with limit query parameter to get entries at portions.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: The configuration option's fields to return.
          schema:
            type: string
        - name: isLocal
          in: query
          description: Whether to return local or global options.
          schema:
            type: boolean
        - name: readOnly
          in: query
          description: Whether to return only unmodifiable options.
          schema:
            type: boolean
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'configuration.yaml#/ConfigurationOption'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /configurations/options/{name}:
    get:
      tags:
        - configurations
      summary: Get a configuration option.
      description: |
        `Permissions`: "SERVER_CONFIGURATION_FORM", "SUPPORT_TOOL_CONFIGURATION_FORM".
      operationId: getOption
      parameters:
        - name: name
          in: path
          description: The name of the configuration option to get.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: The configuration option's fields to return.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'configuration.yaml#/ConfigurationOption'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    head:
      tags:
        - configurations
      summary: Check if a configuration option exists.
      operationId: optionExists
      parameters:
        - name: name
          in: path
          description: The name of the configuration option.
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - configurations
      summary: Partially update a configuration option.
      description: |
        `Permissions`: "SERVER_CONFIGURATION_FORM", "SUPPORT_TOOL_CONFIGURATION_FORM".
      operationId: updateOptionValue
      parameters:
        - name: name
          in: path
          description: The name of the configuration option to update.
          required: true
          schema:
            type: string
      requestBody:
        description: An array of patch operations. Only the value of an option may be updated.
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /configurations/database:
    get:
      tags:
        - configurations
      summary: Get current database configuration.
      operationId: getDatabaseConfiguration
      parameters:
        - name: fields
          in: query
          description: |
            The database configuration's fields to return.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'configuration.yaml#/DatabaseSettings'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - configurations
      summary: Update current database configuration.
      parameters:
        - in: header
          name: certificateFile
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - host
                - port
              type: object
              properties:
                username:
                  type: string
                  description: |
                    Database Username.

                    `Note` Required for MySQL, MariaDB, Oracle, MSSQL and PostgreSQL.
                  default: null
                password:
                  type: string
                  format: password
                  description: |
                    Database Password.

                    `Note` Required for MySQL, MariaDB, Oracle, MSSQL and PostgreSQL.
                host:
                  type: string
                  description: |
                    Database Host.

                    `Note` Required for Oracle, MSSQL and PostgreSQL.
                  default: null
                port:
                  type: string
                  description: |
                    Database Port.

                    `Note` Required for MySQL, MariaDB, Oracle, MSSQL and PostgreSQL.
                databaseName:
                  type: string
                  description: |
                    Database Name.

                    `Note` Required for Oracle, MSSQL and PostgreSQL.
                  default: null
                useCustomJdbcUrl:
                  type: boolean
                  description: |
                    Use Custom JDBC Url flag.

                    `Note` Required for Oracle and MSSQL.
                  default: false
                jdbcUrlTemplate:
                  type: string
                  description: |
                    Custom JDBC Url.

                    `Note` Required for Oracle and MSSQL.
                  default: null
                secureConnectionEnabled:
                  type: boolean
                  description: |
                    Encrypt Connection flag.

                    `Note` Required for MariaDB, Oracle, MSSQL and PostgreSQL.
                  default: false
                serverCertificateDn:
                  type: string
                  description: |
                    Server Certificate Dn to be used for connection encryption.

                    `Note` Required for Oracle and MSSQL.
                  default: null
                enabledProtocols:
                  type: string
                  description: |
                    Comma-separated list of enabled Protocols. E.g. TLSv1.2.

                    `Note` Required for Oracle.
                  default: null
                enabledCipherSuites:
                  type: string
                  description: |
                    Comma-separated list of Enabled Cipher Suites.

                    `Note` Required for Oracle.
                  default: null
                certificateFile:
                  type: string
                  description: |
                    The Certificate File to be uploaded.

                    `Note` Required for Oracle, MSSQL and PostgreSQL.
                  format: binary
                internalDBRootCa:
                  type: string
                  description: |
                    The internal db Root Ca File to be uploaded.

                    `Note` Required for MariaDB.
                  format: binary
                internalDBServerKey:
                  type: string
                  description: |
                    The internal db Server Key Certificate File to be uploaded.

                    `Note` Required for MariaDB.
                  format: binary
                internalDBServerCert:
                  type: string
                  description: |
                    The internal db Server Certificate File to be uploaded.

                    `Note` Required for MariaDB.
                  format: binary
                kerberosMode:
                  type: boolean
                  description:  |
                    Use Kerberos mode flag.
                    
                    `Note` Required for Oracle.
                  default: false
                useKerberosFile:
                  type: boolean
                  description: |
                    Using Kerberos configuration file flag.

                    `Note` Required for Oracle.
                  default: false
                krbConfigurationFile:
                  type: string
                  description: |
                    The absolute path to the Kerberos configuration file.

                    `Note` Required for Oracle.
                krbCacheFilePath:
                  type: string
                  description:  | 
                    Path to Kerberos cache file.

                    `Note` Required for Oracle.
                useProxy:
                  type: boolean
                  description:  |
                    Flag to use a proxied user for Oracle Proxy Authentication.

                    `Note` Required for Oracle.
                proxyUser:
                  type: string
                  description: |
                    The username of the proxied user.

                    `Note` Required for Oracle.
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          description: Database connection configuration test failed.
          content:
            application/json:
              schema:
                $ref: 'configuration.yaml#/DatabaseConfigurationFailure'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /configurations/database/{componentType}:
    get:
      tags:
        - configurations
      summary: Get current database configuration for specified component type.
      description: |
        `Note` Getting the current database configuration for specified component type is applicable only on Oracle database.
      operationId: getDatabaseConfigurations
      parameters:
        - name: componentType
          in: path
          description: The name of the component type for which to return database configuration.
          required: true
          schema:
            type: string
            enum:
              - ServerLogComponent
              - TransferLogComponent
        - name: fields
          in: query
          description: |
            The database configuration's fields to return.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'configuration.yaml#/DatabaseSettings'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - configurations
      summary: Update current database configuration for specified component type.
      description: |
        `Note` Updating the database configuration for specified component type is applicable only on Oracle database.
      parameters:
        - name: componentType
          in: path
          description: The name of the component type.
          required: true
          schema:
            type: string
            enum:
              - ServerLogComponent
              - TransferLogComponent
        - in: header
          name: certificateFile
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - host
                - port
                - databaseName
              type: object
              properties:
                username:
                  type: string
                  description: Database Username.
                  default: null
                password:
                  type: string
                  format: password
                  description: Database Password.
                  default: null
                host:
                  type: string
                  description: Database Host.
                  default: null
                port:
                  type: string
                  description: Database Port.
                databaseName:
                  type: string
                  description: Database Name.
                  default: null
                useCustomJdbcUrl:
                  type: boolean
                  description: Use Custom JDBC Url flag.
                  default: false
                jdbcUrlTemplate:
                  type: string
                  description: Custom JDBC Url.
                  default: null
                secureConnectionEnabled:
                  type: boolean
                  description: Enctypt Connection flag.
                  default: false
                serverCertificateDn:
                  type: string
                  description: Server Certificate Dn to be used for connection ecnryption.
                  default: null
                enabledProtocols:
                  type: string
                  description: Comma-separated list of enabled Protocols. E.g. TLSv1.2.
                  default: null
                enabledCipherSuites:
                  type: string
                  description: Comma-separated list of Enabled Cipher Suites.
                  default: null
                certificateFile:
                  type: string
                  description: The Certificate File to be uplaoded.
                  format: binary
                kerberosMode:
                  type: boolean
                  description:  |
                    Use Kerberos mode flag.

                    `Note` Required for Oracle.
                  default: false
                useKerberosFile:
                  type: boolean
                  description: |
                    Using Kerberos configuration file flag.

                    `Note` Required for Oracle.
                  default: false
                krbConfigurationFile:
                  type: string
                  description: |
                    The absolute path to the Kerberos configuration file.

                    `Note` Required for Oracle.
                krbCacheFilePath:
                  type: string
                  description:  |
                    Path to Kerberos cache file.

                    `Note` Required for Oracle.
                useProxy:
                  type: boolean
                  description: |
                    Flag to use a proxied user for Oracle Proxy Authentication.

                    `Note` Required for Oracle.
                proxyUser:
                  type: string
                  description: |
                    The username of the proxied user.

                    `Note` Required for Oracle.
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          description: Database connection configuration test failed.
          content:
            application/json:
              schema:
                $ref: 'configuration.yaml#/DatabaseConfigurationFailure'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /configurations/database/operations:
    post:
      tags:
        - configurations
      summary: Database operations.
      parameters:
        - name: operation
          in: query
          required: true
          schema:
            type: string
            enum:
              - test
              - restart
              - createPartitions
              - certificatesGeneration
              - certificatesValidity
          description: |
            `test` - Test database configuration for main database or by component type.

            `restart` - Restarts the database. Applicable only on MySQL and MariaDB.

            `createPartitions` - Manually creates additional partitions in advance for the following days separately from the automated service. Applicable only on PostgreSQL.

            `certificatesGeneration` - Generates embedded database certificates with a given validity (days). Applicable only on MariaDB with secure connection enabled.

            `certificatesValidity` - Returns days, after which the embedded database certificates will expire. Applicable only on MariaDB.
        - name: numberOfPartitions
          in: query
          description: |
            Number of partitions that will be created. Accepted range (3 to 365).

            `Note` Used for `createPartitions` operation.
          schema:
            type: integer
            format: int64
            minimum: 3
            maximum: 365
        - name: certificatesValidityPeriod
          in: query
          description: |
            Days for which the internalDB certificates will be valid.

            `Note` Used for `certificatesGeneration` operation.
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: |
                    Database Username.

                    `Note` Obligatory when performing `test` operation. Required for MySQL, MariaDB, Oracle, MSSQL and PostgreSQL.
                password:
                  type: string
                  format: password
                  description: |
                    Database Password.

                    `Note` Obligatory when performing `test` operation. Required for MySQL, MariaDB, Oracle, MSSQL and PostgreSQL.
                host:
                  type: string
                  description: |
                    Database Host.

                    `Note` Оbligatory when performing `test` operation. Required for MySQL, MariaDB, Oracle, MSSQL and PostgreSQL.
                port:
                  type: string
                  description: |
                    Database Port.

                    `Note` Obligatory when performing `test` operation. Required for MySQL, MariaDB, Oracle, MSSQL and PostgreSQL.
                databaseName:
                  type: string
                  description: |
                    Database Name.

                    `Note` Used for `test` operation. Required for Oracle, MSSQL and PostgreSQL.
                useCustomJdbcUrl:
                  type: boolean
                  description: |
                    Use Custom JDBC Url flag.

                    `Note` Used for `test` operation. Required for Oracle and MSSQL.
                  default: false
                jdbcUrlTemplate:
                  type: string
                  description: |
                    Custom JDBC Url.

                    `Note` Used for `test` operation. Required for Oracle and MSSQL.
                secureConnectionEnabled:
                  type: boolean
                  description: |
                    Encrypt Connection flag.

                    `Note` Used for `test` operation. Required for Oracle, MSSQL and PostgreSQL.

                    This property is not supported for the embedded database as it will be taken and used from the current configuration.
                  default: false
                serverCertificateDn:
                  type: string
                  description: |
                    Server Certificate Dn to be used for connection encryption.

                    `Note` Used for `test` operation. Required for Oracle and MSSQL.
                enabledProtocols:
                  type: string
                  description: |
                    Comma-separated list of enabled Protocols. E.g. TLSv1.2.

                    `Note` Used for `test` operation. Required for Oracle.
                enabledCipherSuites:
                  type: string
                  description: |
                    Comma-separated list of Enabled Cipher Suites.

                    `Note` Used for `test` operation. Required for Oracle.
                certificateFile:
                  type: string
                  description: |
                    The Certificate File to be uploaded.

                    `Note` Used for `test` operation. Required for Oracle, MSSQL and PostgreSQL.
                  format: binary
                kerberosMode:
                  type: boolean
                  description:  |
                    Use Kerberos mode flag.

                    `Note` Required for Oracle.
                  default: false
                useKerberosFile:
                  type: boolean
                  description: |
                    Using Kerberos configuration file flag.

                    `Note` Required for Oracle.
                  default: false
                krbConfigurationFile:
                  type: string
                  description: |
                    The absolute path to the Kerberos configuration file.

                    `Note` Required for Oracle.
                krbCacheFilePath:
                  type: string
                  description:  |
                    Path to Kerberos cache file.

                    `Note` Required for Oracle.
                useProxy:
                  type: boolean
                  description:  |
                    Flag to use a proxied user for Oracle Proxy Authentication.

                    `Note` Required for Oracle.
                proxyUser:
                  type: string
                  description: |
                    The username of the proxied user.

                    `Note` Required for Oracle.
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        405:
          $ref: 'responses.yaml#/MethodNotAllowed'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /configurations/sentinel:
    get:
      tags:
        - configurations
      summary: Get the current Sentinel configuration on the ST server.
      description: |
        `Permissions`: "MASTER_SENTINEL_SETTINGS"
      operationId: getSentinelConfig
      parameters:
        - name: fields
          in: query
          description: |
            The sentinel configuration's fields to return.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'configuration.yaml#/Sentinel'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - configurations
      summary: Replace the existing Sentinel configuration on the ST server.
      description: |
        `Permissions`: "MASTER_SENTINEL_SETTINGS"
      operationId: updateSentinelConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'configuration.yaml#/Sentinel'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - configurations
      summary: Partially update the existing Sentinel configuration on the ST server.
      description: |
        `Permissions`: "MASTER_SENTINEL_SETTINGS"
      operationId: partiallyUpdateSentinelConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /configurations/loginSettings:
    get:
      tags:
        - configurations
      summary: Get login settings.
      operationId: getLoginSettings
      parameters:
        - name: fields
          in: query
          description: |
            The login setting's fields to return.

            **Note:** The certificateIssuer field will always be present.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: 'configuration.yaml#/InternalLoginSettings'
                  - $ref: 'configuration.yaml#/TrustedLoginSettings'
                  - $ref: 'configuration.yaml#/SelectedLoginSettings'
                  - $ref: 'configuration.yaml#/OtherLoginSettings'
                discriminator:
                  propertyName: certificateIssuer
                  mapping:
                    internal: 'configuration.yaml#/InternalLoginSettings'
                    trusted: 'configuration.yaml#/TrustedLoginSettings'
                    selected: 'configuration.yaml#/SelectedLoginSettings'
                    other: 'configuration.yaml#/OtherLoginSettings'
              examples:
                Internal:
                  $ref: 'examples.yaml#/InternalLoginSettingsExample'
                Trusted:
                  $ref: 'examples.yaml#/TrustedLoginSettingsExample'
                Other:
                  $ref: 'examples.yaml#/OtherLoginSettingsExample'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - configurations
      summary: Replace an existing login settings.
      operationId: updateLoginSettings
      requestBody:
        description: Object to update.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: 'configuration.yaml#/InternalLoginSettings'
                - $ref: 'configuration.yaml#/TrustedLoginSettings'
                - $ref: 'configuration.yaml#/SelectedLoginSettings'
                - $ref: 'configuration.yaml#/OtherLoginSettings'
              discriminator:
                propertyName: certificateIssuer
                mapping:
                  internal: 'configuration.yaml#/InternalLoginSettings'
                  trusted: 'configuration.yaml#/TrustedLoginSettings'
                  selected: 'configuration.yaml#/SelectedLoginSettings'
                  other: 'configuration.yaml#/OtherLoginSettings'
            examples:
              Internal:
                $ref: 'postExamples.yaml#/InternalLoginSettingsExample'
              Trusted:
                $ref: 'postExamples.yaml#/TrustedLoginSettingsExample'
              Selected:
                $ref: 'postExamples.yaml#/SelectedLoginSettingsExample'
              Other:
                $ref: 'postExamples.yaml#/OtherLoginSettingsExample'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - configurations
      summary: Partially update the current login settings on ST server.
      operationId: partiallyUpdateLoginSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /configurations/adminui:
    get:
      tags:
        - configurations
      summary: Get Admin UI configurations.
      operationId: getAdminUIConfig
      parameters:
        - name: fields
          in: query
          description: The Admin UI configuration's fields to return.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'configuration.yaml#/AdminUIConfig'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - configurations
      summary: Replace the existing Admin UI configurations (for internal use only).
      operationId: updateAdminUIConfig
      requestBody:
        required: true
        description: Object to update.
        content:
          application/json:
            schema:
              $ref: 'configuration.yaml#/AdminUIConfig'
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - configurations
      summary: Partially update the Admin UI configurations (for internal use only).
      operationId: partiallyUpdateAdminUIConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchAdminUIRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /configurations/allowedSTServers:
    get:
      tags:
        - configurations
      summary: Get allowed ST servers.
      operationId: getAllowedSTServers
      parameters:
        - name: limit
          in: query
          description: The limit of the listed rows. The limit parameter can only have
            a non-negative integer value. If the limit parameter is set to 0 or it is
            null, then its value will be the value of the global server configuration
            parameter named 'Webservices.EntriesPerPage' (which by default has value
            100).
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: The initial row to list all administrators. The offset parameter
            can only have a non-negative integer value. If this parameter is not set,
            then it is considered 0.
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'configuration.yaml#/AllowedSTServersResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - configurations
      summary: Replace the list of allowed ST Servers.
      operationId: updateAllowedSTServers
      requestBody:
        required: true
        description: Object to update.
        content:
          application/json:
            schema:
              $ref: 'configuration.yaml#/AllowedSTServers'
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - configurations
      summary: Partially update the list of allowed ST Servers.
      operationId: partiallyUpdateAllowedSTServers
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /configurations/keystorePassword:
    put:
      tags:
        - configurations
      summary: Replace an existing keystore password.
      operationId: changeKeystorePassword
      requestBody:
        required: true
        description: Object to update.
        content:
          application/json:
            schema:
              $ref: 'configuration.yaml#/KeystorePassword'
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /configurations/fileArchiving:
    get:
      tags:
        - configurations
      summary: Get file archiving options on ST server.
      operationId: getFileArchivingConfig
      parameters:
        - name: fields
          in: query
          description: |
            The file archiving's fields to return.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'configuration.yaml#/FileArchiving'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - configurations
      summary: Replace an existing file archiving.
      operationId: updateFileArchivingConfig
      requestBody:
        required: true
        description: Object to update.
        content:
          application/json:
            schema:
              $ref: 'configuration.yaml#/FileArchiving'
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - configurations
      summary: Partially update file archiving settings on ST server.
      operationId: partiallyUpdateFileArchivingConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /configurations/clusterManagement:
    get:
      tags:
        - configurations
      summary: Get collection of servers information on ST server.
      operationId: getServersInfo
      parameters:
        - name: fields
          in: query
          description: |
            The fields of cluster information to return.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'configuration.yaml#/ClusterInformation'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    post:
      tags:
        - configurations
      summary: Add a server.
      description: Applicable only in EC.
      operationId: addServer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                serverAddress:
                  type: string
                  description: Server's address.
      responses:
        201:
          $ref: 'responses.yaml#/Created'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        405:
          $ref: 'responses.yaml#/MethodNotAllowed'
        403:
          $ref: 'responses.yaml#/Forbidden'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /configurations/clusterManagement/{serverAddress}:
    get:
      tags:
        - configurations
      summary: Get server information.
      operationId: getServerInfo
      parameters:
        - name: serverAddress
          in: path
          description: The server address to retrieve.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: |
            The cluster node's fields to return.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'configuration.yaml#/ClusterNode'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    head:
      tags:
        - configurations
      summary: Check if server address exists.
      description: Applicable only in EC.
      operationId: serverAddressExist
      parameters:
        - name: serverAddress
          in: path
          description: The server address to check for existance.
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: 'responses.yaml#/OK'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    delete:
      tags:
        - configurations
      summary: Delete a server address.
      description: Applicable only in EC.
      operationId: deleteServerEC
      parameters:
        - name: serverAddress
          in: path
          description: The name of the server address that will be deleted.
          required: true
          schema:
            type: string
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /configurations/clusterManagement/nodeThreshold:
    get:
      tags:
        - configurations
      summary: Get node threshold.
      description: Applicable only in EC.
      operationId: getNodeThreshold
      parameters:
        - name: fields
          in: query
          description: |
            The node threshold's fields to return.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'configuration.yaml#/NodeThreshold'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    put:
      tags:
        - configurations
      summary: Replace an existing node threshold.
      description: Applicable only in EC.
      operationId: updateNodeThreshold
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'configuration.yaml#/NodeThreshold'
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
    patch:
      tags:
        - configurations
      summary: Partially update node threshold.
      description: Applicable only in EC.
      operationId: partiallyUpdateNodeThreshold
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'patch.yaml#/PatchRequest'
        required: true
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /configurations/clusterManagement/{serverAddress}/operations:
    post:
      tags:
        - configurations
      summary: Bounce the server.
      description: Applicable only in SC.
      operationId: bounceServer
      parameters:
        - name: serverAddress
          in: path
          description: The server address.
          required: true
          schema:
            type: string
        - name: operation
          in: query
          description: Operation type.
          required: true
          schema:
            type: string
            enum:
              - bounce
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /configurations/clusterManagement/operations:
    post:
      tags:
        - configurations
      summary: Execute operations over cluster servers.
      description: Applicable only in SC.
      operationId: serverOperations
      parameters:
        - name: operation
          in: query
          description: Operation type.
          required: true
          schema:
            type: string
            enum:
              - bounce
              - synchronize
      responses:
        204:
          $ref: 'responses.yaml#/NoContent'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        409:
          $ref: 'responses.yaml#/Conflict'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /accountSetup:
    post:
      tags:
        - accountSetup
      summary: Setup a new or existing account with certificates, transfer sites, transfer profiles and subscriptions.
      description: |
        Setup a new or existing account with certificates, transfer sites, transfer profiles and subscriptions.
        When the Content-Type and Accept headers are `multipart/mixed`, certificates can be imported from a file, in which they are separated
        by a boundary and the following headers are specified for each file:

        Content-Type: application/octet-stream

        Content-Disposition: attachment;

        keyname:<name specified in the respective certificate body>

        encoded: false

        **Note:** Due to an issue with the swagger schema, when importing certificates the json must also have a starting boundary and a Content-Type: application/json.

        **Known issue:** The import of x509 certificates of local and private usage can not be done via text representation of the certificate, unless it is Base64 encoded (the 'encoded' header serves to show whether this is the case or not). If the encrypted certificate has not been encoded, it must be supplied in a PKCS #12 format file rather than plain text.

        **Known issue:** Certificate import requires additional file with the certificate content because of swagger limitations (refer to https://github.com/swagger-api/swagger-ui/issues/5090).
      requestBody:
        description: Account setup to be created.
        content:
          application/json:
            schema:
              $ref: 'accountSetup.yaml#/PostFlow'
          multipart/mixed; boundary=BOUNDARY:
            schema:
              $ref: 'accountSetup.yaml#/MultiPartFlow'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: 'accountSetup.yaml#/FlowResponseArray'
            multipart/mixed:
              schema:
                allOf:
                  - $ref: 'accountSetup.yaml#/FlowResponseArray'
                  - type: object
                    properties:
                      certificates:
                        type: array
                        items:
                          type: string
                          format: binary
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /accountSetup/{name}:
    get:
      tags:
        - accountSetup
      summary: Get an account and its certificates, transfer sites, transfer profiles, routes and subscriptions.
      description: |
        Get an account and its certificates, transfer sites, transfer profiles, routes and subscriptions.
        When Accept header is set to `application/json`, only certificate properties would be returned.
        When Accept header is set to `multipart/mixed`, certificates would be exported.
      operationId: getFlows
      parameters:
        - name: name
          in: path
          description: The account name to search for.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'accountSetup.yaml#/Flow'
            multipart/mixed:
              schema:
                allOf:
                  - $ref: 'accountSetup.yaml#/Flow'
                  - type: object
                    properties:
                      certificates:
                        type: array
                        items:
                          type: string
                          format: binary
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /events:
    get:
      tags:
        - events
      summary: Get collection of events on the ST server.
      description: | 
        `Permissions`: \"TRANSFER_LOG_FORM\" and \"STATISTICS_MONITOR_ACTION\"
      parameters:
        - name: limit
          in: query
          description: |
            The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          description: The fields of event to return.
          schema:
            type: string
          explode: false
        - name: id
          in: query
          description: The id of the event.
          schema:
            type: string
        - name: agentTrigger
          in: query
          description: Event's trigger.
          schema:
            type: string
        - name: agentType
          in: query
          description: Event type.
          schema:
            type: string
        - name: arrivalTime
          in: query
          description: Event arrival time.
          schema:
            type: integer
            format: int64
        - name: clusterNode
          in: query
          description: The cluster node on which the event is processing.
          schema:
            type: string
        - name: eventGroup
          in: query
          description: Event group.
          schema:
            type: string
        - name: limited
          in: query
          description: Client initiated transfers.
          schema:
            type: boolean
        - name: nextProcessingTime
          in: query
          description: Next processing time.
          schema:
            type: integer
            format: int64
        - name: processorType
          in: query
          description: Defines which task processor should take care of a task.
          schema:
            type: string
            enum:
              - DEFAULT
              - ADVANCED_ROUTING
              - PESIT
        - name: recovered
          in: query
          description: Whether the event is recovered or not.
          schema:
            type: boolean
        - name: retryCount
          in: query
          description: Event retry number.
          schema:
            type: integer
        - name: status
          in: query
          description: Event status.
          schema:
            type: string
        - name: subscriptionId
          in: query
          description: Subscription id which event is associated with.
          schema:
            type: string
        - name: accountId
          in: query
          description: Account id which event is associated with.
          schema:
            type: string
        - name: accountName
          in: query
          description: Account name which event is associated with. Wildcard character (*) can be used.
          schema:
            type: string
        - name: fullTarget
          in: query
          description: File location. Wildcard character (*) can be used.
          schema:
            type: string
        - name: lastHeartbeatBefore
          in: query
          description: Timestamp (UTC) before the last updated heartbeat time for the persisted event.
          schema:
            type: string
        - name: lastHeartbeatAfter
          in: query
          description: Timestamp (UTC) after the last updated heartbeat time for the persisted event.
          schema:
            type: string
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'event.yaml#/EventResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /events/{id}:
    get:
      tags:
        - events
      summary: Get an event.
      description:  |
        `Permissions`: \"TRANSFER_LOG_FORM\" and \"STATISTICS_MONITOR_ACTION\"
      operationId: getEvent
      parameters:
        - name: id
          in: path
          description: The event id to search for.
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: The event's fields to return.
          schema:
            type: string
          explode: false
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'event.yaml#/EventDetails'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
  /events/operations:
    post:
      tags:
        - events
      summary: Perform operation on events.
      description: |
        `Permissions`: "TRANSFER_LOG_FORM" and \"STATISTICS_MONITOR_ACTION\"
      operationId: deleteEvent
      parameters:
        - name: operation
          in: query
          description: Which event operation to be performed.
          required: true
          schema:
            type: string
            enum:
              - delete
      requestBody:
        description: Collection of event ids.
        content:
          application/json:
            schema:
              $ref: 'event.yaml#/EventDelete'
        required: true
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: 'event.yaml#/EventDeleteResult'
        400:
          $ref: 'responses.yaml#/BadRequest'
        401:
          $ref: 'responses.yaml#/Unauthorized'
        403:
          $ref: 'responses.yaml#/Forbidden'
        404:
          $ref: 'responses.yaml#/NotFound'
        406:
          $ref: 'responses.yaml#/NotAcceptable'
        415:
          $ref: 'responses.yaml#/UnsupportedMediaType'
        500:
          $ref: 'responses.yaml#/InternalServerError'
        503:
          $ref: 'responses.yaml#/ServiceUnavailable'
